// THIS FILE IS GENERATED (see helper/)

#ifndef Q_CLASSES_H
#define Q_CLASSES_H

#include "../ecl_fun.h"
#include "_lobjects.h"
#include <QtGui>

typedef QList<int> NumList;

class LAbstractAnimation : public QAbstractAnimation {
    Q_OBJECT
    friend class Q1;
public:
    LAbstractAnimation(uint u, QObject* x1 = 0) : QAbstractAnimation(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    int duration() const { void* fun = LObjects::overrideFun(unique, 1); if(fun) { return callOverrideFun(fun, 1, 0).toInt(); } return 0; }
    void updateCurrentTime(int x1) { void* fun = LObjects::overrideFun(unique, 2); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 2, args).toBool()) return; }}
    void updateDirection(QAbstractAnimation::Direction x1) { void* fun = LObjects::overrideFun(unique, 3); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 3, args).toBool()) return; } QAbstractAnimation::updateDirection(x1); }
    void updateState(QAbstractAnimation::State x1, QAbstractAnimation::State x2) { void* fun = LObjects::overrideFun(unique, 4); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 4, args).toBool()) return; } QAbstractAnimation::updateState(x1, x2); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QAbstractAnimation::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QAbstractAnimation::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QAbstractAnimation::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QAbstractAnimation::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QAbstractAnimation::timerEvent(x1); }
};

class LAbstractButton : public QAbstractButton {
    Q_OBJECT
    friend class Q2;
public:
    LAbstractButton(uint u, QWidget* x1 = 0) : QAbstractButton(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void checkStateSet() { void* fun = LObjects::overrideFun(unique, 10); if(fun) { if(callOverrideFun(fun, 10, 0).toBool()) return; } QAbstractButton::checkStateSet(); }
    bool hitButton(const QPoint& x1) const { void* fun = LObjects::overrideFun(unique, 11); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 11, args).toBool(); } return QAbstractButton::hitButton(x1); }
    void nextCheckState() { void* fun = LObjects::overrideFun(unique, 12); if(fun) { if(callOverrideFun(fun, 12, 0).toBool()) return; } QAbstractButton::nextCheckState(); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QAbstractButton::changeEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QAbstractButton::focusInEvent(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QAbstractButton::focusOutEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QAbstractButton::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QAbstractButton::keyReleaseEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QAbstractButton::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QAbstractButton::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QAbstractButton::mouseReleaseEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QAbstractButton::timerEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QAbstractButton::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QAbstractButton::inputMethodQuery(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QAbstractButton::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QAbstractButton::sizeHint(); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QAbstractButton::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QAbstractButton::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QAbstractButton::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QAbstractButton::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QAbstractButton::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QAbstractButton::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QAbstractButton::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QAbstractButton::enterEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QAbstractButton::focusNextPrevChild(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QAbstractButton::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QAbstractButton::inputMethodEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QAbstractButton::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QAbstractButton::mouseDoubleClickEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QAbstractButton::moveEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QAbstractButton::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QAbstractButton::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QAbstractButton::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QAbstractButton::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QAbstractButton::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QAbstractButton::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QAbstractButton::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QAbstractButton::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QAbstractButton::disconnectNotify(x1); }
};

class LAbstractItemDelegate : public QAbstractItemDelegate {
    Q_OBJECT
    friend class Q3;
public:
    LAbstractItemDelegate(uint u, QObject* x1 = 0) : QAbstractItemDelegate(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QWidget* createEditor(QWidget* x1, const QStyleOptionViewItem& x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 45); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return (QWidget*)qVariantValue<void*>(callOverrideFun(fun, 45, args)); } return QAbstractItemDelegate::createEditor(x1, x2, x3); }
    bool editorEvent(QEvent* x1, QAbstractItemModel* x2, const QStyleOptionViewItem& x3, const QModelIndex& x4) { void* fun = LObjects::overrideFun(unique, 46); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return callOverrideFun(fun, 46, args).toBool(); } return QAbstractItemDelegate::editorEvent(x1, x2, x3, x4); }
    void paint(QPainter* x1, const QStyleOptionViewItem& x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 47); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 47, args).toBool()) return; }}
    void setEditorData(QWidget* x1, const QModelIndex& x2) const { void* fun = LObjects::overrideFun(unique, 48); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 48, args).toBool()) return; } QAbstractItemDelegate::setEditorData(x1, x2); }
    void setModelData(QWidget* x1, QAbstractItemModel* x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 49); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 49, args).toBool()) return; } QAbstractItemDelegate::setModelData(x1, x2, x3); }
    QSize sizeHint(const QStyleOptionViewItem& x1, const QModelIndex& x2) const { void* fun = LObjects::overrideFun(unique, 50); if(fun) { const void* args[] = { &x1, &x2 }; return qVariantValue<QSize>(callOverrideFun(fun, 50, args)); } return QSize(); }
    void updateEditorGeometry(QWidget* x1, const QStyleOptionViewItem& x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 51); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 51, args).toBool()) return; } QAbstractItemDelegate::updateEditorGeometry(x1, x2, x3); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QAbstractItemDelegate::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QAbstractItemDelegate::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QAbstractItemDelegate::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QAbstractItemDelegate::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QAbstractItemDelegate::timerEvent(x1); }
};

class LAbstractItemModel : public QAbstractItemModel {
    Q_OBJECT
    friend class Q4;
public:
    LAbstractItemModel(uint u, QObject* x1 = 0) : QAbstractItemModel(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QModelIndex buddy(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 52); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 52, args)); } return QAbstractItemModel::buddy(x1); }
    bool canFetchMore(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 53); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 53, args).toBool(); } return QAbstractItemModel::canFetchMore(x1); }
    int columnCount(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 54); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 54, args).toInt(); } return 0; }
    QVariant data(const QModelIndex& x1, int x2 = Qt::DisplayRole) const { void* fun = LObjects::overrideFun(unique, 55); if(fun) { const void* args[] = { &x1, &x2 }; return qVariantValue<QVariant>(callOverrideFun(fun, 55, args)); } return QVariant(); }
    bool dropMimeData(const QMimeData* x1, Qt::DropAction x2, int x3, int x4, const QModelIndex& x5) { void* fun = LObjects::overrideFun(unique, 56); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; return callOverrideFun(fun, 56, args).toBool(); } return QAbstractItemModel::dropMimeData(x1, x2, x3, x4, x5); }
    void fetchMore(const QModelIndex& x1) { void* fun = LObjects::overrideFun(unique, 57); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 57, args).toBool()) return; } QAbstractItemModel::fetchMore(x1); }
    Qt::ItemFlags flags(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 58); if(fun) { const void* args[] = { &x1 }; return (Qt::ItemFlags)callOverrideFun(fun, 58, args).toInt(); } return QAbstractItemModel::flags(x1); }
    bool hasChildren(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 59); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 59, args).toBool(); } return QAbstractItemModel::hasChildren(x1); }
    QVariant headerData(int x1, Qt::Orientation x2, int x3 = Qt::DisplayRole) const { void* fun = LObjects::overrideFun(unique, 60); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QVariant>(callOverrideFun(fun, 60, args)); } return QAbstractItemModel::headerData(x1, x2, x3); }
    QModelIndex index(int x1, int x2, const QModelIndex& x3 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 61); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 61, args)); } return QModelIndex(); }
    bool insertColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 62); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 62, args).toBool(); } return QAbstractItemModel::insertColumns(x1, x2, x3); }
    bool insertRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 63); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 63, args).toBool(); } return QAbstractItemModel::insertRows(x1, x2, x3); }
    QModelIndexList match(const QModelIndex& x1, int x2, const QVariant& x3, int x4 = 1, Qt::MatchFlags x5 = Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap)) const { void* fun = LObjects::overrideFun(unique, 64); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; return qVariantValue<QModelIndexList>(callOverrideFun(fun, 64, args)); } return QAbstractItemModel::match(x1, x2, x3, x4, x5); }
    QMimeData* mimeData(const QModelIndexList& x1) const { void* fun = LObjects::overrideFun(unique, 65); if(fun) { const void* args[] = { &x1 }; return (QMimeData*)qVariantValue<void*>(callOverrideFun(fun, 65, args)); } return QAbstractItemModel::mimeData(x1); }
    QStringList mimeTypes() const { void* fun = LObjects::overrideFun(unique, 66); if(fun) { return qVariantValue<QStringList>(callOverrideFun(fun, 66, 0)); } return QAbstractItemModel::mimeTypes(); }
    QModelIndex parent(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 67); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 67, args)); } return QModelIndex(); }
    bool removeColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 68); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 68, args).toBool(); } return QAbstractItemModel::removeColumns(x1, x2, x3); }
    bool removeRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 69); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 69, args).toBool(); } return QAbstractItemModel::removeRows(x1, x2, x3); }
    int rowCount(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 70); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 70, args).toInt(); } return 0; }
    bool setData(const QModelIndex& x1, const QVariant& x2, int x3 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 71); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 71, args).toBool(); } return QAbstractItemModel::setData(x1, x2, x3); }
    bool setHeaderData(int x1, Qt::Orientation x2, const QVariant& x3, int x4 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 72); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return callOverrideFun(fun, 72, args).toBool(); } return QAbstractItemModel::setHeaderData(x1, x2, x3, x4); }
    void sort(int x1, Qt::SortOrder x2 = Qt::AscendingOrder) { void* fun = LObjects::overrideFun(unique, 73); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 73, args).toBool()) return; } QAbstractItemModel::sort(x1, x2); }
    QSize span(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 74); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QSize>(callOverrideFun(fun, 74, args)); } return QAbstractItemModel::span(x1); }
    Qt::DropActions supportedDropActions() const { void* fun = LObjects::overrideFun(unique, 75); if(fun) { return (Qt::DropActions)callOverrideFun(fun, 75, 0).toInt(); } return QAbstractItemModel::supportedDropActions(); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QAbstractItemModel::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QAbstractItemModel::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QAbstractItemModel::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QAbstractItemModel::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QAbstractItemModel::timerEvent(x1); }
};

class LAbstractItemView : public QAbstractItemView {
    Q_OBJECT
    friend class Q5;
public:
    LAbstractItemView(uint u, QWidget* x1 = 0) : QAbstractItemView(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QModelIndex indexAt(const QPoint& x1) const { void* fun = LObjects::overrideFun(unique, 76); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 76, args)); } return QModelIndex(); }
    void keyboardSearch(const QString& x1) { void* fun = LObjects::overrideFun(unique, 77); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 77, args).toBool()) return; } QAbstractItemView::keyboardSearch(x1); }
    void scrollTo(const QModelIndex& x1, ScrollHint x2 = EnsureVisible) { void* fun = LObjects::overrideFun(unique, 78); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 78, args).toBool()) return; }}
    void setModel(QAbstractItemModel* x1) { void* fun = LObjects::overrideFun(unique, 79); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 79, args).toBool()) return; } QAbstractItemView::setModel(x1); }
    void setSelectionModel(QItemSelectionModel* x1) { void* fun = LObjects::overrideFun(unique, 80); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 80, args).toBool()) return; } QAbstractItemView::setSelectionModel(x1); }
    int sizeHintForColumn(int x1) const { void* fun = LObjects::overrideFun(unique, 81); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 81, args).toInt(); } return QAbstractItemView::sizeHintForColumn(x1); }
    int sizeHintForRow(int x1) const { void* fun = LObjects::overrideFun(unique, 82); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 82, args).toInt(); } return QAbstractItemView::sizeHintForRow(x1); }
    QRect visualRect(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 83); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QRect>(callOverrideFun(fun, 83, args)); } return QRect(); }
    bool edit(const QModelIndex& x1, EditTrigger x2, QEvent* x3) { void* fun = LObjects::overrideFun(unique, 84); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 84, args).toBool(); } return QAbstractItemView::edit(x1, x2, x3); }
    int horizontalOffset() const { void* fun = LObjects::overrideFun(unique, 85); if(fun) { return callOverrideFun(fun, 85, 0).toInt(); } return 0; }
    bool isIndexHidden(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 86); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 86, args).toBool(); } return false; }
    QModelIndex moveCursor(CursorAction x1, Qt::KeyboardModifiers x2) { void* fun = LObjects::overrideFun(unique, 87); if(fun) { const void* args[] = { &x1, &x2 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 87, args)); } return QModelIndex(); }
    QModelIndexList selectedIndexes() const { void* fun = LObjects::overrideFun(unique, 88); if(fun) { return qVariantValue<QModelIndexList>(callOverrideFun(fun, 88, 0)); } return QAbstractItemView::selectedIndexes(); }
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex& x1, const QEvent* x2 = 0) const { void* fun = LObjects::overrideFun(unique, 89); if(fun) { const void* args[] = { &x1, &x2 }; return (QItemSelectionModel::SelectionFlags)callOverrideFun(fun, 89, args).toInt(); } return QAbstractItemView::selectionCommand(x1, x2); }
    void setSelection(const QRect& x1, QItemSelectionModel::SelectionFlags x2) { void* fun = LObjects::overrideFun(unique, 90); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 90, args).toBool()) return; }}
    void startDrag(Qt::DropActions x1) { void* fun = LObjects::overrideFun(unique, 91); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 91, args).toBool()) return; } QAbstractItemView::startDrag(x1); }
    int verticalOffset() const { void* fun = LObjects::overrideFun(unique, 92); if(fun) { return callOverrideFun(fun, 92, 0).toInt(); } return 0; }
    QStyleOptionViewItem viewOptions() const { void* fun = LObjects::overrideFun(unique, 93); if(fun) { return qVariantValue<QStyleOptionViewItem>(callOverrideFun(fun, 93, 0)); } return QAbstractItemView::viewOptions(); }
    QRegion visualRegionForSelection(const QItemSelection& x1) const { void* fun = LObjects::overrideFun(unique, 94); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QRegion>(callOverrideFun(fun, 94, args)); } return QRegion(); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QAbstractItemView::inputMethodQuery(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QAbstractItemView::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QAbstractItemView::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QAbstractItemView::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QAbstractItemView::dropEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QAbstractItemView::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QAbstractItemView::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QAbstractItemView::focusOutEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QAbstractItemView::inputMethodEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QAbstractItemView::keyPressEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QAbstractItemView::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QAbstractItemView::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QAbstractItemView::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QAbstractItemView::mouseReleaseEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QAbstractItemView::resizeEvent(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QAbstractItemView::timerEvent(x1); }
    bool viewportEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 95); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 95, args).toBool(); } return QAbstractItemView::viewportEvent(x1); }
    void scrollContentsBy(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 96); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 96, args).toBool()) return; } QAbstractItemView::scrollContentsBy(x1, x2); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QAbstractItemView::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QAbstractItemView::sizeHint(); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QAbstractItemView::contextMenuEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QAbstractItemView::paintEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QAbstractItemView::wheelEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QAbstractItemView::changeEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QAbstractItemView::heightForWidth(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QAbstractItemView::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QAbstractItemView::closeEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QAbstractItemView::enterEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QAbstractItemView::hideEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QAbstractItemView::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QAbstractItemView::leaveEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QAbstractItemView::moveEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QAbstractItemView::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QAbstractItemView::tabletEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QAbstractItemView::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QAbstractItemView::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QAbstractItemView::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QAbstractItemView::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QAbstractItemView::disconnectNotify(x1); }
};

class LAbstractListModel : public QAbstractListModel {
    Q_OBJECT
    friend class Q6;
public:
    LAbstractListModel(uint u, QObject* x1 = 0) : QAbstractListModel(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool dropMimeData(const QMimeData* x1, Qt::DropAction x2, int x3, int x4, const QModelIndex& x5) { void* fun = LObjects::overrideFun(unique, 56); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; return callOverrideFun(fun, 56, args).toBool(); } return QAbstractListModel::dropMimeData(x1, x2, x3, x4, x5); }
    QModelIndex index(int x1, int x2 = 0, const QModelIndex& x3 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 61); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 61, args)); } return QAbstractListModel::index(x1, x2, x3); }
    QModelIndex buddy(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 52); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 52, args)); } return QAbstractListModel::buddy(x1); }
    bool canFetchMore(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 53); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 53, args).toBool(); } return QAbstractListModel::canFetchMore(x1); }
    QVariant data(const QModelIndex& x1, int x2 = Qt::DisplayRole) const { void* fun = LObjects::overrideFun(unique, 55); if(fun) { const void* args[] = { &x1, &x2 }; return qVariantValue<QVariant>(callOverrideFun(fun, 55, args)); } return QVariant(); }
    void fetchMore(const QModelIndex& x1) { void* fun = LObjects::overrideFun(unique, 57); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 57, args).toBool()) return; } QAbstractListModel::fetchMore(x1); }
    Qt::ItemFlags flags(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 58); if(fun) { const void* args[] = { &x1 }; return (Qt::ItemFlags)callOverrideFun(fun, 58, args).toInt(); } return QAbstractListModel::flags(x1); }
    QVariant headerData(int x1, Qt::Orientation x2, int x3 = Qt::DisplayRole) const { void* fun = LObjects::overrideFun(unique, 60); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QVariant>(callOverrideFun(fun, 60, args)); } return QAbstractListModel::headerData(x1, x2, x3); }
    bool insertColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 62); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 62, args).toBool(); } return QAbstractListModel::insertColumns(x1, x2, x3); }
    bool insertRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 63); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 63, args).toBool(); } return QAbstractListModel::insertRows(x1, x2, x3); }
    QModelIndexList match(const QModelIndex& x1, int x2, const QVariant& x3, int x4 = 1, Qt::MatchFlags x5 = Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap)) const { void* fun = LObjects::overrideFun(unique, 64); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; return qVariantValue<QModelIndexList>(callOverrideFun(fun, 64, args)); } return QAbstractListModel::match(x1, x2, x3, x4, x5); }
    QMimeData* mimeData(const QModelIndexList& x1) const { void* fun = LObjects::overrideFun(unique, 65); if(fun) { const void* args[] = { &x1 }; return (QMimeData*)qVariantValue<void*>(callOverrideFun(fun, 65, args)); } return QAbstractListModel::mimeData(x1); }
    QStringList mimeTypes() const { void* fun = LObjects::overrideFun(unique, 66); if(fun) { return qVariantValue<QStringList>(callOverrideFun(fun, 66, 0)); } return QAbstractListModel::mimeTypes(); }
    bool removeColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 68); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 68, args).toBool(); } return QAbstractListModel::removeColumns(x1, x2, x3); }
    bool removeRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 69); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 69, args).toBool(); } return QAbstractListModel::removeRows(x1, x2, x3); }
    int rowCount(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 70); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 70, args).toInt(); } return 0; }
    bool setData(const QModelIndex& x1, const QVariant& x2, int x3 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 71); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 71, args).toBool(); } return QAbstractListModel::setData(x1, x2, x3); }
    bool setHeaderData(int x1, Qt::Orientation x2, const QVariant& x3, int x4 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 72); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return callOverrideFun(fun, 72, args).toBool(); } return QAbstractListModel::setHeaderData(x1, x2, x3, x4); }
    void sort(int x1, Qt::SortOrder x2 = Qt::AscendingOrder) { void* fun = LObjects::overrideFun(unique, 73); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 73, args).toBool()) return; } QAbstractListModel::sort(x1, x2); }
    QSize span(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 74); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QSize>(callOverrideFun(fun, 74, args)); } return QAbstractListModel::span(x1); }
    Qt::DropActions supportedDropActions() const { void* fun = LObjects::overrideFun(unique, 75); if(fun) { return (Qt::DropActions)callOverrideFun(fun, 75, 0).toInt(); } return QAbstractListModel::supportedDropActions(); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QAbstractListModel::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QAbstractListModel::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QAbstractListModel::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QAbstractListModel::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QAbstractListModel::timerEvent(x1); }
};

class LAbstractPrintDialog : public QAbstractPrintDialog {
    Q_OBJECT
    friend class Q7;
public:
    LAbstractPrintDialog(uint u, QPrinter* x1, QWidget* x2 = 0) : QAbstractPrintDialog(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    int exec() { void* fun = LObjects::overrideFun(unique, 97); if(fun) { return callOverrideFun(fun, 97, 0).toInt(); } return 0; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QAbstractPrintDialog::minimumSizeHint(); }
    void setVisible(bool x1) { void* fun = LObjects::overrideFun(unique, 98); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 98, args).toBool()) return; } QAbstractPrintDialog::setVisible(x1); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QAbstractPrintDialog::sizeHint(); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QAbstractPrintDialog::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QAbstractPrintDialog::contextMenuEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QAbstractPrintDialog::keyPressEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QAbstractPrintDialog::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QAbstractPrintDialog::showEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QAbstractPrintDialog::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QAbstractPrintDialog::inputMethodQuery(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QAbstractPrintDialog::actionEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QAbstractPrintDialog::changeEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QAbstractPrintDialog::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QAbstractPrintDialog::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QAbstractPrintDialog::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QAbstractPrintDialog::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QAbstractPrintDialog::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QAbstractPrintDialog::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QAbstractPrintDialog::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QAbstractPrintDialog::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QAbstractPrintDialog::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QAbstractPrintDialog::inputMethodEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QAbstractPrintDialog::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QAbstractPrintDialog::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QAbstractPrintDialog::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QAbstractPrintDialog::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QAbstractPrintDialog::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QAbstractPrintDialog::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QAbstractPrintDialog::moveEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QAbstractPrintDialog::paintEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QAbstractPrintDialog::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QAbstractPrintDialog::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QAbstractPrintDialog::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QAbstractPrintDialog::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QAbstractPrintDialog::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QAbstractPrintDialog::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QAbstractPrintDialog::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QAbstractPrintDialog::timerEvent(x1); }
};

class LAbstractProxyModel : public QAbstractProxyModel {
    Q_OBJECT
    friend class Q8;
public:
    LAbstractProxyModel(uint u, QObject* x1 = 0) : QAbstractProxyModel(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QModelIndex mapFromSource(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 99); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 99, args)); } return QModelIndex(); }
    QItemSelection mapSelectionFromSource(const QItemSelection& x1) const { void* fun = LObjects::overrideFun(unique, 100); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QItemSelection>(callOverrideFun(fun, 100, args)); } return QAbstractProxyModel::mapSelectionFromSource(x1); }
    QItemSelection mapSelectionToSource(const QItemSelection& x1) const { void* fun = LObjects::overrideFun(unique, 101); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QItemSelection>(callOverrideFun(fun, 101, args)); } return QAbstractProxyModel::mapSelectionToSource(x1); }
    QModelIndex mapToSource(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 102); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 102, args)); } return QModelIndex(); }
    void setSourceModel(QAbstractItemModel* x1) { void* fun = LObjects::overrideFun(unique, 103); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 103, args).toBool()) return; } QAbstractProxyModel::setSourceModel(x1); }
    QVariant data(const QModelIndex& x1, int x2 = Qt::DisplayRole) const { void* fun = LObjects::overrideFun(unique, 55); if(fun) { const void* args[] = { &x1, &x2 }; return qVariantValue<QVariant>(callOverrideFun(fun, 55, args)); } return QAbstractProxyModel::data(x1, x2); }
    Qt::ItemFlags flags(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 58); if(fun) { const void* args[] = { &x1 }; return (Qt::ItemFlags)callOverrideFun(fun, 58, args).toInt(); } return QAbstractProxyModel::flags(x1); }
    QVariant headerData(int x1, Qt::Orientation x2, int x3) const { void* fun = LObjects::overrideFun(unique, 60); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QVariant>(callOverrideFun(fun, 60, args)); } return QAbstractProxyModel::headerData(x1, x2, x3); }
    void revert() { void* fun = LObjects::overrideFun(unique, 104); if(fun) { if(callOverrideFun(fun, 104, 0).toBool()) return; } QAbstractProxyModel::revert(); }
    bool setData(const QModelIndex& x1, const QVariant& x2, int x3 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 71); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 71, args).toBool(); } return QAbstractProxyModel::setData(x1, x2, x3); }
    bool setHeaderData(int x1, Qt::Orientation x2, const QVariant& x3, int x4 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 72); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return callOverrideFun(fun, 72, args).toBool(); } return QAbstractProxyModel::setHeaderData(x1, x2, x3, x4); }
    bool submit() { void* fun = LObjects::overrideFun(unique, 105); if(fun) { return callOverrideFun(fun, 105, 0).toBool(); } return QAbstractProxyModel::submit(); }
    QModelIndex buddy(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 52); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 52, args)); } return QAbstractProxyModel::buddy(x1); }
    bool canFetchMore(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 53); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 53, args).toBool(); } return QAbstractProxyModel::canFetchMore(x1); }
    int columnCount(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 54); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 54, args).toInt(); } return 0; }
    bool dropMimeData(const QMimeData* x1, Qt::DropAction x2, int x3, int x4, const QModelIndex& x5) { void* fun = LObjects::overrideFun(unique, 56); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; return callOverrideFun(fun, 56, args).toBool(); } return QAbstractProxyModel::dropMimeData(x1, x2, x3, x4, x5); }
    void fetchMore(const QModelIndex& x1) { void* fun = LObjects::overrideFun(unique, 57); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 57, args).toBool()) return; } QAbstractProxyModel::fetchMore(x1); }
    bool hasChildren(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 59); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 59, args).toBool(); } return QAbstractProxyModel::hasChildren(x1); }
    QModelIndex index(int x1, int x2, const QModelIndex& x3 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 61); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 61, args)); } return QModelIndex(); }
    bool insertColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 62); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 62, args).toBool(); } return QAbstractProxyModel::insertColumns(x1, x2, x3); }
    bool insertRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 63); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 63, args).toBool(); } return QAbstractProxyModel::insertRows(x1, x2, x3); }
    QModelIndexList match(const QModelIndex& x1, int x2, const QVariant& x3, int x4 = 1, Qt::MatchFlags x5 = Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap)) const { void* fun = LObjects::overrideFun(unique, 64); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; return qVariantValue<QModelIndexList>(callOverrideFun(fun, 64, args)); } return QAbstractProxyModel::match(x1, x2, x3, x4, x5); }
    QMimeData* mimeData(const QModelIndexList& x1) const { void* fun = LObjects::overrideFun(unique, 65); if(fun) { const void* args[] = { &x1 }; return (QMimeData*)qVariantValue<void*>(callOverrideFun(fun, 65, args)); } return QAbstractProxyModel::mimeData(x1); }
    QStringList mimeTypes() const { void* fun = LObjects::overrideFun(unique, 66); if(fun) { return qVariantValue<QStringList>(callOverrideFun(fun, 66, 0)); } return QAbstractProxyModel::mimeTypes(); }
    QModelIndex parent(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 67); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 67, args)); } return QModelIndex(); }
    bool removeColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 68); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 68, args).toBool(); } return QAbstractProxyModel::removeColumns(x1, x2, x3); }
    bool removeRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 69); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 69, args).toBool(); } return QAbstractProxyModel::removeRows(x1, x2, x3); }
    int rowCount(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 70); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 70, args).toInt(); } return 0; }
    void sort(int x1, Qt::SortOrder x2 = Qt::AscendingOrder) { void* fun = LObjects::overrideFun(unique, 73); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 73, args).toBool()) return; } QAbstractProxyModel::sort(x1, x2); }
    QSize span(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 74); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QSize>(callOverrideFun(fun, 74, args)); } return QAbstractProxyModel::span(x1); }
    Qt::DropActions supportedDropActions() const { void* fun = LObjects::overrideFun(unique, 75); if(fun) { return (Qt::DropActions)callOverrideFun(fun, 75, 0).toInt(); } return QAbstractProxyModel::supportedDropActions(); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QAbstractProxyModel::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QAbstractProxyModel::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QAbstractProxyModel::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QAbstractProxyModel::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QAbstractProxyModel::timerEvent(x1); }
};

class LAbstractScrollArea : public QAbstractScrollArea {
    Q_OBJECT
    friend class Q9;
public:
    LAbstractScrollArea(uint u, QWidget* x1 = 0) : QAbstractScrollArea(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void scrollContentsBy(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 96); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 96, args).toBool()) return; } QAbstractScrollArea::scrollContentsBy(x1, x2); }
    bool viewportEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 95); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 95, args).toBool(); } return QAbstractScrollArea::viewportEvent(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QAbstractScrollArea::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QAbstractScrollArea::sizeHint(); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QAbstractScrollArea::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QAbstractScrollArea::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QAbstractScrollArea::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QAbstractScrollArea::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QAbstractScrollArea::dropEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QAbstractScrollArea::keyPressEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QAbstractScrollArea::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QAbstractScrollArea::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QAbstractScrollArea::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QAbstractScrollArea::mouseReleaseEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QAbstractScrollArea::paintEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QAbstractScrollArea::resizeEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QAbstractScrollArea::wheelEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QAbstractScrollArea::changeEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QAbstractScrollArea::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QAbstractScrollArea::inputMethodQuery(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QAbstractScrollArea::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QAbstractScrollArea::closeEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QAbstractScrollArea::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QAbstractScrollArea::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QAbstractScrollArea::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QAbstractScrollArea::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QAbstractScrollArea::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QAbstractScrollArea::inputMethodEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QAbstractScrollArea::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QAbstractScrollArea::leaveEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QAbstractScrollArea::moveEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QAbstractScrollArea::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QAbstractScrollArea::tabletEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QAbstractScrollArea::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QAbstractScrollArea::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QAbstractScrollArea::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QAbstractScrollArea::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QAbstractScrollArea::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QAbstractScrollArea::timerEvent(x1); }
};

class LAbstractSlider : public QAbstractSlider {
    Q_OBJECT
    friend class Q10;
public:
    LAbstractSlider(uint u, QWidget* x1 = 0) : QAbstractSlider(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void sliderChange(SliderChange x1) { void* fun = LObjects::overrideFun(unique, 106); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 106, args).toBool()) return; } QAbstractSlider::sliderChange(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QAbstractSlider::changeEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QAbstractSlider::keyPressEvent(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QAbstractSlider::timerEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QAbstractSlider::wheelEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QAbstractSlider::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QAbstractSlider::inputMethodQuery(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QAbstractSlider::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QAbstractSlider::sizeHint(); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QAbstractSlider::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QAbstractSlider::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QAbstractSlider::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QAbstractSlider::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QAbstractSlider::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QAbstractSlider::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QAbstractSlider::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QAbstractSlider::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QAbstractSlider::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QAbstractSlider::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QAbstractSlider::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QAbstractSlider::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QAbstractSlider::inputMethodEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QAbstractSlider::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QAbstractSlider::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QAbstractSlider::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QAbstractSlider::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QAbstractSlider::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QAbstractSlider::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QAbstractSlider::moveEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QAbstractSlider::paintEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QAbstractSlider::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QAbstractSlider::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QAbstractSlider::tabletEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QAbstractSlider::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QAbstractSlider::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QAbstractSlider::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QAbstractSlider::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QAbstractSlider::disconnectNotify(x1); }
};

class LAbstractSpinBox : public QAbstractSpinBox {
    Q_OBJECT
    friend class Q11;
public:
    LAbstractSpinBox(uint u, QWidget* x1 = 0) : QAbstractSpinBox(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void fixup(QString& x1) const { void* fun = LObjects::overrideFun(unique, 107); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 107, args).toBool()) return; } QAbstractSpinBox::fixup(x1); }
    void stepBy(int x1) { void* fun = LObjects::overrideFun(unique, 108); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 108, args).toBool()) return; } QAbstractSpinBox::stepBy(x1); }
    QValidator::State validate(QString& x1, int& x2) const { void* fun = LObjects::overrideFun(unique, 109); if(fun) { const void* args[] = { &x1, &x2 }; return (QValidator::State)callOverrideFun(fun, 109, args).toInt(); } return QAbstractSpinBox::validate(x1, x2); }
    StepEnabled stepEnabled() const { void* fun = LObjects::overrideFun(unique, 110); if(fun) { return (StepEnabled)callOverrideFun(fun, 110, 0).toInt(); } return QAbstractSpinBox::stepEnabled(); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QAbstractSpinBox::inputMethodQuery(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QAbstractSpinBox::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QAbstractSpinBox::sizeHint(); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QAbstractSpinBox::changeEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QAbstractSpinBox::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QAbstractSpinBox::contextMenuEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QAbstractSpinBox::focusInEvent(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QAbstractSpinBox::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QAbstractSpinBox::hideEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QAbstractSpinBox::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QAbstractSpinBox::keyReleaseEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QAbstractSpinBox::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QAbstractSpinBox::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QAbstractSpinBox::mouseReleaseEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QAbstractSpinBox::paintEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QAbstractSpinBox::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QAbstractSpinBox::showEvent(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QAbstractSpinBox::timerEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QAbstractSpinBox::wheelEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QAbstractSpinBox::heightForWidth(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QAbstractSpinBox::actionEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QAbstractSpinBox::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QAbstractSpinBox::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QAbstractSpinBox::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QAbstractSpinBox::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QAbstractSpinBox::enterEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QAbstractSpinBox::focusNextPrevChild(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QAbstractSpinBox::inputMethodEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QAbstractSpinBox::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QAbstractSpinBox::mouseDoubleClickEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QAbstractSpinBox::moveEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QAbstractSpinBox::tabletEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QAbstractSpinBox::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QAbstractSpinBox::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QAbstractSpinBox::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QAbstractSpinBox::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QAbstractSpinBox::disconnectNotify(x1); }
};

class LAbstractState : public QAbstractState {
    Q_OBJECT
    friend class Q12;
public:
    LAbstractState(uint u, QState* x1 = 0) : QAbstractState(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void onEntry(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 111); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 111, args).toBool()) return; }}
    void onExit(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 112); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 112, args).toBool()) return; }}
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QAbstractState::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QAbstractState::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QAbstractState::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QAbstractState::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QAbstractState::timerEvent(x1); }
};

class LAbstractTextDocumentLayout : public QAbstractTextDocumentLayout {
    Q_OBJECT
    friend class Q14;
public:
    LAbstractTextDocumentLayout(uint u, QTextDocument* x1) : QAbstractTextDocumentLayout(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QRectF blockBoundingRect(const QTextBlock& x1) const { void* fun = LObjects::overrideFun(unique, 113); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QRectF>(callOverrideFun(fun, 113, args)); } return QRectF(); }
    QSizeF documentSize() const { void* fun = LObjects::overrideFun(unique, 114); if(fun) { return qVariantValue<QSizeF>(callOverrideFun(fun, 114, 0)); } return QSizeF(); }
    void draw(QPainter* x1, const PaintContext& x2) { void* fun = LObjects::overrideFun(unique, 115); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 115, args).toBool()) return; }}
    QRectF frameBoundingRect(QTextFrame* x1) const { void* fun = LObjects::overrideFun(unique, 116); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QRectF>(callOverrideFun(fun, 116, args)); } return QRectF(); }
    int hitTest(const QPointF& x1, Qt::HitTestAccuracy x2) const { void* fun = LObjects::overrideFun(unique, 117); if(fun) { const void* args[] = { &x1, &x2 }; return callOverrideFun(fun, 117, args).toInt(); } return 0; }
    int pageCount() const { void* fun = LObjects::overrideFun(unique, 118); if(fun) { return callOverrideFun(fun, 118, 0).toInt(); } return 0; }
    void documentChanged(int x1, int x2, int x3) { void* fun = LObjects::overrideFun(unique, 119); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 119, args).toBool()) return; }}
    void drawInlineObject(QPainter* x1, const QRectF& x2, QTextInlineObject x3, int x4, const QTextFormat& x5) { void* fun = LObjects::overrideFun(unique, 120); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; if(callOverrideFun(fun, 120, args).toBool()) return; } QAbstractTextDocumentLayout::drawInlineObject(x1, x2, x3, x4, x5); }
    void positionInlineObject(QTextInlineObject x1, int x2, const QTextFormat& x3) { void* fun = LObjects::overrideFun(unique, 121); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 121, args).toBool()) return; } QAbstractTextDocumentLayout::positionInlineObject(x1, x2, x3); }
    void resizeInlineObject(QTextInlineObject x1, int x2, const QTextFormat& x3) { void* fun = LObjects::overrideFun(unique, 122); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 122, args).toBool()) return; } QAbstractTextDocumentLayout::resizeInlineObject(x1, x2, x3); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QAbstractTextDocumentLayout::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QAbstractTextDocumentLayout::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QAbstractTextDocumentLayout::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QAbstractTextDocumentLayout::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QAbstractTextDocumentLayout::timerEvent(x1); }
};

class LAbstractTransition : public QAbstractTransition {
    Q_OBJECT
    friend class Q15;
public:
    LAbstractTransition(uint u, QState* x1 = 0) : QAbstractTransition(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool eventTest(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 123); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 123, args).toBool(); } return false; }
    void onTransition(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 124); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 124, args).toBool()) return; }}
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QAbstractTransition::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QAbstractTransition::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QAbstractTransition::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QAbstractTransition::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QAbstractTransition::timerEvent(x1); }
};

class LAction : public QAction {
    Q_OBJECT
    friend class Q16;
public:
    LAction(uint u, QObject* x1) : QAction(x1), unique(u) {}
    LAction(uint u, const QString& x1, QObject* x2) : QAction(x1, x2), unique(u) {}
    LAction(uint u, const QIcon& x1, const QString& x2, QObject* x3) : QAction(x1, x2, x3), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QAction::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QAction::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QAction::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QAction::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QAction::timerEvent(x1); }
};

class LActionGroup : public QActionGroup {
    Q_OBJECT
    friend class Q17;
public:
    LActionGroup(uint u, QObject* x1) : QActionGroup(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QActionGroup::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QActionGroup::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QActionGroup::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QActionGroup::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QActionGroup::timerEvent(x1); }
};

class LAnimationGroup : public QAnimationGroup {
    Q_OBJECT
    friend class Q18;
public:
    LAnimationGroup(uint u, QObject* x1 = 0) : QAnimationGroup(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    int duration() const { void* fun = LObjects::overrideFun(unique, 1); if(fun) { return callOverrideFun(fun, 1, 0).toInt(); } return 0; }
    void updateCurrentTime(int x1) { void* fun = LObjects::overrideFun(unique, 2); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 2, args).toBool()) return; }}
    void updateDirection(QAbstractAnimation::Direction x1) { void* fun = LObjects::overrideFun(unique, 3); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 3, args).toBool()) return; } QAnimationGroup::updateDirection(x1); }
    void updateState(QAbstractAnimation::State x1, QAbstractAnimation::State x2) { void* fun = LObjects::overrideFun(unique, 4); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 4, args).toBool()) return; } QAnimationGroup::updateState(x1, x2); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QAnimationGroup::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QAnimationGroup::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QAnimationGroup::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QAnimationGroup::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QAnimationGroup::timerEvent(x1); }
};

class LApplication : public QApplication {
    Q_OBJECT
    friend class Q19;
public:

    static NumList overrideIds;
    uint unique;

    void commitData(QSessionManager& x1) { void* fun = LObjects::overrideFun(unique, 125); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 125, args).toBool()) return; } QApplication::commitData(x1); }
    void saveState(QSessionManager& x1) { void* fun = LObjects::overrideFun(unique, 126); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 126, args).toBool()) return; } QApplication::saveState(x1); }
    bool notify(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 127); if(fun) { const void* args[] = { &x1, &x2 }; return callOverrideFun(fun, 127, args).toBool(); } return QApplication::notify(x1, x2); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QApplication::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QApplication::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QApplication::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QApplication::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QApplication::timerEvent(x1); }
};

class LBoxLayout : public QBoxLayout {
    Q_OBJECT
    friend class Q20;
public:
    LBoxLayout(uint u, Direction x1, QWidget* x2 = 0) : QBoxLayout(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void addItem(QLayoutItem* x1) { void* fun = LObjects::overrideFun(unique, 128); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 128, args).toBool()) return; } QBoxLayout::addItem(x1); }
    int count() const { void* fun = LObjects::overrideFun(unique, 129); if(fun) { return callOverrideFun(fun, 129, 0).toInt(); } return QBoxLayout::count(); }
    Qt::Orientations expandingDirections() const { void* fun = LObjects::overrideFun(unique, 130); if(fun) { return (Qt::Orientations)callOverrideFun(fun, 130, 0).toInt(); } return QBoxLayout::expandingDirections(); }
    bool hasHeightForWidth() const { void* fun = LObjects::overrideFun(unique, 131); if(fun) { return callOverrideFun(fun, 131, 0).toBool(); } return QBoxLayout::hasHeightForWidth(); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QBoxLayout::heightForWidth(x1); }
    void invalidate() { void* fun = LObjects::overrideFun(unique, 132); if(fun) { if(callOverrideFun(fun, 132, 0).toBool()) return; } QBoxLayout::invalidate(); }
    QLayoutItem* itemAt(int x1) const { void* fun = LObjects::overrideFun(unique, 133); if(fun) { const void* args[] = { &x1 }; return (QLayoutItem*)qVariantValue<void*>(callOverrideFun(fun, 133, args)); } return QBoxLayout::itemAt(x1); }
    QSize maximumSize() const { void* fun = LObjects::overrideFun(unique, 134); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 134, 0)); } return QBoxLayout::maximumSize(); }
    int minimumHeightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 135); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 135, args).toInt(); } return QBoxLayout::minimumHeightForWidth(x1); }
    QSize minimumSize() const { void* fun = LObjects::overrideFun(unique, 136); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 136, 0)); } return QBoxLayout::minimumSize(); }
    void setGeometry(const QRect& x1) { void* fun = LObjects::overrideFun(unique, 137); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 137, args).toBool()) return; } QBoxLayout::setGeometry(x1); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QBoxLayout::sizeHint(); }
    QLayoutItem* takeAt(int x1) { void* fun = LObjects::overrideFun(unique, 138); if(fun) { const void* args[] = { &x1 }; return (QLayoutItem*)qVariantValue<void*>(callOverrideFun(fun, 138, args)); } return QBoxLayout::takeAt(x1); }
    int indexOf(QWidget* x1) const { void* fun = LObjects::overrideFun(unique, 139); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 139, args).toInt(); } return QBoxLayout::indexOf(x1); }
    QRect geometry() const { void* fun = LObjects::overrideFun(unique, 140); if(fun) { return qVariantValue<QRect>(callOverrideFun(fun, 140, 0)); } return QBoxLayout::geometry(); }
    bool isEmpty() const { void* fun = LObjects::overrideFun(unique, 141); if(fun) { return callOverrideFun(fun, 141, 0).toBool(); } return QBoxLayout::isEmpty(); }
    QLayout* layout() { void* fun = LObjects::overrideFun(unique, 142); if(fun) { return (QLayout*)qVariantValue<void*>(callOverrideFun(fun, 142, 0)); } return QBoxLayout::layout(); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QBoxLayout::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QBoxLayout::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QBoxLayout::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QBoxLayout::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QBoxLayout::timerEvent(x1); }
};

class LBuffer : public QBuffer {
    Q_OBJECT
    friend class Q21;
public:
    LBuffer(uint u, QObject* x1 = 0) : QBuffer(x1), unique(u) {}
    LBuffer(uint u, QByteArray* x1, QObject* x2 = 0) : QBuffer(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool atEnd() const { void* fun = LObjects::overrideFun(unique, 143); if(fun) { return callOverrideFun(fun, 143, 0).toBool(); } return QBuffer::atEnd(); }
    bool canReadLine() const { void* fun = LObjects::overrideFun(unique, 144); if(fun) { return callOverrideFun(fun, 144, 0).toBool(); } return QBuffer::canReadLine(); }
    void close() { void* fun = LObjects::overrideFun(unique, 145); if(fun) { if(callOverrideFun(fun, 145, 0).toBool()) return; } QBuffer::close(); }
    bool open(OpenMode x1) { void* fun = LObjects::overrideFun(unique, 146); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 146, args).toBool(); } return QBuffer::open(x1); }
    bool isSequential() const { void* fun = LObjects::overrideFun(unique, 147); if(fun) { return callOverrideFun(fun, 147, 0).toBool(); } return QBuffer::isSequential(); }
    bool reset() { void* fun = LObjects::overrideFun(unique, 148); if(fun) { return callOverrideFun(fun, 148, 0).toBool(); } return QBuffer::reset(); }
    bool waitForBytesWritten(int x1) { void* fun = LObjects::overrideFun(unique, 149); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 149, args).toBool(); } return QBuffer::waitForBytesWritten(x1); }
    bool waitForReadyRead(int x1) { void* fun = LObjects::overrideFun(unique, 150); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 150, args).toBool(); } return QBuffer::waitForReadyRead(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QBuffer::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QBuffer::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QBuffer::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QBuffer::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QBuffer::timerEvent(x1); }
};

class LButtonGroup : public QButtonGroup {
    Q_OBJECT
    friend class Q22;
public:
    LButtonGroup(uint u, QObject* x1 = 0) : QButtonGroup(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QButtonGroup::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QButtonGroup::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QButtonGroup::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QButtonGroup::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QButtonGroup::timerEvent(x1); }
};

class LCDEStyle : public QCDEStyle {
    Q_OBJECT
    friend class Q23;
public:
    LCDEStyle(uint u, bool x1 = false) : QCDEStyle(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void drawControl(ControlElement x1, const QStyleOption* x2, QPainter* x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 151); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; if(callOverrideFun(fun, 151, args).toBool()) return; } QCDEStyle::drawControl(x1, x2, x3, x4); }
    void drawPrimitive(PrimitiveElement x1, const QStyleOption* x2, QPainter* x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 152); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; if(callOverrideFun(fun, 152, args).toBool()) return; } QCDEStyle::drawPrimitive(x1, x2, x3, x4); }
    int pixelMetric(PixelMetric x1, const QStyleOption* x2 = 0, const QWidget* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 153); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 153, args).toInt(); } return QCDEStyle::pixelMetric(x1, x2, x3); }
    QPalette standardPalette() const { void* fun = LObjects::overrideFun(unique, 154); if(fun) { return qVariantValue<QPalette>(callOverrideFun(fun, 154, 0)); } return QCDEStyle::standardPalette(); }
    void drawComplexControl(ComplexControl x1, const QStyleOptionComplex* x2, QPainter* x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 155); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; if(callOverrideFun(fun, 155, args).toBool()) return; } QCDEStyle::drawComplexControl(x1, x2, x3, x4); }
    void polish(QPalette& x1) { void* fun = LObjects::overrideFun(unique, 156); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 156, args).toBool()) return; } QCDEStyle::polish(x1); }
    QSize sizeFromContents(ContentsType x1, const QStyleOption* x2, const QSize& x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 157); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return qVariantValue<QSize>(callOverrideFun(fun, 157, args)); } return QCDEStyle::sizeFromContents(x1, x2, x3, x4); }
    QPixmap standardPixmap(StandardPixmap x1, const QStyleOption* x2, const QWidget* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 158); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QPixmap>(callOverrideFun(fun, 158, args)); } return QCDEStyle::standardPixmap(x1, x2, x3); }
    int styleHint(StyleHint x1, const QStyleOption* x2 = 0, const QWidget* x3 = 0, QStyleHintReturn* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 159); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return callOverrideFun(fun, 159, args).toInt(); } return QCDEStyle::styleHint(x1, x2, x3, x4); }
    QRect subControlRect(ComplexControl x1, const QStyleOptionComplex* x2, SubControl x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 160); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return qVariantValue<QRect>(callOverrideFun(fun, 160, args)); } return QCDEStyle::subControlRect(x1, x2, x3, x4); }
    QRect subElementRect(SubElement x1, const QStyleOption* x2, const QWidget* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 161); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QRect>(callOverrideFun(fun, 161, args)); } return QCDEStyle::subElementRect(x1, x2, x3); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QCDEStyle::timerEvent(x1); }
    QPixmap generatedIconPixmap(QIcon::Mode x1, const QPixmap& x2, const QStyleOption* x3) const { void* fun = LObjects::overrideFun(unique, 162); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QPixmap>(callOverrideFun(fun, 162, args)); } return QCDEStyle::generatedIconPixmap(x1, x2, x3); }
    SubControl hitTestComplexControl(ComplexControl x1, const QStyleOptionComplex* x2, const QPoint& x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 163); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return (SubControl)callOverrideFun(fun, 163, args).toInt(); } return QCDEStyle::hitTestComplexControl(x1, x2, x3, x4); }
    void unpolish(QWidget* x1) { void* fun = LObjects::overrideFun(unique, 166); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 166, args).toBool()) return; } QCDEStyle::unpolish(x1); }
    void drawItemPixmap(QPainter* x1, const QRect& x2, int x3, const QPixmap& x4) const { void* fun = LObjects::overrideFun(unique, 168); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; if(callOverrideFun(fun, 168, args).toBool()) return; } QCDEStyle::drawItemPixmap(x1, x2, x3, x4); }
    void drawItemText(QPainter* x1, const QRect& x2, int x3, const QPalette& x4, bool x5, const QString& x6, QPalette::ColorRole x7 = QPalette::NoRole) const { void* fun = LObjects::overrideFun(unique, 169); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5, &x6, &x7 }; if(callOverrideFun(fun, 169, args).toBool()) return; } QCDEStyle::drawItemText(x1, x2, x3, x4, x5, x6, x7); }
    QRect itemPixmapRect(const QRect& x1, int x2, const QPixmap& x3) const { void* fun = LObjects::overrideFun(unique, 170); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QRect>(callOverrideFun(fun, 170, args)); } return QCDEStyle::itemPixmapRect(x1, x2, x3); }
    QRect itemTextRect(const QFontMetrics& x1, const QRect& x2, int x3, bool x4, const QString& x5) const { void* fun = LObjects::overrideFun(unique, 171); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; return qVariantValue<QRect>(callOverrideFun(fun, 171, args)); } return QCDEStyle::itemTextRect(x1, x2, x3, x4, x5); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QCDEStyle::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QCDEStyle::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QCDEStyle::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QCDEStyle::disconnectNotify(x1); }
};

class LCalendarWidget : public QCalendarWidget {
    Q_OBJECT
    friend class Q24;
public:
    LCalendarWidget(uint u, QWidget* x1 = 0) : QCalendarWidget(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void paintCell(QPainter* x1, const QRect& x2, const QDate& x3) const { void* fun = LObjects::overrideFun(unique, 172); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 172, args).toBool()) return; } QCalendarWidget::paintCell(x1, x2, x3); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QCalendarWidget::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QCalendarWidget::sizeHint(); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QCalendarWidget::keyPressEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QCalendarWidget::mousePressEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QCalendarWidget::resizeEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QCalendarWidget::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QCalendarWidget::inputMethodQuery(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QCalendarWidget::actionEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QCalendarWidget::changeEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QCalendarWidget::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QCalendarWidget::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QCalendarWidget::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QCalendarWidget::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QCalendarWidget::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QCalendarWidget::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QCalendarWidget::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QCalendarWidget::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QCalendarWidget::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QCalendarWidget::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QCalendarWidget::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QCalendarWidget::inputMethodEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QCalendarWidget::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QCalendarWidget::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QCalendarWidget::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QCalendarWidget::mouseMoveEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QCalendarWidget::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QCalendarWidget::moveEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QCalendarWidget::paintEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QCalendarWidget::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QCalendarWidget::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QCalendarWidget::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QCalendarWidget::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QCalendarWidget::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QCalendarWidget::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QCalendarWidget::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QCalendarWidget::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QCalendarWidget::timerEvent(x1); }
};

class LCheckBox : public QCheckBox {
    Q_OBJECT
    friend class Q25;
public:
    LCheckBox(uint u, QWidget* x1 = 0) : QCheckBox(x1), unique(u) {}
    LCheckBox(uint u, const QString& x1, QWidget* x2 = 0) : QCheckBox(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QCheckBox::sizeHint(); }
    void checkStateSet() { void* fun = LObjects::overrideFun(unique, 10); if(fun) { if(callOverrideFun(fun, 10, 0).toBool()) return; } QCheckBox::checkStateSet(); }
    bool hitButton(const QPoint& x1) const { void* fun = LObjects::overrideFun(unique, 11); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 11, args).toBool(); } return QCheckBox::hitButton(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QCheckBox::mouseMoveEvent(x1); }
    void nextCheckState() { void* fun = LObjects::overrideFun(unique, 12); if(fun) { if(callOverrideFun(fun, 12, 0).toBool()) return; } QCheckBox::nextCheckState(); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QCheckBox::paintEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QCheckBox::changeEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QCheckBox::focusInEvent(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QCheckBox::focusOutEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QCheckBox::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QCheckBox::keyReleaseEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QCheckBox::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QCheckBox::mouseReleaseEvent(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QCheckBox::timerEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QCheckBox::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QCheckBox::inputMethodQuery(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QCheckBox::minimumSizeHint(); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QCheckBox::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QCheckBox::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QCheckBox::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QCheckBox::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QCheckBox::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QCheckBox::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QCheckBox::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QCheckBox::enterEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QCheckBox::focusNextPrevChild(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QCheckBox::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QCheckBox::inputMethodEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QCheckBox::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QCheckBox::mouseDoubleClickEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QCheckBox::moveEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QCheckBox::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QCheckBox::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QCheckBox::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QCheckBox::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QCheckBox::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QCheckBox::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QCheckBox::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QCheckBox::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QCheckBox::disconnectNotify(x1); }
};

class LCleanlooksStyle : public QCleanlooksStyle {
    Q_OBJECT
    friend class Q26;
public:
    LCleanlooksStyle(uint u) : unique(u) {}

    static NumList overrideIds;
    uint unique;

    void drawComplexControl(ComplexControl x1, const QStyleOptionComplex* x2, QPainter* x3, const QWidget* x4) const { void* fun = LObjects::overrideFun(unique, 155); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; if(callOverrideFun(fun, 155, args).toBool()) return; } QCleanlooksStyle::drawComplexControl(x1, x2, x3, x4); }
    void drawControl(ControlElement x1, const QStyleOption* x2, QPainter* x3, const QWidget* x4) const { void* fun = LObjects::overrideFun(unique, 151); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; if(callOverrideFun(fun, 151, args).toBool()) return; } QCleanlooksStyle::drawControl(x1, x2, x3, x4); }
    void drawItemPixmap(QPainter* x1, const QRect& x2, int x3, const QPixmap& x4) const { void* fun = LObjects::overrideFun(unique, 168); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; if(callOverrideFun(fun, 168, args).toBool()) return; } QCleanlooksStyle::drawItemPixmap(x1, x2, x3, x4); }
    void drawItemText(QPainter* x1, const QRect& x2, int x3, const QPalette& x4, bool x5, const QString& x6, QPalette::ColorRole x7 = QPalette::NoRole) const { void* fun = LObjects::overrideFun(unique, 169); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5, &x6, &x7 }; if(callOverrideFun(fun, 169, args).toBool()) return; } QCleanlooksStyle::drawItemText(x1, x2, x3, x4, x5, x6, x7); }
    void drawPrimitive(PrimitiveElement x1, const QStyleOption* x2, QPainter* x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 152); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; if(callOverrideFun(fun, 152, args).toBool()) return; } QCleanlooksStyle::drawPrimitive(x1, x2, x3, x4); }
    QPixmap generatedIconPixmap(QIcon::Mode x1, const QPixmap& x2, const QStyleOption* x3) const { void* fun = LObjects::overrideFun(unique, 162); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QPixmap>(callOverrideFun(fun, 162, args)); } return QCleanlooksStyle::generatedIconPixmap(x1, x2, x3); }
    SubControl hitTestComplexControl(ComplexControl x1, const QStyleOptionComplex* x2, const QPoint& x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 163); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return (SubControl)callOverrideFun(fun, 163, args).toInt(); } return QCleanlooksStyle::hitTestComplexControl(x1, x2, x3, x4); }
    QRect itemPixmapRect(const QRect& x1, int x2, const QPixmap& x3) const { void* fun = LObjects::overrideFun(unique, 170); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QRect>(callOverrideFun(fun, 170, args)); } return QCleanlooksStyle::itemPixmapRect(x1, x2, x3); }
    int pixelMetric(PixelMetric x1, const QStyleOption* x2 = 0, const QWidget* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 153); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 153, args).toInt(); } return QCleanlooksStyle::pixelMetric(x1, x2, x3); }
    void polish(QWidget* x1) { void* fun = LObjects::overrideFun(unique, 165); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 165, args).toBool()) return; } QCleanlooksStyle::polish(x1); }
    QSize sizeFromContents(ContentsType x1, const QStyleOption* x2, const QSize& x3, const QWidget* x4) const { void* fun = LObjects::overrideFun(unique, 157); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return qVariantValue<QSize>(callOverrideFun(fun, 157, args)); } return QCleanlooksStyle::sizeFromContents(x1, x2, x3, x4); }
    QPalette standardPalette() const { void* fun = LObjects::overrideFun(unique, 154); if(fun) { return qVariantValue<QPalette>(callOverrideFun(fun, 154, 0)); } return QCleanlooksStyle::standardPalette(); }
    QPixmap standardPixmap(StandardPixmap x1, const QStyleOption* x2, const QWidget* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 158); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QPixmap>(callOverrideFun(fun, 158, args)); } return QCleanlooksStyle::standardPixmap(x1, x2, x3); }
    int styleHint(StyleHint x1, const QStyleOption* x2 = 0, const QWidget* x3 = 0, QStyleHintReturn* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 159); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return callOverrideFun(fun, 159, args).toInt(); } return QCleanlooksStyle::styleHint(x1, x2, x3, x4); }
    QRect subControlRect(ComplexControl x1, const QStyleOptionComplex* x2, SubControl x3, const QWidget* x4) const { void* fun = LObjects::overrideFun(unique, 160); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return qVariantValue<QRect>(callOverrideFun(fun, 160, args)); } return QCleanlooksStyle::subControlRect(x1, x2, x3, x4); }
    QRect subElementRect(SubElement x1, const QStyleOption* x2, const QWidget* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 161); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QRect>(callOverrideFun(fun, 161, args)); } return QCleanlooksStyle::subElementRect(x1, x2, x3); }
    void unpolish(QWidget* x1) { void* fun = LObjects::overrideFun(unique, 166); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 166, args).toBool()) return; } QCleanlooksStyle::unpolish(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QCleanlooksStyle::timerEvent(x1); }
    QRect itemTextRect(const QFontMetrics& x1, const QRect& x2, int x3, bool x4, const QString& x5) const { void* fun = LObjects::overrideFun(unique, 171); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; return qVariantValue<QRect>(callOverrideFun(fun, 171, args)); } return QCleanlooksStyle::itemTextRect(x1, x2, x3, x4, x5); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QCleanlooksStyle::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QCleanlooksStyle::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QCleanlooksStyle::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QCleanlooksStyle::disconnectNotify(x1); }
};

class LColorDialog : public QColorDialog {
    Q_OBJECT
    friend class Q28;
public:
    LColorDialog(uint u, QWidget* x1 = 0) : QColorDialog(x1), unique(u) {}
    LColorDialog(uint u, const QColor& x1, QWidget* x2 = 0) : QColorDialog(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void setVisible(bool x1) { void* fun = LObjects::overrideFun(unique, 98); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 98, args).toBool()) return; } QColorDialog::setVisible(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QColorDialog::changeEvent(x1); }
    void done(int x1) { void* fun = LObjects::overrideFun(unique, 173); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 173, args).toBool()) return; } QColorDialog::done(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QColorDialog::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QColorDialog::sizeHint(); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QColorDialog::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QColorDialog::contextMenuEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QColorDialog::keyPressEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QColorDialog::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QColorDialog::showEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QColorDialog::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QColorDialog::inputMethodQuery(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QColorDialog::actionEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QColorDialog::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QColorDialog::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QColorDialog::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QColorDialog::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QColorDialog::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QColorDialog::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QColorDialog::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QColorDialog::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QColorDialog::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QColorDialog::inputMethodEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QColorDialog::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QColorDialog::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QColorDialog::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QColorDialog::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QColorDialog::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QColorDialog::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QColorDialog::moveEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QColorDialog::paintEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QColorDialog::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QColorDialog::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QColorDialog::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QColorDialog::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QColorDialog::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QColorDialog::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QColorDialog::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QColorDialog::timerEvent(x1); }
};

class LColumnView : public QColumnView {
    Q_OBJECT
    friend class Q29;
public:
    LColumnView(uint u, QWidget* x1 = 0) : QColumnView(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QAbstractItemView* createColumn(const QModelIndex& x1) { void* fun = LObjects::overrideFun(unique, 174); if(fun) { const void* args[] = { &x1 }; return (QAbstractItemView*)qVariantValue<void*>(callOverrideFun(fun, 174, args)); } return QColumnView::createColumn(x1); }
    QModelIndex indexAt(const QPoint& x1) const { void* fun = LObjects::overrideFun(unique, 76); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 76, args)); } return QColumnView::indexAt(x1); }
    void scrollTo(const QModelIndex& x1, ScrollHint x2 = EnsureVisible) { void* fun = LObjects::overrideFun(unique, 78); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 78, args).toBool()) return; } QColumnView::scrollTo(x1, x2); }
    void selectAll() { void* fun = LObjects::overrideFun(unique, 175); if(fun) { if(callOverrideFun(fun, 175, 0).toBool()) return; } QColumnView::selectAll(); }
    void setModel(QAbstractItemModel* x1) { void* fun = LObjects::overrideFun(unique, 79); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 79, args).toBool()) return; } QColumnView::setModel(x1); }
    void setRootIndex(const QModelIndex& x1) { void* fun = LObjects::overrideFun(unique, 176); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 176, args).toBool()) return; } QColumnView::setRootIndex(x1); }
    void setSelectionModel(QItemSelectionModel* x1) { void* fun = LObjects::overrideFun(unique, 80); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 80, args).toBool()) return; } QColumnView::setSelectionModel(x1); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QColumnView::sizeHint(); }
    QRect visualRect(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 83); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QRect>(callOverrideFun(fun, 83, args)); } return QColumnView::visualRect(x1); }
    void currentChanged(const QModelIndex& x1, const QModelIndex& x2) { void* fun = LObjects::overrideFun(unique, 177); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 177, args).toBool()) return; } QColumnView::currentChanged(x1, x2); }
    int horizontalOffset() const { void* fun = LObjects::overrideFun(unique, 85); if(fun) { return callOverrideFun(fun, 85, 0).toInt(); } return QColumnView::horizontalOffset(); }
    bool isIndexHidden(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 86); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 86, args).toBool(); } return QColumnView::isIndexHidden(x1); }
    QModelIndex moveCursor(CursorAction x1, Qt::KeyboardModifiers x2) { void* fun = LObjects::overrideFun(unique, 87); if(fun) { const void* args[] = { &x1, &x2 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 87, args)); } return QColumnView::moveCursor(x1, x2); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QColumnView::resizeEvent(x1); }
    void rowsInserted(const QModelIndex& x1, int x2, int x3) { void* fun = LObjects::overrideFun(unique, 178); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 178, args).toBool()) return; } QColumnView::rowsInserted(x1, x2, x3); }
    void scrollContentsBy(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 96); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 96, args).toBool()) return; } QColumnView::scrollContentsBy(x1, x2); }
    void setSelection(const QRect& x1, QItemSelectionModel::SelectionFlags x2) { void* fun = LObjects::overrideFun(unique, 90); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 90, args).toBool()) return; } QColumnView::setSelection(x1, x2); }
    int verticalOffset() const { void* fun = LObjects::overrideFun(unique, 92); if(fun) { return callOverrideFun(fun, 92, 0).toInt(); } return QColumnView::verticalOffset(); }
    QRegion visualRegionForSelection(const QItemSelection& x1) const { void* fun = LObjects::overrideFun(unique, 94); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QRegion>(callOverrideFun(fun, 94, args)); } return QColumnView::visualRegionForSelection(x1); }
    void keyboardSearch(const QString& x1) { void* fun = LObjects::overrideFun(unique, 77); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 77, args).toBool()) return; } QColumnView::keyboardSearch(x1); }
    int sizeHintForColumn(int x1) const { void* fun = LObjects::overrideFun(unique, 81); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 81, args).toInt(); } return QColumnView::sizeHintForColumn(x1); }
    int sizeHintForRow(int x1) const { void* fun = LObjects::overrideFun(unique, 82); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 82, args).toInt(); } return QColumnView::sizeHintForRow(x1); }
    bool edit(const QModelIndex& x1, EditTrigger x2, QEvent* x3) { void* fun = LObjects::overrideFun(unique, 84); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 84, args).toBool(); } return QColumnView::edit(x1, x2, x3); }
    QModelIndexList selectedIndexes() const { void* fun = LObjects::overrideFun(unique, 88); if(fun) { return qVariantValue<QModelIndexList>(callOverrideFun(fun, 88, 0)); } return QColumnView::selectedIndexes(); }
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex& x1, const QEvent* x2 = 0) const { void* fun = LObjects::overrideFun(unique, 89); if(fun) { const void* args[] = { &x1, &x2 }; return (QItemSelectionModel::SelectionFlags)callOverrideFun(fun, 89, args).toInt(); } return QColumnView::selectionCommand(x1, x2); }
    void startDrag(Qt::DropActions x1) { void* fun = LObjects::overrideFun(unique, 91); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 91, args).toBool()) return; } QColumnView::startDrag(x1); }
    QStyleOptionViewItem viewOptions() const { void* fun = LObjects::overrideFun(unique, 93); if(fun) { return qVariantValue<QStyleOptionViewItem>(callOverrideFun(fun, 93, 0)); } return QColumnView::viewOptions(); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QColumnView::inputMethodQuery(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QColumnView::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QColumnView::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QColumnView::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QColumnView::dropEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QColumnView::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QColumnView::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QColumnView::focusOutEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QColumnView::inputMethodEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QColumnView::keyPressEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QColumnView::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QColumnView::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QColumnView::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QColumnView::mouseReleaseEvent(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QColumnView::timerEvent(x1); }
    bool viewportEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 95); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 95, args).toBool(); } return QColumnView::viewportEvent(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QColumnView::minimumSizeHint(); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QColumnView::contextMenuEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QColumnView::paintEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QColumnView::wheelEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QColumnView::changeEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QColumnView::heightForWidth(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QColumnView::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QColumnView::closeEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QColumnView::enterEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QColumnView::hideEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QColumnView::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QColumnView::leaveEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QColumnView::moveEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QColumnView::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QColumnView::tabletEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QColumnView::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QColumnView::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QColumnView::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QColumnView::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QColumnView::disconnectNotify(x1); }
};

class LComboBox : public QComboBox {
    Q_OBJECT
    friend class Q30;
public:
    LComboBox(uint u, QWidget* x1 = 0) : QComboBox(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void hidePopup() { void* fun = LObjects::overrideFun(unique, 179); if(fun) { if(callOverrideFun(fun, 179, 0).toBool()) return; } QComboBox::hidePopup(); }
    void showPopup() { void* fun = LObjects::overrideFun(unique, 180); if(fun) { if(callOverrideFun(fun, 180, 0).toBool()) return; } QComboBox::showPopup(); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QComboBox::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QComboBox::sizeHint(); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QComboBox::changeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QComboBox::contextMenuEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QComboBox::focusInEvent(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QComboBox::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QComboBox::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QComboBox::inputMethodEvent(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QComboBox::inputMethodQuery(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QComboBox::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QComboBox::keyReleaseEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QComboBox::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QComboBox::mouseReleaseEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QComboBox::paintEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QComboBox::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QComboBox::showEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QComboBox::wheelEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QComboBox::heightForWidth(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QComboBox::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QComboBox::closeEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QComboBox::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QComboBox::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QComboBox::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QComboBox::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QComboBox::enterEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QComboBox::focusNextPrevChild(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QComboBox::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QComboBox::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QComboBox::mouseMoveEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QComboBox::moveEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QComboBox::tabletEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QComboBox::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QComboBox::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QComboBox::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QComboBox::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QComboBox::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QComboBox::timerEvent(x1); }
};

class LCommandLinkButton : public QCommandLinkButton {
    Q_OBJECT
    friend class Q31;
public:
    LCommandLinkButton(uint u, QWidget* x1 = 0) : QCommandLinkButton(x1), unique(u) {}
    LCommandLinkButton(uint u, const QString& x1, QWidget* x2 = 0) : QCommandLinkButton(x1, x2), unique(u) {}
    LCommandLinkButton(uint u, const QString& x1, const QString& x2, QWidget* x3 = 0) : QCommandLinkButton(x1, x2, x3), unique(u) {}

    static NumList overrideIds;
    uint unique;

    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QCommandLinkButton::heightForWidth(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QCommandLinkButton::minimumSizeHint(); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QCommandLinkButton::paintEvent(x1); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QCommandLinkButton::sizeHint(); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QCommandLinkButton::focusInEvent(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QCommandLinkButton::focusOutEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QCommandLinkButton::keyPressEvent(x1); }
    void checkStateSet() { void* fun = LObjects::overrideFun(unique, 10); if(fun) { if(callOverrideFun(fun, 10, 0).toBool()) return; } QCommandLinkButton::checkStateSet(); }
    bool hitButton(const QPoint& x1) const { void* fun = LObjects::overrideFun(unique, 11); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 11, args).toBool(); } return QCommandLinkButton::hitButton(x1); }
    void nextCheckState() { void* fun = LObjects::overrideFun(unique, 12); if(fun) { if(callOverrideFun(fun, 12, 0).toBool()) return; } QCommandLinkButton::nextCheckState(); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QCommandLinkButton::changeEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QCommandLinkButton::keyReleaseEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QCommandLinkButton::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QCommandLinkButton::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QCommandLinkButton::mouseReleaseEvent(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QCommandLinkButton::timerEvent(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QCommandLinkButton::inputMethodQuery(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QCommandLinkButton::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QCommandLinkButton::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QCommandLinkButton::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QCommandLinkButton::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QCommandLinkButton::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QCommandLinkButton::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QCommandLinkButton::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QCommandLinkButton::enterEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QCommandLinkButton::focusNextPrevChild(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QCommandLinkButton::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QCommandLinkButton::inputMethodEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QCommandLinkButton::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QCommandLinkButton::mouseDoubleClickEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QCommandLinkButton::moveEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QCommandLinkButton::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QCommandLinkButton::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QCommandLinkButton::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QCommandLinkButton::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QCommandLinkButton::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QCommandLinkButton::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QCommandLinkButton::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QCommandLinkButton::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QCommandLinkButton::disconnectNotify(x1); }
};

class LCommonStyle : public QCommonStyle {
    Q_OBJECT
    friend class Q32;
public:
    LCommonStyle(uint u) : unique(u) {}

    static NumList overrideIds;
    uint unique;

    void drawComplexControl(ComplexControl x1, const QStyleOptionComplex* x2, QPainter* x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 155); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; if(callOverrideFun(fun, 155, args).toBool()) return; } QCommonStyle::drawComplexControl(x1, x2, x3, x4); }
    void drawControl(ControlElement x1, const QStyleOption* x2, QPainter* x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 151); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; if(callOverrideFun(fun, 151, args).toBool()) return; } QCommonStyle::drawControl(x1, x2, x3, x4); }
    void drawPrimitive(PrimitiveElement x1, const QStyleOption* x2, QPainter* x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 152); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; if(callOverrideFun(fun, 152, args).toBool()) return; } QCommonStyle::drawPrimitive(x1, x2, x3, x4); }
    QPixmap generatedIconPixmap(QIcon::Mode x1, const QPixmap& x2, const QStyleOption* x3) const { void* fun = LObjects::overrideFun(unique, 162); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QPixmap>(callOverrideFun(fun, 162, args)); } return QCommonStyle::generatedIconPixmap(x1, x2, x3); }
    SubControl hitTestComplexControl(ComplexControl x1, const QStyleOptionComplex* x2, const QPoint& x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 163); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return (SubControl)callOverrideFun(fun, 163, args).toInt(); } return QCommonStyle::hitTestComplexControl(x1, x2, x3, x4); }
    int pixelMetric(PixelMetric x1, const QStyleOption* x2 = 0, const QWidget* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 153); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 153, args).toInt(); } return QCommonStyle::pixelMetric(x1, x2, x3); }
    void polish(QPalette& x1) { void* fun = LObjects::overrideFun(unique, 156); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 156, args).toBool()) return; } QCommonStyle::polish(x1); }
    QSize sizeFromContents(ContentsType x1, const QStyleOption* x2, const QSize& x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 157); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return qVariantValue<QSize>(callOverrideFun(fun, 157, args)); } return QCommonStyle::sizeFromContents(x1, x2, x3, x4); }
    QPixmap standardPixmap(StandardPixmap x1, const QStyleOption* x2 = 0, const QWidget* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 158); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QPixmap>(callOverrideFun(fun, 158, args)); } return QCommonStyle::standardPixmap(x1, x2, x3); }
    int styleHint(StyleHint x1, const QStyleOption* x2 = 0, const QWidget* x3 = 0, QStyleHintReturn* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 159); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return callOverrideFun(fun, 159, args).toInt(); } return QCommonStyle::styleHint(x1, x2, x3, x4); }
    QRect subControlRect(ComplexControl x1, const QStyleOptionComplex* x2, SubControl x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 160); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return qVariantValue<QRect>(callOverrideFun(fun, 160, args)); } return QCommonStyle::subControlRect(x1, x2, x3, x4); }
    QRect subElementRect(SubElement x1, const QStyleOption* x2, const QWidget* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 161); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QRect>(callOverrideFun(fun, 161, args)); } return QCommonStyle::subElementRect(x1, x2, x3); }
    void unpolish(QWidget* x1) { void* fun = LObjects::overrideFun(unique, 166); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 166, args).toBool()) return; } QCommonStyle::unpolish(x1); }
    void drawItemPixmap(QPainter* x1, const QRect& x2, int x3, const QPixmap& x4) const { void* fun = LObjects::overrideFun(unique, 168); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; if(callOverrideFun(fun, 168, args).toBool()) return; } QCommonStyle::drawItemPixmap(x1, x2, x3, x4); }
    void drawItemText(QPainter* x1, const QRect& x2, int x3, const QPalette& x4, bool x5, const QString& x6, QPalette::ColorRole x7 = QPalette::NoRole) const { void* fun = LObjects::overrideFun(unique, 169); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5, &x6, &x7 }; if(callOverrideFun(fun, 169, args).toBool()) return; } QCommonStyle::drawItemText(x1, x2, x3, x4, x5, x6, x7); }
    QRect itemPixmapRect(const QRect& x1, int x2, const QPixmap& x3) const { void* fun = LObjects::overrideFun(unique, 170); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QRect>(callOverrideFun(fun, 170, args)); } return QCommonStyle::itemPixmapRect(x1, x2, x3); }
    QRect itemTextRect(const QFontMetrics& x1, const QRect& x2, int x3, bool x4, const QString& x5) const { void* fun = LObjects::overrideFun(unique, 171); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; return qVariantValue<QRect>(callOverrideFun(fun, 171, args)); } return QCommonStyle::itemTextRect(x1, x2, x3, x4, x5); }
    QPalette standardPalette() const { void* fun = LObjects::overrideFun(unique, 154); if(fun) { return qVariantValue<QPalette>(callOverrideFun(fun, 154, 0)); } return QCommonStyle::standardPalette(); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QCommonStyle::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QCommonStyle::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QCommonStyle::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QCommonStyle::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QCommonStyle::timerEvent(x1); }
};

class LCompleter : public QCompleter {
    Q_OBJECT
    friend class Q33;
public:
    LCompleter(uint u, QObject* x1 = 0) : QCompleter(x1), unique(u) {}
    LCompleter(uint u, QAbstractItemModel* x1, QObject* x2 = 0) : QCompleter(x1, x2), unique(u) {}
    LCompleter(uint u, const QStringList& x1, QObject* x2 = 0) : QCompleter(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QString pathFromIndex(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 181); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QString>(callOverrideFun(fun, 181, args)); } return QCompleter::pathFromIndex(x1); }
    QStringList splitPath(const QString& x1) const { void* fun = LObjects::overrideFun(unique, 182); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QStringList>(callOverrideFun(fun, 182, args)); } return QCompleter::splitPath(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QCompleter::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QCompleter::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QCompleter::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QCompleter::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QCompleter::timerEvent(x1); }
};

class LCoreApplication : public QCoreApplication {
    Q_OBJECT
    friend class Q34;
public:

    static NumList overrideIds;
    uint unique;

    bool notify(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 127); if(fun) { const void* args[] = { &x1, &x2 }; return callOverrideFun(fun, 127, args).toBool(); } return QCoreApplication::notify(x1, x2); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QCoreApplication::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QCoreApplication::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QCoreApplication::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QCoreApplication::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QCoreApplication::timerEvent(x1); }
};

class LDataWidgetMapper : public QDataWidgetMapper {
    Q_OBJECT
    friend class Q35;
public:
    LDataWidgetMapper(uint u, QObject* x1 = 0) : QDataWidgetMapper(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QDataWidgetMapper::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QDataWidgetMapper::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QDataWidgetMapper::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QDataWidgetMapper::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QDataWidgetMapper::timerEvent(x1); }
};

class LDateEdit : public QDateEdit {
    Q_OBJECT
    friend class Q36;
public:
    LDateEdit(uint u, QWidget* x1 = 0) : QDateEdit(x1), unique(u) {}
    LDateEdit(uint u, const QDate& x1, QWidget* x2 = 0) : QDateEdit(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QDateTime dateTimeFromText(const QString& x1) const { void* fun = LObjects::overrideFun(unique, 183); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QDateTime>(callOverrideFun(fun, 183, args)); } return QDateEdit::dateTimeFromText(x1); }
    QString textFromDateTime(const QDateTime& x1) const { void* fun = LObjects::overrideFun(unique, 184); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QString>(callOverrideFun(fun, 184, args)); } return QDateEdit::textFromDateTime(x1); }
    void clear() { void* fun = LObjects::overrideFun(unique, 185); if(fun) { if(callOverrideFun(fun, 185, 0).toBool()) return; } QDateEdit::clear(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QDateEdit::sizeHint(); }
    void stepBy(int x1) { void* fun = LObjects::overrideFun(unique, 108); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 108, args).toBool()) return; } QDateEdit::stepBy(x1); }
    void fixup(QString& x1) const { void* fun = LObjects::overrideFun(unique, 107); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 107, args).toBool()) return; } QDateEdit::fixup(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QDateEdit::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QDateEdit::focusNextPrevChild(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QDateEdit::keyPressEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QDateEdit::mousePressEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QDateEdit::paintEvent(x1); }
    StepEnabled stepEnabled() const { void* fun = LObjects::overrideFun(unique, 110); if(fun) { return (StepEnabled)callOverrideFun(fun, 110, 0).toInt(); } return QDateEdit::stepEnabled(); }
    QValidator::State validate(QString& x1, int& x2) const { void* fun = LObjects::overrideFun(unique, 109); if(fun) { const void* args[] = { &x1, &x2 }; return (QValidator::State)callOverrideFun(fun, 109, args).toInt(); } return QDateEdit::validate(x1, x2); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QDateEdit::wheelEvent(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QDateEdit::inputMethodQuery(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QDateEdit::minimumSizeHint(); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QDateEdit::changeEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QDateEdit::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QDateEdit::contextMenuEvent(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QDateEdit::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QDateEdit::hideEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QDateEdit::keyReleaseEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QDateEdit::mouseMoveEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QDateEdit::mouseReleaseEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QDateEdit::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QDateEdit::showEvent(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QDateEdit::timerEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QDateEdit::heightForWidth(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QDateEdit::actionEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QDateEdit::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QDateEdit::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QDateEdit::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QDateEdit::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QDateEdit::enterEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QDateEdit::inputMethodEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QDateEdit::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QDateEdit::mouseDoubleClickEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QDateEdit::moveEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QDateEdit::tabletEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QDateEdit::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QDateEdit::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QDateEdit::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QDateEdit::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QDateEdit::disconnectNotify(x1); }
};

class LDateTimeEdit : public QDateTimeEdit {
    Q_OBJECT
    friend class Q37;
public:
    LDateTimeEdit(uint u, QWidget* x1 = 0) : QDateTimeEdit(x1), unique(u) {}
    LDateTimeEdit(uint u, const QDateTime& x1, QWidget* x2 = 0) : QDateTimeEdit(x1, x2), unique(u) {}
    LDateTimeEdit(uint u, const QDate& x1, QWidget* x2 = 0) : QDateTimeEdit(x1, x2), unique(u) {}
    LDateTimeEdit(uint u, const QTime& x1, QWidget* x2 = 0) : QDateTimeEdit(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QDateTime dateTimeFromText(const QString& x1) const { void* fun = LObjects::overrideFun(unique, 183); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QDateTime>(callOverrideFun(fun, 183, args)); } return QDateTimeEdit::dateTimeFromText(x1); }
    QString textFromDateTime(const QDateTime& x1) const { void* fun = LObjects::overrideFun(unique, 184); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QString>(callOverrideFun(fun, 184, args)); } return QDateTimeEdit::textFromDateTime(x1); }
    void clear() { void* fun = LObjects::overrideFun(unique, 185); if(fun) { if(callOverrideFun(fun, 185, 0).toBool()) return; } QDateTimeEdit::clear(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QDateTimeEdit::sizeHint(); }
    void stepBy(int x1) { void* fun = LObjects::overrideFun(unique, 108); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 108, args).toBool()) return; } QDateTimeEdit::stepBy(x1); }
    void fixup(QString& x1) const { void* fun = LObjects::overrideFun(unique, 107); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 107, args).toBool()) return; } QDateTimeEdit::fixup(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QDateTimeEdit::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QDateTimeEdit::focusNextPrevChild(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QDateTimeEdit::keyPressEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QDateTimeEdit::mousePressEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QDateTimeEdit::paintEvent(x1); }
    StepEnabled stepEnabled() const { void* fun = LObjects::overrideFun(unique, 110); if(fun) { return (StepEnabled)callOverrideFun(fun, 110, 0).toInt(); } return QDateTimeEdit::stepEnabled(); }
    QValidator::State validate(QString& x1, int& x2) const { void* fun = LObjects::overrideFun(unique, 109); if(fun) { const void* args[] = { &x1, &x2 }; return (QValidator::State)callOverrideFun(fun, 109, args).toInt(); } return QDateTimeEdit::validate(x1, x2); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QDateTimeEdit::wheelEvent(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QDateTimeEdit::inputMethodQuery(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QDateTimeEdit::minimumSizeHint(); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QDateTimeEdit::changeEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QDateTimeEdit::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QDateTimeEdit::contextMenuEvent(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QDateTimeEdit::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QDateTimeEdit::hideEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QDateTimeEdit::keyReleaseEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QDateTimeEdit::mouseMoveEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QDateTimeEdit::mouseReleaseEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QDateTimeEdit::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QDateTimeEdit::showEvent(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QDateTimeEdit::timerEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QDateTimeEdit::heightForWidth(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QDateTimeEdit::actionEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QDateTimeEdit::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QDateTimeEdit::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QDateTimeEdit::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QDateTimeEdit::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QDateTimeEdit::enterEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QDateTimeEdit::inputMethodEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QDateTimeEdit::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QDateTimeEdit::mouseDoubleClickEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QDateTimeEdit::moveEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QDateTimeEdit::tabletEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QDateTimeEdit::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QDateTimeEdit::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QDateTimeEdit::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QDateTimeEdit::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QDateTimeEdit::disconnectNotify(x1); }
};

class LDesktopWidget : public QDesktopWidget {
    Q_OBJECT
    friend class Q38;
public:

    static NumList overrideIds;
    uint unique;

    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QDesktopWidget::resizeEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QDesktopWidget::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QDesktopWidget::inputMethodQuery(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QDesktopWidget::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QDesktopWidget::sizeHint(); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QDesktopWidget::actionEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QDesktopWidget::changeEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QDesktopWidget::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QDesktopWidget::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QDesktopWidget::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QDesktopWidget::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QDesktopWidget::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QDesktopWidget::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QDesktopWidget::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QDesktopWidget::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QDesktopWidget::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QDesktopWidget::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QDesktopWidget::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QDesktopWidget::inputMethodEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QDesktopWidget::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QDesktopWidget::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QDesktopWidget::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QDesktopWidget::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QDesktopWidget::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QDesktopWidget::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QDesktopWidget::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QDesktopWidget::moveEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QDesktopWidget::paintEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QDesktopWidget::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QDesktopWidget::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QDesktopWidget::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QDesktopWidget::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QDesktopWidget::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QDesktopWidget::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QDesktopWidget::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QDesktopWidget::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QDesktopWidget::timerEvent(x1); }
};

class LDial : public QDial {
    Q_OBJECT
    friend class Q39;
public:
    LDial(uint u, QWidget* x1 = 0) : QDial(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QDial::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QDial::sizeHint(); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QDial::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QDial::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QDial::mouseReleaseEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QDial::paintEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QDial::resizeEvent(x1); }
    void sliderChange(SliderChange x1) { void* fun = LObjects::overrideFun(unique, 106); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 106, args).toBool()) return; } QDial::sliderChange(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QDial::changeEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QDial::keyPressEvent(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QDial::timerEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QDial::wheelEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QDial::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QDial::inputMethodQuery(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QDial::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QDial::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QDial::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QDial::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QDial::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QDial::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QDial::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QDial::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QDial::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QDial::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QDial::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QDial::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QDial::inputMethodEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QDial::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QDial::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QDial::mouseDoubleClickEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QDial::moveEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QDial::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QDial::tabletEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QDial::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QDial::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QDial::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QDial::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QDial::disconnectNotify(x1); }
};

class LDialog : public QDialog {
    Q_OBJECT
    friend class Q40;
public:
    LDialog(uint u, QWidget* x1 = 0, Qt::WindowFlags x2 = 0) : QDialog(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QDialog::minimumSizeHint(); }
    void setVisible(bool x1) { void* fun = LObjects::overrideFun(unique, 98); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 98, args).toBool()) return; } QDialog::setVisible(x1); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QDialog::sizeHint(); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QDialog::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QDialog::contextMenuEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QDialog::keyPressEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QDialog::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QDialog::showEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QDialog::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QDialog::inputMethodQuery(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QDialog::actionEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QDialog::changeEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QDialog::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QDialog::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QDialog::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QDialog::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QDialog::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QDialog::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QDialog::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QDialog::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QDialog::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QDialog::inputMethodEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QDialog::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QDialog::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QDialog::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QDialog::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QDialog::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QDialog::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QDialog::moveEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QDialog::paintEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QDialog::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QDialog::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QDialog::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QDialog::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QDialog::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QDialog::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QDialog::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QDialog::timerEvent(x1); }
};

class LDialogButtonBox : public QDialogButtonBox {
    Q_OBJECT
    friend class Q41;
public:
    LDialogButtonBox(uint u, QWidget* x1 = 0) : QDialogButtonBox(x1), unique(u) {}
    LDialogButtonBox(uint u, Qt::Orientation x1, QWidget* x2 = 0) : QDialogButtonBox(x1, x2), unique(u) {}
    LDialogButtonBox(uint u, StandardButtons x1, Qt::Orientation x2 = Qt::Horizontal, QWidget* x3 = 0) : QDialogButtonBox(x1, x2, x3), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QDialogButtonBox::changeEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QDialogButtonBox::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QDialogButtonBox::inputMethodQuery(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QDialogButtonBox::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QDialogButtonBox::sizeHint(); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QDialogButtonBox::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QDialogButtonBox::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QDialogButtonBox::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QDialogButtonBox::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QDialogButtonBox::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QDialogButtonBox::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QDialogButtonBox::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QDialogButtonBox::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QDialogButtonBox::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QDialogButtonBox::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QDialogButtonBox::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QDialogButtonBox::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QDialogButtonBox::inputMethodEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QDialogButtonBox::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QDialogButtonBox::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QDialogButtonBox::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QDialogButtonBox::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QDialogButtonBox::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QDialogButtonBox::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QDialogButtonBox::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QDialogButtonBox::moveEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QDialogButtonBox::paintEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QDialogButtonBox::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QDialogButtonBox::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QDialogButtonBox::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QDialogButtonBox::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QDialogButtonBox::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QDialogButtonBox::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QDialogButtonBox::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QDialogButtonBox::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QDialogButtonBox::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QDialogButtonBox::timerEvent(x1); }
};

class LDirModel : public QDirModel {
    Q_OBJECT
    friend class Q42;
public:
    LDirModel(uint u, const QStringList& x1, QDir::Filters x2, QDir::SortFlags x3, QObject* x4 = 0) : QDirModel(x1, x2, x3, x4), unique(u) {}
    LDirModel(uint u, QObject* x1 = 0) : QDirModel(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    int columnCount(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 54); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 54, args).toInt(); } return QDirModel::columnCount(x1); }
    QVariant data(const QModelIndex& x1, int x2 = Qt::DisplayRole) const { void* fun = LObjects::overrideFun(unique, 55); if(fun) { const void* args[] = { &x1, &x2 }; return qVariantValue<QVariant>(callOverrideFun(fun, 55, args)); } return QDirModel::data(x1, x2); }
    bool dropMimeData(const QMimeData* x1, Qt::DropAction x2, int x3, int x4, const QModelIndex& x5) { void* fun = LObjects::overrideFun(unique, 56); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; return callOverrideFun(fun, 56, args).toBool(); } return QDirModel::dropMimeData(x1, x2, x3, x4, x5); }
    Qt::ItemFlags flags(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 58); if(fun) { const void* args[] = { &x1 }; return (Qt::ItemFlags)callOverrideFun(fun, 58, args).toInt(); } return QDirModel::flags(x1); }
    bool hasChildren(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 59); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 59, args).toBool(); } return QDirModel::hasChildren(x1); }
    QVariant headerData(int x1, Qt::Orientation x2, int x3 = Qt::DisplayRole) const { void* fun = LObjects::overrideFun(unique, 60); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QVariant>(callOverrideFun(fun, 60, args)); } return QDirModel::headerData(x1, x2, x3); }
    QModelIndex index(int x1, int x2, const QModelIndex& x3 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 61); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 61, args)); } return QDirModel::index(x1, x2, x3); }
    QMimeData* mimeData(const QModelIndexList& x1) const { void* fun = LObjects::overrideFun(unique, 65); if(fun) { const void* args[] = { &x1 }; return (QMimeData*)qVariantValue<void*>(callOverrideFun(fun, 65, args)); } return QDirModel::mimeData(x1); }
    QStringList mimeTypes() const { void* fun = LObjects::overrideFun(unique, 66); if(fun) { return qVariantValue<QStringList>(callOverrideFun(fun, 66, 0)); } return QDirModel::mimeTypes(); }
    QModelIndex parent(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 67); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 67, args)); } return QDirModel::parent(x1); }
    int rowCount(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 70); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 70, args).toInt(); } return QDirModel::rowCount(x1); }
    bool setData(const QModelIndex& x1, const QVariant& x2, int x3 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 71); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 71, args).toBool(); } return QDirModel::setData(x1, x2, x3); }
    void sort(int x1, Qt::SortOrder x2 = Qt::AscendingOrder) { void* fun = LObjects::overrideFun(unique, 73); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 73, args).toBool()) return; } QDirModel::sort(x1, x2); }
    Qt::DropActions supportedDropActions() const { void* fun = LObjects::overrideFun(unique, 75); if(fun) { return (Qt::DropActions)callOverrideFun(fun, 75, 0).toInt(); } return QDirModel::supportedDropActions(); }
    QModelIndex buddy(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 52); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 52, args)); } return QDirModel::buddy(x1); }
    bool canFetchMore(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 53); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 53, args).toBool(); } return QDirModel::canFetchMore(x1); }
    void fetchMore(const QModelIndex& x1) { void* fun = LObjects::overrideFun(unique, 57); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 57, args).toBool()) return; } QDirModel::fetchMore(x1); }
    bool insertColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 62); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 62, args).toBool(); } return QDirModel::insertColumns(x1, x2, x3); }
    bool insertRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 63); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 63, args).toBool(); } return QDirModel::insertRows(x1, x2, x3); }
    QModelIndexList match(const QModelIndex& x1, int x2, const QVariant& x3, int x4 = 1, Qt::MatchFlags x5 = Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap)) const { void* fun = LObjects::overrideFun(unique, 64); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; return qVariantValue<QModelIndexList>(callOverrideFun(fun, 64, args)); } return QDirModel::match(x1, x2, x3, x4, x5); }
    bool removeColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 68); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 68, args).toBool(); } return QDirModel::removeColumns(x1, x2, x3); }
    bool removeRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 69); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 69, args).toBool(); } return QDirModel::removeRows(x1, x2, x3); }
    bool setHeaderData(int x1, Qt::Orientation x2, const QVariant& x3, int x4 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 72); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return callOverrideFun(fun, 72, args).toBool(); } return QDirModel::setHeaderData(x1, x2, x3, x4); }
    QSize span(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 74); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QSize>(callOverrideFun(fun, 74, args)); } return QDirModel::span(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QDirModel::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QDirModel::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QDirModel::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QDirModel::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QDirModel::timerEvent(x1); }
};

class LDockWidget : public QDockWidget {
    Q_OBJECT
    friend class Q43;
public:
    LDockWidget(uint u, const QString& x1, QWidget* x2 = 0, Qt::WindowFlags x3 = 0) : QDockWidget(x1, x2, x3), unique(u) {}
    LDockWidget(uint u, QWidget* x1 = 0, Qt::WindowFlags x2 = 0) : QDockWidget(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QDockWidget::changeEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QDockWidget::closeEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QDockWidget::paintEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QDockWidget::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QDockWidget::inputMethodQuery(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QDockWidget::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QDockWidget::sizeHint(); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QDockWidget::actionEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QDockWidget::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QDockWidget::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QDockWidget::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QDockWidget::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QDockWidget::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QDockWidget::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QDockWidget::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QDockWidget::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QDockWidget::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QDockWidget::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QDockWidget::inputMethodEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QDockWidget::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QDockWidget::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QDockWidget::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QDockWidget::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QDockWidget::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QDockWidget::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QDockWidget::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QDockWidget::moveEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QDockWidget::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QDockWidget::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QDockWidget::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QDockWidget::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QDockWidget::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QDockWidget::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QDockWidget::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QDockWidget::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QDockWidget::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QDockWidget::timerEvent(x1); }
};

class LDoubleSpinBox : public QDoubleSpinBox {
    Q_OBJECT
    friend class Q44;
public:
    LDoubleSpinBox(uint u, QWidget* x1 = 0) : QDoubleSpinBox(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QString textFromValue(double x1) const { void* fun = LObjects::overrideFun(unique, 186); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QString>(callOverrideFun(fun, 186, args)); } return QDoubleSpinBox::textFromValue(x1); }
    double valueFromText(const QString& x1) const { void* fun = LObjects::overrideFun(unique, 187); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 187, args).toDouble(); } return QDoubleSpinBox::valueFromText(x1); }
    void fixup(QString& x1) const { void* fun = LObjects::overrideFun(unique, 107); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 107, args).toBool()) return; } QDoubleSpinBox::fixup(x1); }
    QValidator::State validate(QString& x1, int& x2) const { void* fun = LObjects::overrideFun(unique, 109); if(fun) { const void* args[] = { &x1, &x2 }; return (QValidator::State)callOverrideFun(fun, 109, args).toInt(); } return QDoubleSpinBox::validate(x1, x2); }
    void stepBy(int x1) { void* fun = LObjects::overrideFun(unique, 108); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 108, args).toBool()) return; } QDoubleSpinBox::stepBy(x1); }
    StepEnabled stepEnabled() const { void* fun = LObjects::overrideFun(unique, 110); if(fun) { return (StepEnabled)callOverrideFun(fun, 110, 0).toInt(); } return QDoubleSpinBox::stepEnabled(); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QDoubleSpinBox::inputMethodQuery(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QDoubleSpinBox::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QDoubleSpinBox::sizeHint(); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QDoubleSpinBox::changeEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QDoubleSpinBox::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QDoubleSpinBox::contextMenuEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QDoubleSpinBox::focusInEvent(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QDoubleSpinBox::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QDoubleSpinBox::hideEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QDoubleSpinBox::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QDoubleSpinBox::keyReleaseEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QDoubleSpinBox::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QDoubleSpinBox::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QDoubleSpinBox::mouseReleaseEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QDoubleSpinBox::paintEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QDoubleSpinBox::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QDoubleSpinBox::showEvent(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QDoubleSpinBox::timerEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QDoubleSpinBox::wheelEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QDoubleSpinBox::heightForWidth(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QDoubleSpinBox::actionEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QDoubleSpinBox::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QDoubleSpinBox::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QDoubleSpinBox::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QDoubleSpinBox::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QDoubleSpinBox::enterEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QDoubleSpinBox::focusNextPrevChild(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QDoubleSpinBox::inputMethodEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QDoubleSpinBox::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QDoubleSpinBox::mouseDoubleClickEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QDoubleSpinBox::moveEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QDoubleSpinBox::tabletEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QDoubleSpinBox::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QDoubleSpinBox::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QDoubleSpinBox::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QDoubleSpinBox::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QDoubleSpinBox::disconnectNotify(x1); }
};

class LDoubleValidator : public QDoubleValidator {
    Q_OBJECT
    friend class Q45;
public:
    LDoubleValidator(uint u, QObject* x1) : QDoubleValidator(x1), unique(u) {}
    LDoubleValidator(uint u, double x1, double x2, int x3, QObject* x4) : QDoubleValidator(x1, x2, x3, x4), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void setRange(double x1, double x2, int x3 = 0) { void* fun = LObjects::overrideFun(unique, 188); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 188, args).toBool()) return; } QDoubleValidator::setRange(x1, x2, x3); }
    QValidator::State validate(QString& x1, int& x2) const { void* fun = LObjects::overrideFun(unique, 109); if(fun) { const void* args[] = { &x1, &x2 }; return (QValidator::State)callOverrideFun(fun, 109, args).toInt(); } return QDoubleValidator::validate(x1, x2); }
    void fixup(QString& x1) const { void* fun = LObjects::overrideFun(unique, 107); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 107, args).toBool()) return; } QDoubleValidator::fixup(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QDoubleValidator::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QDoubleValidator::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QDoubleValidator::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QDoubleValidator::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QDoubleValidator::timerEvent(x1); }
};

class LDrag : public QDrag {
    Q_OBJECT
    friend class Q46;
public:
    LDrag(uint u, QWidget* x1) : QDrag(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QDrag::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QDrag::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QDrag::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QDrag::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QDrag::timerEvent(x1); }
};

class LErrorMessage : public QErrorMessage {
    Q_OBJECT
    friend class Q47;
public:
    LErrorMessage(uint u, QWidget* x1 = 0) : QErrorMessage(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QErrorMessage::changeEvent(x1); }
    void done(int x1) { void* fun = LObjects::overrideFun(unique, 173); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 173, args).toBool()) return; } QErrorMessage::done(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QErrorMessage::minimumSizeHint(); }
    void setVisible(bool x1) { void* fun = LObjects::overrideFun(unique, 98); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 98, args).toBool()) return; } QErrorMessage::setVisible(x1); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QErrorMessage::sizeHint(); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QErrorMessage::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QErrorMessage::contextMenuEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QErrorMessage::keyPressEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QErrorMessage::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QErrorMessage::showEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QErrorMessage::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QErrorMessage::inputMethodQuery(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QErrorMessage::actionEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QErrorMessage::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QErrorMessage::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QErrorMessage::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QErrorMessage::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QErrorMessage::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QErrorMessage::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QErrorMessage::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QErrorMessage::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QErrorMessage::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QErrorMessage::inputMethodEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QErrorMessage::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QErrorMessage::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QErrorMessage::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QErrorMessage::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QErrorMessage::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QErrorMessage::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QErrorMessage::moveEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QErrorMessage::paintEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QErrorMessage::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QErrorMessage::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QErrorMessage::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QErrorMessage::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QErrorMessage::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QErrorMessage::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QErrorMessage::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QErrorMessage::timerEvent(x1); }
};

class LEventLoop : public QEventLoop {
    Q_OBJECT
    friend class Q48;
public:
    LEventLoop(uint u, QObject* x1 = 0) : QEventLoop(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QEventLoop::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QEventLoop::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QEventLoop::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QEventLoop::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QEventLoop::timerEvent(x1); }
};

class LEventTransition : public QEventTransition {
    Q_OBJECT
    friend class Q49;
public:
    LEventTransition(uint u, QState* x1 = 0) : QEventTransition(x1), unique(u) {}
    LEventTransition(uint u, QObject* x1, QEvent::Type x2, QState* x3 = 0) : QEventTransition(x1, x2, x3), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool eventTest(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 123); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 123, args).toBool(); } return QEventTransition::eventTest(x1); }
    void onTransition(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 124); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 124, args).toBool()) return; } QEventTransition::onTransition(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QEventTransition::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QEventTransition::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QEventTransition::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QEventTransition::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QEventTransition::timerEvent(x1); }
};

class LFile : public QFile {
    Q_OBJECT
    friend class Q50;
public:
    LFile(uint u, const QString& x1) : QFile(x1), unique(u) {}
    LFile(uint u, QObject* x1) : QFile(x1), unique(u) {}
    LFile(uint u, const QString& x1, QObject* x2) : QFile(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool atEnd() const { void* fun = LObjects::overrideFun(unique, 143); if(fun) { return callOverrideFun(fun, 143, 0).toBool(); } return QFile::atEnd(); }
    void close() { void* fun = LObjects::overrideFun(unique, 145); if(fun) { if(callOverrideFun(fun, 145, 0).toBool()) return; } QFile::close(); }
    bool isSequential() const { void* fun = LObjects::overrideFun(unique, 147); if(fun) { return callOverrideFun(fun, 147, 0).toBool(); } return QFile::isSequential(); }
    bool open(OpenMode x1) { void* fun = LObjects::overrideFun(unique, 146); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 146, args).toBool(); } return QFile::open(x1); }
    bool canReadLine() const { void* fun = LObjects::overrideFun(unique, 144); if(fun) { return callOverrideFun(fun, 144, 0).toBool(); } return QFile::canReadLine(); }
    bool reset() { void* fun = LObjects::overrideFun(unique, 148); if(fun) { return callOverrideFun(fun, 148, 0).toBool(); } return QFile::reset(); }
    bool waitForBytesWritten(int x1) { void* fun = LObjects::overrideFun(unique, 149); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 149, args).toBool(); } return QFile::waitForBytesWritten(x1); }
    bool waitForReadyRead(int x1) { void* fun = LObjects::overrideFun(unique, 150); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 150, args).toBool(); } return QFile::waitForReadyRead(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QFile::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QFile::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QFile::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QFile::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QFile::timerEvent(x1); }
};

class LFileDialog : public QFileDialog {
    Q_OBJECT
    friend class Q51;
public:
    LFileDialog(uint u, QWidget* x1, Qt::WindowFlags x2) : QFileDialog(x1, x2), unique(u) {}
    LFileDialog(uint u, QWidget* x1 = 0, const QString& x2 = QString(), const QString& x3 = QString(), const QString& x4 = QString()) : QFileDialog(x1, x2, x3, x4), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void setVisible(bool x1) { void* fun = LObjects::overrideFun(unique, 98); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 98, args).toBool()) return; } QFileDialog::setVisible(x1); }
    void accept() { void* fun = LObjects::overrideFun(unique, 189); if(fun) { if(callOverrideFun(fun, 189, 0).toBool()) return; } QFileDialog::accept(); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QFileDialog::changeEvent(x1); }
    void done(int x1) { void* fun = LObjects::overrideFun(unique, 173); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 173, args).toBool()) return; } QFileDialog::done(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QFileDialog::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QFileDialog::sizeHint(); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QFileDialog::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QFileDialog::contextMenuEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QFileDialog::keyPressEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QFileDialog::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QFileDialog::showEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QFileDialog::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QFileDialog::inputMethodQuery(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QFileDialog::actionEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QFileDialog::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QFileDialog::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QFileDialog::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QFileDialog::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QFileDialog::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QFileDialog::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QFileDialog::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QFileDialog::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QFileDialog::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QFileDialog::inputMethodEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QFileDialog::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QFileDialog::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QFileDialog::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QFileDialog::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QFileDialog::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QFileDialog::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QFileDialog::moveEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QFileDialog::paintEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QFileDialog::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QFileDialog::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QFileDialog::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QFileDialog::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QFileDialog::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QFileDialog::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QFileDialog::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QFileDialog::timerEvent(x1); }
};

class LFileSystemModel : public QFileSystemModel {
    Q_OBJECT
    friend class Q52;
public:
    LFileSystemModel(uint u, QObject* x1 = 0) : QFileSystemModel(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool canFetchMore(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 53); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 53, args).toBool(); } return QFileSystemModel::canFetchMore(x1); }
    int columnCount(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 54); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 54, args).toInt(); } return QFileSystemModel::columnCount(x1); }
    QVariant data(const QModelIndex& x1, int x2 = Qt::DisplayRole) const { void* fun = LObjects::overrideFun(unique, 55); if(fun) { const void* args[] = { &x1, &x2 }; return qVariantValue<QVariant>(callOverrideFun(fun, 55, args)); } return QFileSystemModel::data(x1, x2); }
    bool dropMimeData(const QMimeData* x1, Qt::DropAction x2, int x3, int x4, const QModelIndex& x5) { void* fun = LObjects::overrideFun(unique, 56); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; return callOverrideFun(fun, 56, args).toBool(); } return QFileSystemModel::dropMimeData(x1, x2, x3, x4, x5); }
    void fetchMore(const QModelIndex& x1) { void* fun = LObjects::overrideFun(unique, 57); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 57, args).toBool()) return; } QFileSystemModel::fetchMore(x1); }
    Qt::ItemFlags flags(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 58); if(fun) { const void* args[] = { &x1 }; return (Qt::ItemFlags)callOverrideFun(fun, 58, args).toInt(); } return QFileSystemModel::flags(x1); }
    bool hasChildren(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 59); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 59, args).toBool(); } return QFileSystemModel::hasChildren(x1); }
    QVariant headerData(int x1, Qt::Orientation x2, int x3 = Qt::DisplayRole) const { void* fun = LObjects::overrideFun(unique, 60); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QVariant>(callOverrideFun(fun, 60, args)); } return QFileSystemModel::headerData(x1, x2, x3); }
    QModelIndex index(int x1, int x2, const QModelIndex& x3 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 61); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 61, args)); } return QFileSystemModel::index(x1, x2, x3); }
    QMimeData* mimeData(const QModelIndexList& x1) const { void* fun = LObjects::overrideFun(unique, 65); if(fun) { const void* args[] = { &x1 }; return (QMimeData*)qVariantValue<void*>(callOverrideFun(fun, 65, args)); } return QFileSystemModel::mimeData(x1); }
    QStringList mimeTypes() const { void* fun = LObjects::overrideFun(unique, 66); if(fun) { return qVariantValue<QStringList>(callOverrideFun(fun, 66, 0)); } return QFileSystemModel::mimeTypes(); }
    QModelIndex parent(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 67); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 67, args)); } return QFileSystemModel::parent(x1); }
    int rowCount(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 70); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 70, args).toInt(); } return QFileSystemModel::rowCount(x1); }
    bool setData(const QModelIndex& x1, const QVariant& x2, int x3 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 71); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 71, args).toBool(); } return QFileSystemModel::setData(x1, x2, x3); }
    void sort(int x1, Qt::SortOrder x2 = Qt::AscendingOrder) { void* fun = LObjects::overrideFun(unique, 73); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 73, args).toBool()) return; } QFileSystemModel::sort(x1, x2); }
    Qt::DropActions supportedDropActions() const { void* fun = LObjects::overrideFun(unique, 75); if(fun) { return (Qt::DropActions)callOverrideFun(fun, 75, 0).toInt(); } return QFileSystemModel::supportedDropActions(); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QFileSystemModel::timerEvent(x1); }
    QModelIndex buddy(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 52); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 52, args)); } return QFileSystemModel::buddy(x1); }
    bool insertColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 62); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 62, args).toBool(); } return QFileSystemModel::insertColumns(x1, x2, x3); }
    bool insertRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 63); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 63, args).toBool(); } return QFileSystemModel::insertRows(x1, x2, x3); }
    QModelIndexList match(const QModelIndex& x1, int x2, const QVariant& x3, int x4 = 1, Qt::MatchFlags x5 = Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap)) const { void* fun = LObjects::overrideFun(unique, 64); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; return qVariantValue<QModelIndexList>(callOverrideFun(fun, 64, args)); } return QFileSystemModel::match(x1, x2, x3, x4, x5); }
    bool removeColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 68); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 68, args).toBool(); } return QFileSystemModel::removeColumns(x1, x2, x3); }
    bool removeRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 69); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 69, args).toBool(); } return QFileSystemModel::removeRows(x1, x2, x3); }
    bool setHeaderData(int x1, Qt::Orientation x2, const QVariant& x3, int x4 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 72); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return callOverrideFun(fun, 72, args).toBool(); } return QFileSystemModel::setHeaderData(x1, x2, x3, x4); }
    QSize span(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 74); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QSize>(callOverrideFun(fun, 74, args)); } return QFileSystemModel::span(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QFileSystemModel::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QFileSystemModel::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QFileSystemModel::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QFileSystemModel::disconnectNotify(x1); }
};

class LFileSystemWatcher : public QFileSystemWatcher {
    Q_OBJECT
    friend class Q53;
public:
    LFileSystemWatcher(uint u, QObject* x1 = 0) : QFileSystemWatcher(x1), unique(u) {}
    LFileSystemWatcher(uint u, const QStringList& x1, QObject* x2 = 0) : QFileSystemWatcher(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QFileSystemWatcher::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QFileSystemWatcher::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QFileSystemWatcher::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QFileSystemWatcher::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QFileSystemWatcher::timerEvent(x1); }
};

class LFinalState : public QFinalState {
    Q_OBJECT
    friend class Q54;
public:
    LFinalState(uint u, QState* x1 = 0) : QFinalState(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void onEntry(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 111); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 111, args).toBool()) return; } QFinalState::onEntry(x1); }
    void onExit(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 112); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 112, args).toBool()) return; } QFinalState::onExit(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QFinalState::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QFinalState::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QFinalState::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QFinalState::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QFinalState::timerEvent(x1); }
};

class LFocusFrame : public QFocusFrame {
    Q_OBJECT
    friend class Q55;
public:
    LFocusFrame(uint u, QWidget* x1 = 0) : QFocusFrame(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QFocusFrame::paintEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QFocusFrame::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QFocusFrame::inputMethodQuery(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QFocusFrame::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QFocusFrame::sizeHint(); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QFocusFrame::actionEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QFocusFrame::changeEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QFocusFrame::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QFocusFrame::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QFocusFrame::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QFocusFrame::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QFocusFrame::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QFocusFrame::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QFocusFrame::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QFocusFrame::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QFocusFrame::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QFocusFrame::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QFocusFrame::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QFocusFrame::inputMethodEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QFocusFrame::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QFocusFrame::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QFocusFrame::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QFocusFrame::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QFocusFrame::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QFocusFrame::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QFocusFrame::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QFocusFrame::moveEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QFocusFrame::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QFocusFrame::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QFocusFrame::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QFocusFrame::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QFocusFrame::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QFocusFrame::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QFocusFrame::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QFocusFrame::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QFocusFrame::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QFocusFrame::timerEvent(x1); }
};

class LFontComboBox : public QFontComboBox {
    Q_OBJECT
    friend class Q56;
public:
    LFontComboBox(uint u, QWidget* x1 = 0) : QFontComboBox(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QFontComboBox::sizeHint(); }
    void hidePopup() { void* fun = LObjects::overrideFun(unique, 179); if(fun) { if(callOverrideFun(fun, 179, 0).toBool()) return; } QFontComboBox::hidePopup(); }
    void showPopup() { void* fun = LObjects::overrideFun(unique, 180); if(fun) { if(callOverrideFun(fun, 180, 0).toBool()) return; } QFontComboBox::showPopup(); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QFontComboBox::minimumSizeHint(); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QFontComboBox::changeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QFontComboBox::contextMenuEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QFontComboBox::focusInEvent(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QFontComboBox::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QFontComboBox::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QFontComboBox::inputMethodEvent(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QFontComboBox::inputMethodQuery(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QFontComboBox::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QFontComboBox::keyReleaseEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QFontComboBox::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QFontComboBox::mouseReleaseEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QFontComboBox::paintEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QFontComboBox::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QFontComboBox::showEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QFontComboBox::wheelEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QFontComboBox::heightForWidth(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QFontComboBox::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QFontComboBox::closeEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QFontComboBox::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QFontComboBox::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QFontComboBox::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QFontComboBox::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QFontComboBox::enterEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QFontComboBox::focusNextPrevChild(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QFontComboBox::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QFontComboBox::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QFontComboBox::mouseMoveEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QFontComboBox::moveEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QFontComboBox::tabletEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QFontComboBox::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QFontComboBox::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QFontComboBox::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QFontComboBox::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QFontComboBox::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QFontComboBox::timerEvent(x1); }
};

class LFontDialog : public QFontDialog {
    Q_OBJECT
    friend class Q57;
public:
    LFontDialog(uint u, QWidget* x1 = 0) : QFontDialog(x1), unique(u) {}
    LFontDialog(uint u, const QFont& x1, QWidget* x2 = 0) : QFontDialog(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void setVisible(bool x1) { void* fun = LObjects::overrideFun(unique, 98); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 98, args).toBool()) return; } QFontDialog::setVisible(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QFontDialog::changeEvent(x1); }
    void done(int x1) { void* fun = LObjects::overrideFun(unique, 173); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 173, args).toBool()) return; } QFontDialog::done(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QFontDialog::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QFontDialog::sizeHint(); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QFontDialog::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QFontDialog::contextMenuEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QFontDialog::keyPressEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QFontDialog::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QFontDialog::showEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QFontDialog::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QFontDialog::inputMethodQuery(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QFontDialog::actionEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QFontDialog::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QFontDialog::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QFontDialog::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QFontDialog::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QFontDialog::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QFontDialog::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QFontDialog::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QFontDialog::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QFontDialog::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QFontDialog::inputMethodEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QFontDialog::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QFontDialog::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QFontDialog::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QFontDialog::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QFontDialog::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QFontDialog::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QFontDialog::moveEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QFontDialog::paintEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QFontDialog::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QFontDialog::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QFontDialog::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QFontDialog::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QFontDialog::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QFontDialog::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QFontDialog::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QFontDialog::timerEvent(x1); }
};

class LFormLayout : public QFormLayout {
    Q_OBJECT
    friend class Q58;
public:
    LFormLayout(uint u, QWidget* x1 = 0) : QFormLayout(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void addItem(QLayoutItem* x1) { void* fun = LObjects::overrideFun(unique, 128); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 128, args).toBool()) return; } QFormLayout::addItem(x1); }
    int count() const { void* fun = LObjects::overrideFun(unique, 129); if(fun) { return callOverrideFun(fun, 129, 0).toInt(); } return QFormLayout::count(); }
    Qt::Orientations expandingDirections() const { void* fun = LObjects::overrideFun(unique, 130); if(fun) { return (Qt::Orientations)callOverrideFun(fun, 130, 0).toInt(); } return QFormLayout::expandingDirections(); }
    bool hasHeightForWidth() const { void* fun = LObjects::overrideFun(unique, 131); if(fun) { return callOverrideFun(fun, 131, 0).toBool(); } return QFormLayout::hasHeightForWidth(); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QFormLayout::heightForWidth(x1); }
    void invalidate() { void* fun = LObjects::overrideFun(unique, 132); if(fun) { if(callOverrideFun(fun, 132, 0).toBool()) return; } QFormLayout::invalidate(); }
    QLayoutItem* itemAt(int x1) const { void* fun = LObjects::overrideFun(unique, 133); if(fun) { const void* args[] = { &x1 }; return (QLayoutItem*)qVariantValue<void*>(callOverrideFun(fun, 133, args)); } return QFormLayout::itemAt(x1); }
    QSize minimumSize() const { void* fun = LObjects::overrideFun(unique, 136); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 136, 0)); } return QFormLayout::minimumSize(); }
    void setGeometry(const QRect& x1) { void* fun = LObjects::overrideFun(unique, 137); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 137, args).toBool()) return; } QFormLayout::setGeometry(x1); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QFormLayout::sizeHint(); }
    QLayoutItem* takeAt(int x1) { void* fun = LObjects::overrideFun(unique, 138); if(fun) { const void* args[] = { &x1 }; return (QLayoutItem*)qVariantValue<void*>(callOverrideFun(fun, 138, args)); } return QFormLayout::takeAt(x1); }
    int indexOf(QWidget* x1) const { void* fun = LObjects::overrideFun(unique, 139); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 139, args).toInt(); } return QFormLayout::indexOf(x1); }
    QRect geometry() const { void* fun = LObjects::overrideFun(unique, 140); if(fun) { return qVariantValue<QRect>(callOverrideFun(fun, 140, 0)); } return QFormLayout::geometry(); }
    bool isEmpty() const { void* fun = LObjects::overrideFun(unique, 141); if(fun) { return callOverrideFun(fun, 141, 0).toBool(); } return QFormLayout::isEmpty(); }
    QLayout* layout() { void* fun = LObjects::overrideFun(unique, 142); if(fun) { return (QLayout*)qVariantValue<void*>(callOverrideFun(fun, 142, 0)); } return QFormLayout::layout(); }
    QSize maximumSize() const { void* fun = LObjects::overrideFun(unique, 134); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 134, 0)); } return QFormLayout::maximumSize(); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QFormLayout::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QFormLayout::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QFormLayout::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QFormLayout::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QFormLayout::timerEvent(x1); }
};

class LFrame : public QFrame {
    Q_OBJECT
    friend class Q59;
public:
    LFrame(uint u, QWidget* x1 = 0, Qt::WindowFlags x2 = 0) : QFrame(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QFrame::sizeHint(); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QFrame::changeEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QFrame::paintEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QFrame::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QFrame::inputMethodQuery(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QFrame::minimumSizeHint(); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QFrame::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QFrame::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QFrame::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QFrame::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QFrame::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QFrame::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QFrame::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QFrame::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QFrame::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QFrame::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QFrame::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QFrame::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QFrame::inputMethodEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QFrame::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QFrame::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QFrame::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QFrame::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QFrame::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QFrame::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QFrame::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QFrame::moveEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QFrame::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QFrame::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QFrame::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QFrame::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QFrame::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QFrame::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QFrame::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QFrame::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QFrame::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QFrame::timerEvent(x1); }
};

class LGesture : public QGesture {
    Q_OBJECT
    friend class Q60;
public:
    LGesture(uint u, QObject* x1 = 0) : QGesture(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QGesture::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QGesture::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QGesture::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QGesture::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QGesture::timerEvent(x1); }
};

class LGraphicsAnchor : public QGraphicsAnchor {
    Q_OBJECT
    friend class Q61;
public:

    static NumList overrideIds;
    uint unique;

    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QGraphicsAnchor::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QGraphicsAnchor::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QGraphicsAnchor::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QGraphicsAnchor::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QGraphicsAnchor::timerEvent(x1); }
};

class LGraphicsBlurEffect : public QGraphicsBlurEffect {
    Q_OBJECT
    friend class Q62;
public:
    LGraphicsBlurEffect(uint u, QObject* x1 = 0) : QGraphicsBlurEffect(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QRectF boundingRectFor(const QRectF& x1) const { void* fun = LObjects::overrideFun(unique, 190); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QRectF>(callOverrideFun(fun, 190, args)); } return QGraphicsBlurEffect::boundingRectFor(x1); }
    void draw(QPainter* x1) { void* fun = LObjects::overrideFun(unique, 191); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 191, args).toBool()) return; } QGraphicsBlurEffect::draw(x1); }
    void sourceChanged(ChangeFlags x1) { void* fun = LObjects::overrideFun(unique, 192); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 192, args).toBool()) return; } QGraphicsBlurEffect::sourceChanged(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QGraphicsBlurEffect::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QGraphicsBlurEffect::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QGraphicsBlurEffect::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QGraphicsBlurEffect::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QGraphicsBlurEffect::timerEvent(x1); }
};

class LGraphicsColorizeEffect : public QGraphicsColorizeEffect {
    Q_OBJECT
    friend class Q63;
public:
    LGraphicsColorizeEffect(uint u, QObject* x1 = 0) : QGraphicsColorizeEffect(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void draw(QPainter* x1) { void* fun = LObjects::overrideFun(unique, 191); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 191, args).toBool()) return; } QGraphicsColorizeEffect::draw(x1); }
    QRectF boundingRectFor(const QRectF& x1) const { void* fun = LObjects::overrideFun(unique, 190); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QRectF>(callOverrideFun(fun, 190, args)); } return QGraphicsColorizeEffect::boundingRectFor(x1); }
    void sourceChanged(ChangeFlags x1) { void* fun = LObjects::overrideFun(unique, 192); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 192, args).toBool()) return; } QGraphicsColorizeEffect::sourceChanged(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QGraphicsColorizeEffect::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QGraphicsColorizeEffect::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QGraphicsColorizeEffect::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QGraphicsColorizeEffect::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QGraphicsColorizeEffect::timerEvent(x1); }
};

class LGraphicsDropShadowEffect : public QGraphicsDropShadowEffect {
    Q_OBJECT
    friend class Q64;
public:
    LGraphicsDropShadowEffect(uint u, QObject* x1 = 0) : QGraphicsDropShadowEffect(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QRectF boundingRectFor(const QRectF& x1) const { void* fun = LObjects::overrideFun(unique, 190); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QRectF>(callOverrideFun(fun, 190, args)); } return QGraphicsDropShadowEffect::boundingRectFor(x1); }
    void draw(QPainter* x1) { void* fun = LObjects::overrideFun(unique, 191); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 191, args).toBool()) return; } QGraphicsDropShadowEffect::draw(x1); }
    void sourceChanged(ChangeFlags x1) { void* fun = LObjects::overrideFun(unique, 192); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 192, args).toBool()) return; } QGraphicsDropShadowEffect::sourceChanged(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QGraphicsDropShadowEffect::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QGraphicsDropShadowEffect::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QGraphicsDropShadowEffect::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QGraphicsDropShadowEffect::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QGraphicsDropShadowEffect::timerEvent(x1); }
};

class LGraphicsEffect : public QGraphicsEffect {
    Q_OBJECT
    friend class Q65;
public:
    LGraphicsEffect(uint u, QObject* x1 = 0) : QGraphicsEffect(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QRectF boundingRectFor(const QRectF& x1) const { void* fun = LObjects::overrideFun(unique, 190); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QRectF>(callOverrideFun(fun, 190, args)); } return QGraphicsEffect::boundingRectFor(x1); }
    void draw(QPainter* x1) { void* fun = LObjects::overrideFun(unique, 191); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 191, args).toBool()) return; }}
    void sourceChanged(ChangeFlags x1) { void* fun = LObjects::overrideFun(unique, 192); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 192, args).toBool()) return; } QGraphicsEffect::sourceChanged(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QGraphicsEffect::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QGraphicsEffect::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QGraphicsEffect::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QGraphicsEffect::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QGraphicsEffect::timerEvent(x1); }
};

class LGraphicsOpacityEffect : public QGraphicsOpacityEffect {
    Q_OBJECT
    friend class Q67;
public:
    LGraphicsOpacityEffect(uint u, QObject* x1 = 0) : QGraphicsOpacityEffect(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void draw(QPainter* x1) { void* fun = LObjects::overrideFun(unique, 191); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 191, args).toBool()) return; } QGraphicsOpacityEffect::draw(x1); }
    QRectF boundingRectFor(const QRectF& x1) const { void* fun = LObjects::overrideFun(unique, 190); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QRectF>(callOverrideFun(fun, 190, args)); } return QGraphicsOpacityEffect::boundingRectFor(x1); }
    void sourceChanged(ChangeFlags x1) { void* fun = LObjects::overrideFun(unique, 192); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 192, args).toBool()) return; } QGraphicsOpacityEffect::sourceChanged(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QGraphicsOpacityEffect::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QGraphicsOpacityEffect::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QGraphicsOpacityEffect::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QGraphicsOpacityEffect::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QGraphicsOpacityEffect::timerEvent(x1); }
};

class LGraphicsProxyWidget : public QGraphicsProxyWidget {
    Q_OBJECT
    friend class Q68;
public:
    LGraphicsProxyWidget(uint u, QGraphicsItem* x1 = 0, Qt::WindowFlags x2 = 0) : QGraphicsProxyWidget(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void paint(QPainter* x1, const QStyleOptionGraphicsItem* x2, QWidget* x3) { void* fun = LObjects::overrideFun(unique, 193); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 193, args).toBool()) return; } QGraphicsProxyWidget::paint(x1, x2, x3); }
    void setGeometry(const QRectF& x1) { void* fun = LObjects::overrideFun(unique, 194); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 194, args).toBool()) return; } QGraphicsProxyWidget::setGeometry(x1); }
    int type() const { void* fun = LObjects::overrideFun(unique, 195); if(fun) { return callOverrideFun(fun, 195, 0).toInt(); } return QGraphicsProxyWidget::type(); }
    void contextMenuEvent(QGraphicsSceneContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 196); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 196, args).toBool()) return; } QGraphicsProxyWidget::contextMenuEvent(x1); }
    void dragEnterEvent(QGraphicsSceneDragDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 197); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 197, args).toBool()) return; } QGraphicsProxyWidget::dragEnterEvent(x1); }
    void dragLeaveEvent(QGraphicsSceneDragDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 198); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 198, args).toBool()) return; } QGraphicsProxyWidget::dragLeaveEvent(x1); }
    void dragMoveEvent(QGraphicsSceneDragDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 199); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 199, args).toBool()) return; } QGraphicsProxyWidget::dragMoveEvent(x1); }
    void dropEvent(QGraphicsSceneDragDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 200); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 200, args).toBool()) return; } QGraphicsProxyWidget::dropEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QGraphicsProxyWidget::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QGraphicsProxyWidget::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QGraphicsProxyWidget::focusOutEvent(x1); }
    void grabMouseEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 201); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 201, args).toBool()) return; } QGraphicsProxyWidget::grabMouseEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QGraphicsProxyWidget::hideEvent(x1); }
    void hoverEnterEvent(QGraphicsSceneHoverEvent* x1) { void* fun = LObjects::overrideFun(unique, 202); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 202, args).toBool()) return; } QGraphicsProxyWidget::hoverEnterEvent(x1); }
    void hoverLeaveEvent(QGraphicsSceneHoverEvent* x1) { void* fun = LObjects::overrideFun(unique, 203); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 203, args).toBool()) return; } QGraphicsProxyWidget::hoverLeaveEvent(x1); }
    void hoverMoveEvent(QGraphicsSceneHoverEvent* x1) { void* fun = LObjects::overrideFun(unique, 204); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 204, args).toBool()) return; } QGraphicsProxyWidget::hoverMoveEvent(x1); }
    QVariant itemChange(GraphicsItemChange x1, const QVariant& x2) { void* fun = LObjects::overrideFun(unique, 205); if(fun) { const void* args[] = { &x1, &x2 }; return qVariantValue<QVariant>(callOverrideFun(fun, 205, args)); } return QGraphicsProxyWidget::itemChange(x1, x2); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QGraphicsProxyWidget::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QGraphicsProxyWidget::keyReleaseEvent(x1); }
    void mouseDoubleClickEvent(QGraphicsSceneMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 206); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 206, args).toBool()) return; } QGraphicsProxyWidget::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QGraphicsSceneMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 207); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 207, args).toBool()) return; } QGraphicsProxyWidget::mouseMoveEvent(x1); }
    void mousePressEvent(QGraphicsSceneMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 208); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 208, args).toBool()) return; } QGraphicsProxyWidget::mousePressEvent(x1); }
    void mouseReleaseEvent(QGraphicsSceneMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 209); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 209, args).toBool()) return; } QGraphicsProxyWidget::mouseReleaseEvent(x1); }
    void resizeEvent(QGraphicsSceneResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 210); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 210, args).toBool()) return; } QGraphicsProxyWidget::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QGraphicsProxyWidget::showEvent(x1); }
    QSizeF sizeHint(Qt::SizeHint x1, const QSizeF& x2 = QSizeF()) const { void* fun = LObjects::overrideFun(unique, 211); if(fun) { const void* args[] = { &x1, &x2 }; return qVariantValue<QSizeF>(callOverrideFun(fun, 211, args)); } return QGraphicsProxyWidget::sizeHint(x1, x2); }
    void ungrabMouseEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 212); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 212, args).toBool()) return; } QGraphicsProxyWidget::ungrabMouseEvent(x1); }
    void wheelEvent(QGraphicsSceneWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 213); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 213, args).toBool()) return; } QGraphicsProxyWidget::wheelEvent(x1); }
    void paintWindowFrame(QPainter* x1, const QStyleOptionGraphicsItem* x2, QWidget* x3 = 0) { void* fun = LObjects::overrideFun(unique, 214); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 214, args).toBool()) return; } QGraphicsProxyWidget::paintWindowFrame(x1, x2, x3); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QGraphicsProxyWidget::changeEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QGraphicsProxyWidget::closeEvent(x1); }
    void grabKeyboardEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 215); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 215, args).toBool()) return; } QGraphicsProxyWidget::grabKeyboardEvent(x1); }
    void initStyleOption(QStyleOption* x1) const { void* fun = LObjects::overrideFun(unique, 216); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 216, args).toBool()) return; } QGraphicsProxyWidget::initStyleOption(x1); }
    void moveEvent(QGraphicsSceneMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 217); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 217, args).toBool()) return; } QGraphicsProxyWidget::moveEvent(x1); }
    void polishEvent() { void* fun = LObjects::overrideFun(unique, 218); if(fun) { if(callOverrideFun(fun, 218, 0).toBool()) return; } QGraphicsProxyWidget::polishEvent(); }
    void ungrabKeyboardEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 219); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 219, args).toBool()) return; } QGraphicsProxyWidget::ungrabKeyboardEvent(x1); }
    bool windowFrameEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 220); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 220, args).toBool(); } return QGraphicsProxyWidget::windowFrameEvent(x1); }
    Qt::WindowFrameSection windowFrameSectionAt(const QPointF& x1) const { void* fun = LObjects::overrideFun(unique, 221); if(fun) { const void* args[] = { &x1 }; return (Qt::WindowFrameSection)callOverrideFun(fun, 221, args).toInt(); } return QGraphicsProxyWidget::windowFrameSectionAt(x1); }
    QRectF boundingRect() const { void* fun = LObjects::overrideFun(unique, 222); if(fun) { return qVariantValue<QRectF>(callOverrideFun(fun, 222, 0)); } return QGraphicsProxyWidget::boundingRect(); }
    QPainterPath shape() const { void* fun = LObjects::overrideFun(unique, 223); if(fun) { return qVariantValue<QPainterPath>(callOverrideFun(fun, 223, 0)); } return QGraphicsProxyWidget::shape(); }
    bool sceneEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 224); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 224, args).toBool(); } return QGraphicsProxyWidget::sceneEvent(x1); }
    void updateGeometry() { void* fun = LObjects::overrideFun(unique, 225); if(fun) { if(callOverrideFun(fun, 225, 0).toBool()) return; } QGraphicsProxyWidget::updateGeometry(); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QGraphicsProxyWidget::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QGraphicsProxyWidget::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QGraphicsProxyWidget::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QGraphicsProxyWidget::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QGraphicsProxyWidget::timerEvent(x1); }
};

class LGraphicsRotation : public QGraphicsRotation {
    Q_OBJECT
    friend class Q69;
public:
    LGraphicsRotation(uint u, QObject* x1 = 0) : QGraphicsRotation(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void applyTo(QMatrix4x4* x1) const { void* fun = LObjects::overrideFun(unique, 226); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 226, args).toBool()) return; } QGraphicsRotation::applyTo(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QGraphicsRotation::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QGraphicsRotation::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QGraphicsRotation::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QGraphicsRotation::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QGraphicsRotation::timerEvent(x1); }
};

class LGraphicsScale : public QGraphicsScale {
    Q_OBJECT
    friend class Q70;
public:
    LGraphicsScale(uint u, QObject* x1 = 0) : QGraphicsScale(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void applyTo(QMatrix4x4* x1) const { void* fun = LObjects::overrideFun(unique, 226); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 226, args).toBool()) return; } QGraphicsScale::applyTo(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QGraphicsScale::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QGraphicsScale::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QGraphicsScale::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QGraphicsScale::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QGraphicsScale::timerEvent(x1); }
};

class LGraphicsScene : public QGraphicsScene {
    Q_OBJECT
    friend class Q71;
public:
    LGraphicsScene(uint u, QObject* x1 = 0) : QGraphicsScene(x1), unique(u) {}
    LGraphicsScene(uint u, const QRectF& x1, QObject* x2 = 0) : QGraphicsScene(x1, x2), unique(u) {}
    LGraphicsScene(uint u, qreal x1, qreal x2, qreal x3, qreal x4, QObject* x5 = 0) : QGraphicsScene(x1, x2, x3, x4, x5), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QGraphicsScene::inputMethodQuery(x1); }
    void contextMenuEvent(QGraphicsSceneContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 196); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 196, args).toBool()) return; } QGraphicsScene::contextMenuEvent(x1); }
    void dragEnterEvent(QGraphicsSceneDragDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 197); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 197, args).toBool()) return; } QGraphicsScene::dragEnterEvent(x1); }
    void dragLeaveEvent(QGraphicsSceneDragDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 198); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 198, args).toBool()) return; } QGraphicsScene::dragLeaveEvent(x1); }
    void dragMoveEvent(QGraphicsSceneDragDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 199); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 199, args).toBool()) return; } QGraphicsScene::dragMoveEvent(x1); }
    void drawBackground(QPainter* x1, const QRectF& x2) { void* fun = LObjects::overrideFun(unique, 227); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 227, args).toBool()) return; } QGraphicsScene::drawBackground(x1, x2); }
    void drawForeground(QPainter* x1, const QRectF& x2) { void* fun = LObjects::overrideFun(unique, 228); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 228, args).toBool()) return; } QGraphicsScene::drawForeground(x1, x2); }
    void dropEvent(QGraphicsSceneDragDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 200); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 200, args).toBool()) return; } QGraphicsScene::dropEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QGraphicsScene::focusInEvent(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QGraphicsScene::focusOutEvent(x1); }
    void helpEvent(QGraphicsSceneHelpEvent* x1) { void* fun = LObjects::overrideFun(unique, 229); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 229, args).toBool()) return; } QGraphicsScene::helpEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QGraphicsScene::inputMethodEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QGraphicsScene::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QGraphicsScene::keyReleaseEvent(x1); }
    void mouseDoubleClickEvent(QGraphicsSceneMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 206); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 206, args).toBool()) return; } QGraphicsScene::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QGraphicsSceneMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 207); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 207, args).toBool()) return; } QGraphicsScene::mouseMoveEvent(x1); }
    void mousePressEvent(QGraphicsSceneMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 208); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 208, args).toBool()) return; } QGraphicsScene::mousePressEvent(x1); }
    void mouseReleaseEvent(QGraphicsSceneMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 209); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 209, args).toBool()) return; } QGraphicsScene::mouseReleaseEvent(x1); }
    void wheelEvent(QGraphicsSceneWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 213); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 213, args).toBool()) return; } QGraphicsScene::wheelEvent(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QGraphicsScene::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QGraphicsScene::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QGraphicsScene::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QGraphicsScene::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QGraphicsScene::timerEvent(x1); }
};

class LGraphicsTextItem : public QGraphicsTextItem {
    Q_OBJECT
    friend class Q72;
public:
    LGraphicsTextItem(uint u, QGraphicsItem* x1 = 0) : QGraphicsTextItem(x1), unique(u) {}
    LGraphicsTextItem(uint u, const QString& x1, QGraphicsItem* x2 = 0) : QGraphicsTextItem(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QRectF boundingRect() const { void* fun = LObjects::overrideFun(unique, 222); if(fun) { return qVariantValue<QRectF>(callOverrideFun(fun, 222, 0)); } return QGraphicsTextItem::boundingRect(); }
    bool contains(const QPointF& x1) const { void* fun = LObjects::overrideFun(unique, 230); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 230, args).toBool(); } return QGraphicsTextItem::contains(x1); }
    bool isObscuredBy(const QGraphicsItem* x1) const { void* fun = LObjects::overrideFun(unique, 231); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 231, args).toBool(); } return QGraphicsTextItem::isObscuredBy(x1); }
    QPainterPath opaqueArea() const { void* fun = LObjects::overrideFun(unique, 232); if(fun) { return qVariantValue<QPainterPath>(callOverrideFun(fun, 232, 0)); } return QGraphicsTextItem::opaqueArea(); }
    void paint(QPainter* x1, const QStyleOptionGraphicsItem* x2, QWidget* x3) { void* fun = LObjects::overrideFun(unique, 193); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 193, args).toBool()) return; } QGraphicsTextItem::paint(x1, x2, x3); }
    QPainterPath shape() const { void* fun = LObjects::overrideFun(unique, 223); if(fun) { return qVariantValue<QPainterPath>(callOverrideFun(fun, 223, 0)); } return QGraphicsTextItem::shape(); }
    int type() const { void* fun = LObjects::overrideFun(unique, 195); if(fun) { return callOverrideFun(fun, 195, 0).toInt(); } return QGraphicsTextItem::type(); }
    void contextMenuEvent(QGraphicsSceneContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 196); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 196, args).toBool()) return; } QGraphicsTextItem::contextMenuEvent(x1); }
    void dragEnterEvent(QGraphicsSceneDragDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 197); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 197, args).toBool()) return; } QGraphicsTextItem::dragEnterEvent(x1); }
    void dragLeaveEvent(QGraphicsSceneDragDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 198); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 198, args).toBool()) return; } QGraphicsTextItem::dragLeaveEvent(x1); }
    void dragMoveEvent(QGraphicsSceneDragDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 199); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 199, args).toBool()) return; } QGraphicsTextItem::dragMoveEvent(x1); }
    void dropEvent(QGraphicsSceneDragDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 200); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 200, args).toBool()) return; } QGraphicsTextItem::dropEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QGraphicsTextItem::focusInEvent(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QGraphicsTextItem::focusOutEvent(x1); }
    void hoverEnterEvent(QGraphicsSceneHoverEvent* x1) { void* fun = LObjects::overrideFun(unique, 202); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 202, args).toBool()) return; } QGraphicsTextItem::hoverEnterEvent(x1); }
    void hoverLeaveEvent(QGraphicsSceneHoverEvent* x1) { void* fun = LObjects::overrideFun(unique, 203); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 203, args).toBool()) return; } QGraphicsTextItem::hoverLeaveEvent(x1); }
    void hoverMoveEvent(QGraphicsSceneHoverEvent* x1) { void* fun = LObjects::overrideFun(unique, 204); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 204, args).toBool()) return; } QGraphicsTextItem::hoverMoveEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QGraphicsTextItem::inputMethodEvent(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QGraphicsTextItem::inputMethodQuery(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QGraphicsTextItem::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QGraphicsTextItem::keyReleaseEvent(x1); }
    void mouseDoubleClickEvent(QGraphicsSceneMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 206); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 206, args).toBool()) return; } QGraphicsTextItem::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QGraphicsSceneMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 207); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 207, args).toBool()) return; } QGraphicsTextItem::mouseMoveEvent(x1); }
    void mousePressEvent(QGraphicsSceneMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 208); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 208, args).toBool()) return; } QGraphicsTextItem::mousePressEvent(x1); }
    void mouseReleaseEvent(QGraphicsSceneMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 209); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 209, args).toBool()) return; } QGraphicsTextItem::mouseReleaseEvent(x1); }
    bool sceneEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 224); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 224, args).toBool(); } return QGraphicsTextItem::sceneEvent(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QGraphicsTextItem::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QGraphicsTextItem::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QGraphicsTextItem::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QGraphicsTextItem::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QGraphicsTextItem::timerEvent(x1); }
};

class LGraphicsTransform : public QGraphicsTransform {
    Q_OBJECT
    friend class Q73;
public:
    LGraphicsTransform(uint u, QObject* x1 = 0) : QGraphicsTransform(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void applyTo(QMatrix4x4* x1) const { void* fun = LObjects::overrideFun(unique, 226); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 226, args).toBool()) return; }}
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QGraphicsTransform::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QGraphicsTransform::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QGraphicsTransform::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QGraphicsTransform::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QGraphicsTransform::timerEvent(x1); }
};

class LGraphicsView : public QGraphicsView {
    Q_OBJECT
    friend class Q74;
public:
    LGraphicsView(uint u, QWidget* x1 = 0) : QGraphicsView(x1), unique(u) {}
    LGraphicsView(uint u, QGraphicsScene* x1, QWidget* x2 = 0) : QGraphicsView(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void drawBackground(QPainter* x1, const QRectF& x2) { void* fun = LObjects::overrideFun(unique, 227); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 227, args).toBool()) return; } QGraphicsView::drawBackground(x1, x2); }
    void drawForeground(QPainter* x1, const QRectF& x2) { void* fun = LObjects::overrideFun(unique, 228); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 228, args).toBool()) return; } QGraphicsView::drawForeground(x1, x2); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QGraphicsView::inputMethodQuery(x1); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QGraphicsView::sizeHint(); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QGraphicsView::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QGraphicsView::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QGraphicsView::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QGraphicsView::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QGraphicsView::dropEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QGraphicsView::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QGraphicsView::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QGraphicsView::focusOutEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QGraphicsView::inputMethodEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QGraphicsView::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QGraphicsView::keyReleaseEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QGraphicsView::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QGraphicsView::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QGraphicsView::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QGraphicsView::mouseReleaseEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QGraphicsView::paintEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QGraphicsView::resizeEvent(x1); }
    void scrollContentsBy(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 96); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 96, args).toBool()) return; } QGraphicsView::scrollContentsBy(x1, x2); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QGraphicsView::showEvent(x1); }
    bool viewportEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 95); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 95, args).toBool(); } return QGraphicsView::viewportEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QGraphicsView::wheelEvent(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QGraphicsView::minimumSizeHint(); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QGraphicsView::changeEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QGraphicsView::heightForWidth(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QGraphicsView::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QGraphicsView::closeEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QGraphicsView::enterEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QGraphicsView::hideEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QGraphicsView::leaveEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QGraphicsView::moveEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QGraphicsView::tabletEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QGraphicsView::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QGraphicsView::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QGraphicsView::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QGraphicsView::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QGraphicsView::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QGraphicsView::timerEvent(x1); }
};

class LGraphicsWidget : public QGraphicsWidget {
    Q_OBJECT
    friend class Q75;
public:
    LGraphicsWidget(uint u, QGraphicsItem* x1 = 0, Qt::WindowFlags x2 = 0) : QGraphicsWidget(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void paintWindowFrame(QPainter* x1, const QStyleOptionGraphicsItem* x2, QWidget* x3 = 0) { void* fun = LObjects::overrideFun(unique, 214); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 214, args).toBool()) return; } QGraphicsWidget::paintWindowFrame(x1, x2, x3); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QGraphicsWidget::changeEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QGraphicsWidget::closeEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QGraphicsWidget::focusNextPrevChild(x1); }
    void grabKeyboardEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 215); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 215, args).toBool()) return; } QGraphicsWidget::grabKeyboardEvent(x1); }
    void grabMouseEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 201); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 201, args).toBool()) return; } QGraphicsWidget::grabMouseEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QGraphicsWidget::hideEvent(x1); }
    void initStyleOption(QStyleOption* x1) const { void* fun = LObjects::overrideFun(unique, 216); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 216, args).toBool()) return; } QGraphicsWidget::initStyleOption(x1); }
    void moveEvent(QGraphicsSceneMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 217); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 217, args).toBool()) return; } QGraphicsWidget::moveEvent(x1); }
    void polishEvent() { void* fun = LObjects::overrideFun(unique, 218); if(fun) { if(callOverrideFun(fun, 218, 0).toBool()) return; } QGraphicsWidget::polishEvent(); }
    void resizeEvent(QGraphicsSceneResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 210); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 210, args).toBool()) return; } QGraphicsWidget::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QGraphicsWidget::showEvent(x1); }
    void ungrabKeyboardEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 219); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 219, args).toBool()) return; } QGraphicsWidget::ungrabKeyboardEvent(x1); }
    void ungrabMouseEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 212); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 212, args).toBool()) return; } QGraphicsWidget::ungrabMouseEvent(x1); }
    bool windowFrameEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 220); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 220, args).toBool(); } return QGraphicsWidget::windowFrameEvent(x1); }
    Qt::WindowFrameSection windowFrameSectionAt(const QPointF& x1) const { void* fun = LObjects::overrideFun(unique, 221); if(fun) { const void* args[] = { &x1 }; return (Qt::WindowFrameSection)callOverrideFun(fun, 221, args).toInt(); } return QGraphicsWidget::windowFrameSectionAt(x1); }
    QRectF boundingRect() const { void* fun = LObjects::overrideFun(unique, 222); if(fun) { return qVariantValue<QRectF>(callOverrideFun(fun, 222, 0)); } return QGraphicsWidget::boundingRect(); }
    void paint(QPainter* x1, const QStyleOptionGraphicsItem* x2, QWidget* x3 = 0) { void* fun = LObjects::overrideFun(unique, 193); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 193, args).toBool()) return; } QGraphicsWidget::paint(x1, x2, x3); }
    void setGeometry(const QRectF& x1) { void* fun = LObjects::overrideFun(unique, 194); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 194, args).toBool()) return; } QGraphicsWidget::setGeometry(x1); }
    QPainterPath shape() const { void* fun = LObjects::overrideFun(unique, 223); if(fun) { return qVariantValue<QPainterPath>(callOverrideFun(fun, 223, 0)); } return QGraphicsWidget::shape(); }
    int type() const { void* fun = LObjects::overrideFun(unique, 195); if(fun) { return callOverrideFun(fun, 195, 0).toInt(); } return QGraphicsWidget::type(); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QGraphicsWidget::focusInEvent(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QGraphicsWidget::focusOutEvent(x1); }
    void hoverLeaveEvent(QGraphicsSceneHoverEvent* x1) { void* fun = LObjects::overrideFun(unique, 203); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 203, args).toBool()) return; } QGraphicsWidget::hoverLeaveEvent(x1); }
    void hoverMoveEvent(QGraphicsSceneHoverEvent* x1) { void* fun = LObjects::overrideFun(unique, 204); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 204, args).toBool()) return; } QGraphicsWidget::hoverMoveEvent(x1); }
    QVariant itemChange(GraphicsItemChange x1, const QVariant& x2) { void* fun = LObjects::overrideFun(unique, 205); if(fun) { const void* args[] = { &x1, &x2 }; return qVariantValue<QVariant>(callOverrideFun(fun, 205, args)); } return QGraphicsWidget::itemChange(x1, x2); }
    bool sceneEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 224); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 224, args).toBool(); } return QGraphicsWidget::sceneEvent(x1); }
    QSizeF sizeHint(Qt::SizeHint x1, const QSizeF& x2 = QSizeF()) const { void* fun = LObjects::overrideFun(unique, 211); if(fun) { const void* args[] = { &x1, &x2 }; return qVariantValue<QSizeF>(callOverrideFun(fun, 211, args)); } return QGraphicsWidget::sizeHint(x1, x2); }
    void updateGeometry() { void* fun = LObjects::overrideFun(unique, 225); if(fun) { if(callOverrideFun(fun, 225, 0).toBool()) return; } QGraphicsWidget::updateGeometry(); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QGraphicsWidget::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QGraphicsWidget::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QGraphicsWidget::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QGraphicsWidget::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QGraphicsWidget::timerEvent(x1); }
};

class LGridLayout : public QGridLayout {
    Q_OBJECT
    friend class Q76;
public:
    LGridLayout(uint u, QWidget* x1) : QGridLayout(x1), unique(u) {}
    LGridLayout(uint u) : unique(u) {}

    static NumList overrideIds;
    uint unique;

    int count() const { void* fun = LObjects::overrideFun(unique, 129); if(fun) { return callOverrideFun(fun, 129, 0).toInt(); } return QGridLayout::count(); }
    Qt::Orientations expandingDirections() const { void* fun = LObjects::overrideFun(unique, 130); if(fun) { return (Qt::Orientations)callOverrideFun(fun, 130, 0).toInt(); } return QGridLayout::expandingDirections(); }
    bool hasHeightForWidth() const { void* fun = LObjects::overrideFun(unique, 131); if(fun) { return callOverrideFun(fun, 131, 0).toBool(); } return QGridLayout::hasHeightForWidth(); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QGridLayout::heightForWidth(x1); }
    void invalidate() { void* fun = LObjects::overrideFun(unique, 132); if(fun) { if(callOverrideFun(fun, 132, 0).toBool()) return; } QGridLayout::invalidate(); }
    QLayoutItem* itemAt(int x1) const { void* fun = LObjects::overrideFun(unique, 133); if(fun) { const void* args[] = { &x1 }; return (QLayoutItem*)qVariantValue<void*>(callOverrideFun(fun, 133, args)); } return QGridLayout::itemAt(x1); }
    QSize maximumSize() const { void* fun = LObjects::overrideFun(unique, 134); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 134, 0)); } return QGridLayout::maximumSize(); }
    int minimumHeightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 135); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 135, args).toInt(); } return QGridLayout::minimumHeightForWidth(x1); }
    QSize minimumSize() const { void* fun = LObjects::overrideFun(unique, 136); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 136, 0)); } return QGridLayout::minimumSize(); }
    void setGeometry(const QRect& x1) { void* fun = LObjects::overrideFun(unique, 137); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 137, args).toBool()) return; } QGridLayout::setGeometry(x1); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QGridLayout::sizeHint(); }
    QLayoutItem* takeAt(int x1) { void* fun = LObjects::overrideFun(unique, 138); if(fun) { const void* args[] = { &x1 }; return (QLayoutItem*)qVariantValue<void*>(callOverrideFun(fun, 138, args)); } return QGridLayout::takeAt(x1); }
    void addItem(QLayoutItem* x1) { void* fun = LObjects::overrideFun(unique, 128); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 128, args).toBool()) return; } QGridLayout::addItem(x1); }
    int indexOf(QWidget* x1) const { void* fun = LObjects::overrideFun(unique, 139); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 139, args).toInt(); } return QGridLayout::indexOf(x1); }
    QRect geometry() const { void* fun = LObjects::overrideFun(unique, 140); if(fun) { return qVariantValue<QRect>(callOverrideFun(fun, 140, 0)); } return QGridLayout::geometry(); }
    bool isEmpty() const { void* fun = LObjects::overrideFun(unique, 141); if(fun) { return callOverrideFun(fun, 141, 0).toBool(); } return QGridLayout::isEmpty(); }
    QLayout* layout() { void* fun = LObjects::overrideFun(unique, 142); if(fun) { return (QLayout*)qVariantValue<void*>(callOverrideFun(fun, 142, 0)); } return QGridLayout::layout(); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QGridLayout::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QGridLayout::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QGridLayout::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QGridLayout::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QGridLayout::timerEvent(x1); }
};

class LGroupBox : public QGroupBox {
    Q_OBJECT
    friend class Q77;
public:
    LGroupBox(uint u, QWidget* x1 = 0) : QGroupBox(x1), unique(u) {}
    LGroupBox(uint u, const QString& x1, QWidget* x2 = 0) : QGroupBox(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QGroupBox::minimumSizeHint(); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QGroupBox::changeEvent(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QGroupBox::childEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QGroupBox::focusInEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QGroupBox::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QGroupBox::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QGroupBox::mouseReleaseEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QGroupBox::paintEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QGroupBox::resizeEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QGroupBox::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QGroupBox::inputMethodQuery(x1); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QGroupBox::sizeHint(); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QGroupBox::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QGroupBox::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QGroupBox::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QGroupBox::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QGroupBox::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QGroupBox::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QGroupBox::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QGroupBox::enterEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QGroupBox::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QGroupBox::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QGroupBox::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QGroupBox::inputMethodEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QGroupBox::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QGroupBox::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QGroupBox::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QGroupBox::mouseDoubleClickEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QGroupBox::moveEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QGroupBox::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QGroupBox::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QGroupBox::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QGroupBox::metric(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QGroupBox::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QGroupBox::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QGroupBox::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QGroupBox::timerEvent(x1); }
};

class LHBoxLayout : public QHBoxLayout {
    Q_OBJECT
    friend class Q78;
public:
    LHBoxLayout(uint u) : unique(u) {}
    LHBoxLayout(uint u, QWidget* x1) : QHBoxLayout(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void addItem(QLayoutItem* x1) { void* fun = LObjects::overrideFun(unique, 128); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 128, args).toBool()) return; } QHBoxLayout::addItem(x1); }
    int count() const { void* fun = LObjects::overrideFun(unique, 129); if(fun) { return callOverrideFun(fun, 129, 0).toInt(); } return QHBoxLayout::count(); }
    Qt::Orientations expandingDirections() const { void* fun = LObjects::overrideFun(unique, 130); if(fun) { return (Qt::Orientations)callOverrideFun(fun, 130, 0).toInt(); } return QHBoxLayout::expandingDirections(); }
    bool hasHeightForWidth() const { void* fun = LObjects::overrideFun(unique, 131); if(fun) { return callOverrideFun(fun, 131, 0).toBool(); } return QHBoxLayout::hasHeightForWidth(); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QHBoxLayout::heightForWidth(x1); }
    void invalidate() { void* fun = LObjects::overrideFun(unique, 132); if(fun) { if(callOverrideFun(fun, 132, 0).toBool()) return; } QHBoxLayout::invalidate(); }
    QLayoutItem* itemAt(int x1) const { void* fun = LObjects::overrideFun(unique, 133); if(fun) { const void* args[] = { &x1 }; return (QLayoutItem*)qVariantValue<void*>(callOverrideFun(fun, 133, args)); } return QHBoxLayout::itemAt(x1); }
    QSize maximumSize() const { void* fun = LObjects::overrideFun(unique, 134); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 134, 0)); } return QHBoxLayout::maximumSize(); }
    int minimumHeightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 135); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 135, args).toInt(); } return QHBoxLayout::minimumHeightForWidth(x1); }
    QSize minimumSize() const { void* fun = LObjects::overrideFun(unique, 136); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 136, 0)); } return QHBoxLayout::minimumSize(); }
    void setGeometry(const QRect& x1) { void* fun = LObjects::overrideFun(unique, 137); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 137, args).toBool()) return; } QHBoxLayout::setGeometry(x1); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QHBoxLayout::sizeHint(); }
    QLayoutItem* takeAt(int x1) { void* fun = LObjects::overrideFun(unique, 138); if(fun) { const void* args[] = { &x1 }; return (QLayoutItem*)qVariantValue<void*>(callOverrideFun(fun, 138, args)); } return QHBoxLayout::takeAt(x1); }
    int indexOf(QWidget* x1) const { void* fun = LObjects::overrideFun(unique, 139); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 139, args).toInt(); } return QHBoxLayout::indexOf(x1); }
    QRect geometry() const { void* fun = LObjects::overrideFun(unique, 140); if(fun) { return qVariantValue<QRect>(callOverrideFun(fun, 140, 0)); } return QHBoxLayout::geometry(); }
    bool isEmpty() const { void* fun = LObjects::overrideFun(unique, 141); if(fun) { return callOverrideFun(fun, 141, 0).toBool(); } return QHBoxLayout::isEmpty(); }
    QLayout* layout() { void* fun = LObjects::overrideFun(unique, 142); if(fun) { return (QLayout*)qVariantValue<void*>(callOverrideFun(fun, 142, 0)); } return QHBoxLayout::layout(); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QHBoxLayout::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QHBoxLayout::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QHBoxLayout::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QHBoxLayout::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QHBoxLayout::timerEvent(x1); }
};

class LHeaderView : public QHeaderView {
    Q_OBJECT
    friend class Q79;
public:
    LHeaderView(uint u, Qt::Orientation x1, QWidget* x2 = 0) : QHeaderView(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void paintSection(QPainter* x1, const QRect& x2, int x3) const { void* fun = LObjects::overrideFun(unique, 233); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 233, args).toBool()) return; } QHeaderView::paintSection(x1, x2, x3); }
    QSize sectionSizeFromContents(int x1) const { void* fun = LObjects::overrideFun(unique, 234); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QSize>(callOverrideFun(fun, 234, args)); } return QHeaderView::sectionSizeFromContents(x1); }
    void reset() { void* fun = LObjects::overrideFun(unique, 148); if(fun) { if(callOverrideFun(fun, 148, 0).toBool()) return; } QHeaderView::reset(); }
    void setModel(QAbstractItemModel* x1) { void* fun = LObjects::overrideFun(unique, 79); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 79, args).toBool()) return; } QHeaderView::setModel(x1); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QHeaderView::sizeHint(); }
    void currentChanged(const QModelIndex& x1, const QModelIndex& x2) { void* fun = LObjects::overrideFun(unique, 177); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 177, args).toBool()) return; } QHeaderView::currentChanged(x1, x2); }
    int horizontalOffset() const { void* fun = LObjects::overrideFun(unique, 85); if(fun) { return callOverrideFun(fun, 85, 0).toInt(); } return QHeaderView::horizontalOffset(); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QHeaderView::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QHeaderView::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QHeaderView::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QHeaderView::mouseReleaseEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QHeaderView::paintEvent(x1); }
    void setSelection(const QRect& x1, QItemSelectionModel::SelectionFlags x2) { void* fun = LObjects::overrideFun(unique, 90); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 90, args).toBool()) return; } QHeaderView::setSelection(x1, x2); }
    int verticalOffset() const { void* fun = LObjects::overrideFun(unique, 92); if(fun) { return callOverrideFun(fun, 92, 0).toInt(); } return QHeaderView::verticalOffset(); }
    bool viewportEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 95); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 95, args).toBool(); } return QHeaderView::viewportEvent(x1); }
    QModelIndex indexAt(const QPoint& x1) const { void* fun = LObjects::overrideFun(unique, 76); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 76, args)); } return QModelIndex(); }
    void keyboardSearch(const QString& x1) { void* fun = LObjects::overrideFun(unique, 77); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 77, args).toBool()) return; } QHeaderView::keyboardSearch(x1); }
    void scrollTo(const QModelIndex& x1, ScrollHint x2 = EnsureVisible) { void* fun = LObjects::overrideFun(unique, 78); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 78, args).toBool()) return; }}
    void setSelectionModel(QItemSelectionModel* x1) { void* fun = LObjects::overrideFun(unique, 80); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 80, args).toBool()) return; } QHeaderView::setSelectionModel(x1); }
    int sizeHintForColumn(int x1) const { void* fun = LObjects::overrideFun(unique, 81); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 81, args).toInt(); } return QHeaderView::sizeHintForColumn(x1); }
    int sizeHintForRow(int x1) const { void* fun = LObjects::overrideFun(unique, 82); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 82, args).toInt(); } return QHeaderView::sizeHintForRow(x1); }
    QRect visualRect(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 83); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QRect>(callOverrideFun(fun, 83, args)); } return QRect(); }
    bool edit(const QModelIndex& x1, EditTrigger x2, QEvent* x3) { void* fun = LObjects::overrideFun(unique, 84); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 84, args).toBool(); } return QHeaderView::edit(x1, x2, x3); }
    bool isIndexHidden(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 86); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 86, args).toBool(); } return false; }
    QModelIndex moveCursor(CursorAction x1, Qt::KeyboardModifiers x2) { void* fun = LObjects::overrideFun(unique, 87); if(fun) { const void* args[] = { &x1, &x2 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 87, args)); } return QModelIndex(); }
    QModelIndexList selectedIndexes() const { void* fun = LObjects::overrideFun(unique, 88); if(fun) { return qVariantValue<QModelIndexList>(callOverrideFun(fun, 88, 0)); } return QHeaderView::selectedIndexes(); }
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex& x1, const QEvent* x2 = 0) const { void* fun = LObjects::overrideFun(unique, 89); if(fun) { const void* args[] = { &x1, &x2 }; return (QItemSelectionModel::SelectionFlags)callOverrideFun(fun, 89, args).toInt(); } return QHeaderView::selectionCommand(x1, x2); }
    void startDrag(Qt::DropActions x1) { void* fun = LObjects::overrideFun(unique, 91); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 91, args).toBool()) return; } QHeaderView::startDrag(x1); }
    QStyleOptionViewItem viewOptions() const { void* fun = LObjects::overrideFun(unique, 93); if(fun) { return qVariantValue<QStyleOptionViewItem>(callOverrideFun(fun, 93, 0)); } return QHeaderView::viewOptions(); }
    QRegion visualRegionForSelection(const QItemSelection& x1) const { void* fun = LObjects::overrideFun(unique, 94); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QRegion>(callOverrideFun(fun, 94, args)); } return QRegion(); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QHeaderView::inputMethodQuery(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QHeaderView::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QHeaderView::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QHeaderView::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QHeaderView::dropEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QHeaderView::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QHeaderView::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QHeaderView::focusOutEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QHeaderView::inputMethodEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QHeaderView::keyPressEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QHeaderView::resizeEvent(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QHeaderView::timerEvent(x1); }
    void scrollContentsBy(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 96); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 96, args).toBool()) return; } QHeaderView::scrollContentsBy(x1, x2); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QHeaderView::minimumSizeHint(); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QHeaderView::contextMenuEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QHeaderView::wheelEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QHeaderView::changeEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QHeaderView::heightForWidth(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QHeaderView::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QHeaderView::closeEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QHeaderView::enterEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QHeaderView::hideEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QHeaderView::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QHeaderView::leaveEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QHeaderView::moveEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QHeaderView::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QHeaderView::tabletEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QHeaderView::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QHeaderView::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QHeaderView::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QHeaderView::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QHeaderView::disconnectNotify(x1); }
};

class LHistoryState : public QHistoryState {
    Q_OBJECT
    friend class Q80;
public:
    LHistoryState(uint u, QState* x1 = 0) : QHistoryState(x1), unique(u) {}
    LHistoryState(uint u, HistoryType x1, QState* x2 = 0) : QHistoryState(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void onEntry(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 111); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 111, args).toBool()) return; } QHistoryState::onEntry(x1); }
    void onExit(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 112); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 112, args).toBool()) return; } QHistoryState::onExit(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QHistoryState::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QHistoryState::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QHistoryState::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QHistoryState::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QHistoryState::timerEvent(x1); }
};

class LIODevice : public QIODevice {
    Q_OBJECT
    friend class Q81;
public:

    static NumList overrideIds;
    uint unique;

    bool atEnd() const { void* fun = LObjects::overrideFun(unique, 143); if(fun) { return callOverrideFun(fun, 143, 0).toBool(); } return QIODevice::atEnd(); }
    bool canReadLine() const { void* fun = LObjects::overrideFun(unique, 144); if(fun) { return callOverrideFun(fun, 144, 0).toBool(); } return QIODevice::canReadLine(); }
    void close() { void* fun = LObjects::overrideFun(unique, 145); if(fun) { if(callOverrideFun(fun, 145, 0).toBool()) return; } QIODevice::close(); }
    bool isSequential() const { void* fun = LObjects::overrideFun(unique, 147); if(fun) { return callOverrideFun(fun, 147, 0).toBool(); } return QIODevice::isSequential(); }
    bool open(OpenMode x1) { void* fun = LObjects::overrideFun(unique, 146); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 146, args).toBool(); } return QIODevice::open(x1); }
    bool reset() { void* fun = LObjects::overrideFun(unique, 148); if(fun) { return callOverrideFun(fun, 148, 0).toBool(); } return QIODevice::reset(); }
    bool waitForBytesWritten(int x1) { void* fun = LObjects::overrideFun(unique, 149); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 149, args).toBool(); } return QIODevice::waitForBytesWritten(x1); }
    bool waitForReadyRead(int x1) { void* fun = LObjects::overrideFun(unique, 150); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 150, args).toBool(); } return QIODevice::waitForReadyRead(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QIODevice::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QIODevice::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QIODevice::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QIODevice::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QIODevice::timerEvent(x1); }
};

class LInputContext : public QInputContext {
    Q_OBJECT
    friend class Q82;
public:
    LInputContext(uint u, QObject* x1 = 0) : QInputContext(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QList<QAction*> actions() { void* fun = LObjects::overrideFun(unique, 235); if(fun) { return qVariantValue<QList<QAction*> >(callOverrideFun(fun, 235, 0)); } return QInputContext::actions(); }
    bool filterEvent(const QEvent* x1) { void* fun = LObjects::overrideFun(unique, 236); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 236, args).toBool(); } return QInputContext::filterEvent(x1); }
    QFont font() const { void* fun = LObjects::overrideFun(unique, 237); if(fun) { return qVariantValue<QFont>(callOverrideFun(fun, 237, 0)); } return QInputContext::font(); }
    QString identifierName() { void* fun = LObjects::overrideFun(unique, 238); if(fun) { return qVariantValue<QString>(callOverrideFun(fun, 238, 0)); } return QString(); }
    bool isComposing() const { void* fun = LObjects::overrideFun(unique, 239); if(fun) { return callOverrideFun(fun, 239, 0).toBool(); } return false; }
    QString language() { void* fun = LObjects::overrideFun(unique, 240); if(fun) { return qVariantValue<QString>(callOverrideFun(fun, 240, 0)); } return QString(); }
    void reset() { void* fun = LObjects::overrideFun(unique, 148); if(fun) { if(callOverrideFun(fun, 148, 0).toBool()) return; }}
    void setFocusWidget(QWidget* x1) { void* fun = LObjects::overrideFun(unique, 241); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 241, args).toBool()) return; } QInputContext::setFocusWidget(x1); }
    void update() { void* fun = LObjects::overrideFun(unique, 242); if(fun) { if(callOverrideFun(fun, 242, 0).toBool()) return; } QInputContext::update(); }
    void widgetDestroyed(QWidget* x1) { void* fun = LObjects::overrideFun(unique, 243); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 243, args).toBool()) return; } QInputContext::widgetDestroyed(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QInputContext::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QInputContext::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QInputContext::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QInputContext::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QInputContext::timerEvent(x1); }
};

class LInputDialog : public QInputDialog {
    Q_OBJECT
    friend class Q83;
public:
    LInputDialog(uint u, QWidget* x1 = 0, Qt::WindowFlags x2 = 0) : QInputDialog(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void done(int x1) { void* fun = LObjects::overrideFun(unique, 173); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 173, args).toBool()) return; } QInputDialog::done(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QInputDialog::minimumSizeHint(); }
    void setVisible(bool x1) { void* fun = LObjects::overrideFun(unique, 98); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 98, args).toBool()) return; } QInputDialog::setVisible(x1); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QInputDialog::sizeHint(); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QInputDialog::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QInputDialog::contextMenuEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QInputDialog::keyPressEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QInputDialog::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QInputDialog::showEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QInputDialog::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QInputDialog::inputMethodQuery(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QInputDialog::actionEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QInputDialog::changeEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QInputDialog::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QInputDialog::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QInputDialog::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QInputDialog::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QInputDialog::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QInputDialog::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QInputDialog::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QInputDialog::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QInputDialog::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QInputDialog::inputMethodEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QInputDialog::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QInputDialog::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QInputDialog::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QInputDialog::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QInputDialog::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QInputDialog::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QInputDialog::moveEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QInputDialog::paintEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QInputDialog::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QInputDialog::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QInputDialog::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QInputDialog::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QInputDialog::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QInputDialog::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QInputDialog::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QInputDialog::timerEvent(x1); }
};

class LIntValidator : public QIntValidator {
    Q_OBJECT
    friend class Q84;
public:
    LIntValidator(uint u, QObject* x1 = 0) : QIntValidator(x1), unique(u) {}
    LIntValidator(uint u, int x1, int x2, QObject* x3) : QIntValidator(x1, x2, x3), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void setRange(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 244); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 244, args).toBool()) return; } QIntValidator::setRange(x1, x2); }
    QValidator::State validate(QString& x1, int& x2) const { void* fun = LObjects::overrideFun(unique, 109); if(fun) { const void* args[] = { &x1, &x2 }; return (QValidator::State)callOverrideFun(fun, 109, args).toInt(); } return QIntValidator::validate(x1, x2); }
    void fixup(QString& x1) const { void* fun = LObjects::overrideFun(unique, 107); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 107, args).toBool()) return; } QIntValidator::fixup(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QIntValidator::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QIntValidator::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QIntValidator::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QIntValidator::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QIntValidator::timerEvent(x1); }
};

class LItemDelegate : public QItemDelegate {
    Q_OBJECT
    friend class Q85;
public:
    LItemDelegate(uint u, QObject* x1 = 0) : QItemDelegate(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void drawCheck(QPainter* x1, const QStyleOptionViewItem& x2, const QRect& x3, Qt::CheckState x4) const { void* fun = LObjects::overrideFun(unique, 245); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; if(callOverrideFun(fun, 245, args).toBool()) return; } QItemDelegate::drawCheck(x1, x2, x3, x4); }
    void drawDecoration(QPainter* x1, const QStyleOptionViewItem& x2, const QRect& x3, const QPixmap& x4) const { void* fun = LObjects::overrideFun(unique, 246); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; if(callOverrideFun(fun, 246, args).toBool()) return; } QItemDelegate::drawDecoration(x1, x2, x3, x4); }
    void drawDisplay(QPainter* x1, const QStyleOptionViewItem& x2, const QRect& x3, const QString& x4) const { void* fun = LObjects::overrideFun(unique, 247); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; if(callOverrideFun(fun, 247, args).toBool()) return; } QItemDelegate::drawDisplay(x1, x2, x3, x4); }
    void drawFocus(QPainter* x1, const QStyleOptionViewItem& x2, const QRect& x3) const { void* fun = LObjects::overrideFun(unique, 248); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 248, args).toBool()) return; } QItemDelegate::drawFocus(x1, x2, x3); }
    QWidget* createEditor(QWidget* x1, const QStyleOptionViewItem& x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 45); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return (QWidget*)qVariantValue<void*>(callOverrideFun(fun, 45, args)); } return QItemDelegate::createEditor(x1, x2, x3); }
    void paint(QPainter* x1, const QStyleOptionViewItem& x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 47); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 47, args).toBool()) return; } QItemDelegate::paint(x1, x2, x3); }
    void setEditorData(QWidget* x1, const QModelIndex& x2) const { void* fun = LObjects::overrideFun(unique, 48); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 48, args).toBool()) return; } QItemDelegate::setEditorData(x1, x2); }
    void setModelData(QWidget* x1, QAbstractItemModel* x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 49); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 49, args).toBool()) return; } QItemDelegate::setModelData(x1, x2, x3); }
    QSize sizeHint(const QStyleOptionViewItem& x1, const QModelIndex& x2) const { void* fun = LObjects::overrideFun(unique, 50); if(fun) { const void* args[] = { &x1, &x2 }; return qVariantValue<QSize>(callOverrideFun(fun, 50, args)); } return QItemDelegate::sizeHint(x1, x2); }
    void updateEditorGeometry(QWidget* x1, const QStyleOptionViewItem& x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 51); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 51, args).toBool()) return; } QItemDelegate::updateEditorGeometry(x1, x2, x3); }
    bool editorEvent(QEvent* x1, QAbstractItemModel* x2, const QStyleOptionViewItem& x3, const QModelIndex& x4) { void* fun = LObjects::overrideFun(unique, 46); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return callOverrideFun(fun, 46, args).toBool(); } return QItemDelegate::editorEvent(x1, x2, x3, x4); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QItemDelegate::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QItemDelegate::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QItemDelegate::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QItemDelegate::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QItemDelegate::timerEvent(x1); }
};

class LItemSelectionModel : public QItemSelectionModel {
    Q_OBJECT
    friend class Q86;
public:
    LItemSelectionModel(uint u, QAbstractItemModel* x1) : QItemSelectionModel(x1), unique(u) {}
    LItemSelectionModel(uint u, QAbstractItemModel* x1, QObject* x2) : QItemSelectionModel(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QItemSelectionModel::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QItemSelectionModel::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QItemSelectionModel::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QItemSelectionModel::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QItemSelectionModel::timerEvent(x1); }
};

class LKeyEventTransition : public QKeyEventTransition {
    Q_OBJECT
    friend class Q87;
public:
    LKeyEventTransition(uint u, QState* x1 = 0) : QKeyEventTransition(x1), unique(u) {}
    LKeyEventTransition(uint u, QObject* x1, QEvent::Type x2, int x3, QState* x4 = 0) : QKeyEventTransition(x1, x2, x3, x4), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool eventTest(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 123); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 123, args).toBool(); } return QKeyEventTransition::eventTest(x1); }
    void onTransition(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 124); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 124, args).toBool()) return; } QKeyEventTransition::onTransition(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QKeyEventTransition::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QKeyEventTransition::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QKeyEventTransition::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QKeyEventTransition::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QKeyEventTransition::timerEvent(x1); }
};

class LLCDNumber : public QLCDNumber {
    Q_OBJECT
    friend class Q88;
public:
    LLCDNumber(uint u, QWidget* x1 = 0) : QLCDNumber(x1), unique(u) {}
    LLCDNumber(uint u, uint x1, QWidget* x2 = 0) : QLCDNumber(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QLCDNumber::sizeHint(); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QLCDNumber::paintEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QLCDNumber::changeEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QLCDNumber::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QLCDNumber::inputMethodQuery(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QLCDNumber::minimumSizeHint(); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QLCDNumber::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QLCDNumber::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QLCDNumber::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QLCDNumber::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QLCDNumber::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QLCDNumber::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QLCDNumber::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QLCDNumber::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QLCDNumber::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QLCDNumber::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QLCDNumber::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QLCDNumber::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QLCDNumber::inputMethodEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QLCDNumber::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QLCDNumber::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QLCDNumber::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QLCDNumber::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QLCDNumber::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QLCDNumber::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QLCDNumber::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QLCDNumber::moveEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QLCDNumber::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QLCDNumber::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QLCDNumber::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QLCDNumber::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QLCDNumber::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QLCDNumber::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QLCDNumber::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QLCDNumber::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QLCDNumber::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QLCDNumber::timerEvent(x1); }
};

class LLabel : public QLabel {
    Q_OBJECT
    friend class Q89;
public:
    LLabel(uint u, QWidget* x1 = 0, Qt::WindowFlags x2 = 0) : QLabel(x1, x2), unique(u) {}
    LLabel(uint u, const QString& x1, QWidget* x2 = 0, Qt::WindowFlags x3 = 0) : QLabel(x1, x2, x3), unique(u) {}

    static NumList overrideIds;
    uint unique;

    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QLabel::heightForWidth(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QLabel::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QLabel::sizeHint(); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QLabel::changeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QLabel::contextMenuEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QLabel::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QLabel::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QLabel::focusOutEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QLabel::keyPressEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QLabel::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QLabel::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QLabel::mouseReleaseEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QLabel::paintEvent(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QLabel::inputMethodQuery(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QLabel::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QLabel::closeEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QLabel::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QLabel::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QLabel::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QLabel::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QLabel::enterEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QLabel::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QLabel::inputMethodEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QLabel::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QLabel::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QLabel::mouseDoubleClickEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QLabel::moveEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QLabel::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QLabel::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QLabel::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QLabel::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QLabel::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QLabel::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QLabel::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QLabel::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QLabel::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QLabel::timerEvent(x1); }
};

class LLibrary : public QLibrary {
    Q_OBJECT
    friend class Q91;
public:
    LLibrary(uint u, QObject* x1 = 0) : QLibrary(x1), unique(u) {}
    LLibrary(uint u, const QString& x1, QObject* x2 = 0) : QLibrary(x1, x2), unique(u) {}
    LLibrary(uint u, const QString& x1, int x2, QObject* x3 = 0) : QLibrary(x1, x2, x3), unique(u) {}
    LLibrary(uint u, const QString& x1, const QString& x2, QObject* x3 = 0) : QLibrary(x1, x2, x3), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QLibrary::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QLibrary::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QLibrary::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QLibrary::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QLibrary::timerEvent(x1); }
};

class LLineEdit : public QLineEdit {
    Q_OBJECT
    friend class Q92;
public:
    LLineEdit(uint u, QWidget* x1 = 0) : QLineEdit(x1), unique(u) {}
    LLineEdit(uint u, const QString& x1, QWidget* x2 = 0) : QLineEdit(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QLineEdit::inputMethodQuery(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QLineEdit::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QLineEdit::sizeHint(); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QLineEdit::changeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QLineEdit::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QLineEdit::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QLineEdit::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QLineEdit::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QLineEdit::dropEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QLineEdit::focusInEvent(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QLineEdit::focusOutEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QLineEdit::inputMethodEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QLineEdit::keyPressEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QLineEdit::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QLineEdit::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QLineEdit::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QLineEdit::mouseReleaseEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QLineEdit::paintEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QLineEdit::heightForWidth(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QLineEdit::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QLineEdit::closeEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QLineEdit::enterEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QLineEdit::focusNextPrevChild(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QLineEdit::hideEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QLineEdit::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QLineEdit::leaveEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QLineEdit::moveEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QLineEdit::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QLineEdit::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QLineEdit::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QLineEdit::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QLineEdit::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QLineEdit::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QLineEdit::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QLineEdit::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QLineEdit::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QLineEdit::timerEvent(x1); }
};

class LListView : public QListView {
    Q_OBJECT
    friend class Q93;
public:
    LListView(uint u, QWidget* x1 = 0) : QListView(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QModelIndex indexAt(const QPoint& x1) const { void* fun = LObjects::overrideFun(unique, 76); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 76, args)); } return QListView::indexAt(x1); }
    void scrollTo(const QModelIndex& x1, ScrollHint x2 = EnsureVisible) { void* fun = LObjects::overrideFun(unique, 78); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 78, args).toBool()) return; } QListView::scrollTo(x1, x2); }
    QRect visualRect(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 83); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QRect>(callOverrideFun(fun, 83, args)); } return QListView::visualRect(x1); }
    void currentChanged(const QModelIndex& x1, const QModelIndex& x2) { void* fun = LObjects::overrideFun(unique, 177); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 177, args).toBool()) return; } QListView::currentChanged(x1, x2); }
    void dataChanged(const QModelIndex& x1, const QModelIndex& x2) { void* fun = LObjects::overrideFun(unique, 249); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 249, args).toBool()) return; } QListView::dataChanged(x1, x2); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QListView::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QListView::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QListView::dropEvent(x1); }
    int horizontalOffset() const { void* fun = LObjects::overrideFun(unique, 85); if(fun) { return callOverrideFun(fun, 85, 0).toInt(); } return QListView::horizontalOffset(); }
    bool isIndexHidden(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 86); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 86, args).toBool(); } return QListView::isIndexHidden(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QListView::mouseMoveEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QListView::mouseReleaseEvent(x1); }
    QModelIndex moveCursor(CursorAction x1, Qt::KeyboardModifiers x2) { void* fun = LObjects::overrideFun(unique, 87); if(fun) { const void* args[] = { &x1, &x2 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 87, args)); } return QListView::moveCursor(x1, x2); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QListView::paintEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QListView::resizeEvent(x1); }
    void rowsAboutToBeRemoved(const QModelIndex& x1, int x2, int x3) { void* fun = LObjects::overrideFun(unique, 250); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 250, args).toBool()) return; } QListView::rowsAboutToBeRemoved(x1, x2, x3); }
    void rowsInserted(const QModelIndex& x1, int x2, int x3) { void* fun = LObjects::overrideFun(unique, 178); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 178, args).toBool()) return; } QListView::rowsInserted(x1, x2, x3); }
    QModelIndexList selectedIndexes() const { void* fun = LObjects::overrideFun(unique, 88); if(fun) { return qVariantValue<QModelIndexList>(callOverrideFun(fun, 88, 0)); } return QListView::selectedIndexes(); }
    void selectionChanged(const QItemSelection& x1, const QItemSelection& x2) { void* fun = LObjects::overrideFun(unique, 251); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 251, args).toBool()) return; } QListView::selectionChanged(x1, x2); }
    void setSelection(const QRect& x1, QItemSelectionModel::SelectionFlags x2) { void* fun = LObjects::overrideFun(unique, 90); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 90, args).toBool()) return; } QListView::setSelection(x1, x2); }
    void startDrag(Qt::DropActions x1) { void* fun = LObjects::overrideFun(unique, 91); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 91, args).toBool()) return; } QListView::startDrag(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QListView::timerEvent(x1); }
    void updateGeometries() { void* fun = LObjects::overrideFun(unique, 252); if(fun) { if(callOverrideFun(fun, 252, 0).toBool()) return; } QListView::updateGeometries(); }
    int verticalOffset() const { void* fun = LObjects::overrideFun(unique, 92); if(fun) { return callOverrideFun(fun, 92, 0).toInt(); } return QListView::verticalOffset(); }
    QStyleOptionViewItem viewOptions() const { void* fun = LObjects::overrideFun(unique, 93); if(fun) { return qVariantValue<QStyleOptionViewItem>(callOverrideFun(fun, 93, 0)); } return QListView::viewOptions(); }
    QRegion visualRegionForSelection(const QItemSelection& x1) const { void* fun = LObjects::overrideFun(unique, 94); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QRegion>(callOverrideFun(fun, 94, args)); } return QListView::visualRegionForSelection(x1); }
    void keyboardSearch(const QString& x1) { void* fun = LObjects::overrideFun(unique, 77); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 77, args).toBool()) return; } QListView::keyboardSearch(x1); }
    void setModel(QAbstractItemModel* x1) { void* fun = LObjects::overrideFun(unique, 79); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 79, args).toBool()) return; } QListView::setModel(x1); }
    void setSelectionModel(QItemSelectionModel* x1) { void* fun = LObjects::overrideFun(unique, 80); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 80, args).toBool()) return; } QListView::setSelectionModel(x1); }
    int sizeHintForColumn(int x1) const { void* fun = LObjects::overrideFun(unique, 81); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 81, args).toInt(); } return QListView::sizeHintForColumn(x1); }
    int sizeHintForRow(int x1) const { void* fun = LObjects::overrideFun(unique, 82); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 82, args).toInt(); } return QListView::sizeHintForRow(x1); }
    bool edit(const QModelIndex& x1, EditTrigger x2, QEvent* x3) { void* fun = LObjects::overrideFun(unique, 84); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 84, args).toBool(); } return QListView::edit(x1, x2, x3); }
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex& x1, const QEvent* x2 = 0) const { void* fun = LObjects::overrideFun(unique, 89); if(fun) { const void* args[] = { &x1, &x2 }; return (QItemSelectionModel::SelectionFlags)callOverrideFun(fun, 89, args).toInt(); } return QListView::selectionCommand(x1, x2); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QListView::inputMethodQuery(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QListView::dragEnterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QListView::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QListView::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QListView::focusOutEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QListView::inputMethodEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QListView::keyPressEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QListView::mouseDoubleClickEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QListView::mousePressEvent(x1); }
    bool viewportEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 95); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 95, args).toBool(); } return QListView::viewportEvent(x1); }
    void scrollContentsBy(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 96); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 96, args).toBool()) return; } QListView::scrollContentsBy(x1, x2); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QListView::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QListView::sizeHint(); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QListView::contextMenuEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QListView::wheelEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QListView::changeEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QListView::heightForWidth(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QListView::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QListView::closeEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QListView::enterEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QListView::hideEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QListView::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QListView::leaveEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QListView::moveEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QListView::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QListView::tabletEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QListView::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QListView::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QListView::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QListView::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QListView::disconnectNotify(x1); }
};

class LListWidget : public QListWidget {
    Q_OBJECT
    friend class Q94;
public:
    LListWidget(uint u, QWidget* x1 = 0) : QListWidget(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool dropMimeData(int x1, const QMimeData* x2, Qt::DropAction x3) { void* fun = LObjects::overrideFun(unique, 253); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 253, args).toBool(); } return QListWidget::dropMimeData(x1, x2, x3); }
    QMimeData* mimeData(const QList<QListWidgetItem*> x1) const { void* fun = LObjects::overrideFun(unique, 254); if(fun) { const void* args[] = { &x1 }; return (QMimeData*)qVariantValue<void*>(callOverrideFun(fun, 254, args)); } return QListWidget::mimeData(x1); }
    QStringList mimeTypes() const { void* fun = LObjects::overrideFun(unique, 66); if(fun) { return qVariantValue<QStringList>(callOverrideFun(fun, 66, 0)); } return QListWidget::mimeTypes(); }
    Qt::DropActions supportedDropActions() const { void* fun = LObjects::overrideFun(unique, 75); if(fun) { return (Qt::DropActions)callOverrideFun(fun, 75, 0).toInt(); } return QListWidget::supportedDropActions(); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QListWidget::dropEvent(x1); }
    QModelIndex indexAt(const QPoint& x1) const { void* fun = LObjects::overrideFun(unique, 76); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 76, args)); } return QListWidget::indexAt(x1); }
    void scrollTo(const QModelIndex& x1, ScrollHint x2 = EnsureVisible) { void* fun = LObjects::overrideFun(unique, 78); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 78, args).toBool()) return; } QListWidget::scrollTo(x1, x2); }
    QRect visualRect(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 83); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QRect>(callOverrideFun(fun, 83, args)); } return QListWidget::visualRect(x1); }
    void currentChanged(const QModelIndex& x1, const QModelIndex& x2) { void* fun = LObjects::overrideFun(unique, 177); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 177, args).toBool()) return; } QListWidget::currentChanged(x1, x2); }
    void dataChanged(const QModelIndex& x1, const QModelIndex& x2) { void* fun = LObjects::overrideFun(unique, 249); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 249, args).toBool()) return; } QListWidget::dataChanged(x1, x2); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QListWidget::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QListWidget::dragMoveEvent(x1); }
    int horizontalOffset() const { void* fun = LObjects::overrideFun(unique, 85); if(fun) { return callOverrideFun(fun, 85, 0).toInt(); } return QListWidget::horizontalOffset(); }
    bool isIndexHidden(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 86); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 86, args).toBool(); } return QListWidget::isIndexHidden(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QListWidget::mouseMoveEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QListWidget::mouseReleaseEvent(x1); }
    QModelIndex moveCursor(CursorAction x1, Qt::KeyboardModifiers x2) { void* fun = LObjects::overrideFun(unique, 87); if(fun) { const void* args[] = { &x1, &x2 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 87, args)); } return QListWidget::moveCursor(x1, x2); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QListWidget::paintEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QListWidget::resizeEvent(x1); }
    void rowsAboutToBeRemoved(const QModelIndex& x1, int x2, int x3) { void* fun = LObjects::overrideFun(unique, 250); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 250, args).toBool()) return; } QListWidget::rowsAboutToBeRemoved(x1, x2, x3); }
    void rowsInserted(const QModelIndex& x1, int x2, int x3) { void* fun = LObjects::overrideFun(unique, 178); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 178, args).toBool()) return; } QListWidget::rowsInserted(x1, x2, x3); }
    QModelIndexList selectedIndexes() const { void* fun = LObjects::overrideFun(unique, 88); if(fun) { return qVariantValue<QModelIndexList>(callOverrideFun(fun, 88, 0)); } return QListWidget::selectedIndexes(); }
    void selectionChanged(const QItemSelection& x1, const QItemSelection& x2) { void* fun = LObjects::overrideFun(unique, 251); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 251, args).toBool()) return; } QListWidget::selectionChanged(x1, x2); }
    void setSelection(const QRect& x1, QItemSelectionModel::SelectionFlags x2) { void* fun = LObjects::overrideFun(unique, 90); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 90, args).toBool()) return; } QListWidget::setSelection(x1, x2); }
    void startDrag(Qt::DropActions x1) { void* fun = LObjects::overrideFun(unique, 91); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 91, args).toBool()) return; } QListWidget::startDrag(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QListWidget::timerEvent(x1); }
    void updateGeometries() { void* fun = LObjects::overrideFun(unique, 252); if(fun) { if(callOverrideFun(fun, 252, 0).toBool()) return; } QListWidget::updateGeometries(); }
    int verticalOffset() const { void* fun = LObjects::overrideFun(unique, 92); if(fun) { return callOverrideFun(fun, 92, 0).toInt(); } return QListWidget::verticalOffset(); }
    QStyleOptionViewItem viewOptions() const { void* fun = LObjects::overrideFun(unique, 93); if(fun) { return qVariantValue<QStyleOptionViewItem>(callOverrideFun(fun, 93, 0)); } return QListWidget::viewOptions(); }
    QRegion visualRegionForSelection(const QItemSelection& x1) const { void* fun = LObjects::overrideFun(unique, 94); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QRegion>(callOverrideFun(fun, 94, args)); } return QListWidget::visualRegionForSelection(x1); }
    void keyboardSearch(const QString& x1) { void* fun = LObjects::overrideFun(unique, 77); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 77, args).toBool()) return; } QListWidget::keyboardSearch(x1); }
    void setSelectionModel(QItemSelectionModel* x1) { void* fun = LObjects::overrideFun(unique, 80); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 80, args).toBool()) return; } QListWidget::setSelectionModel(x1); }
    int sizeHintForColumn(int x1) const { void* fun = LObjects::overrideFun(unique, 81); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 81, args).toInt(); } return QListWidget::sizeHintForColumn(x1); }
    int sizeHintForRow(int x1) const { void* fun = LObjects::overrideFun(unique, 82); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 82, args).toInt(); } return QListWidget::sizeHintForRow(x1); }
    bool edit(const QModelIndex& x1, EditTrigger x2, QEvent* x3) { void* fun = LObjects::overrideFun(unique, 84); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 84, args).toBool(); } return QListWidget::edit(x1, x2, x3); }
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex& x1, const QEvent* x2 = 0) const { void* fun = LObjects::overrideFun(unique, 89); if(fun) { const void* args[] = { &x1, &x2 }; return (QItemSelectionModel::SelectionFlags)callOverrideFun(fun, 89, args).toInt(); } return QListWidget::selectionCommand(x1, x2); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QListWidget::inputMethodQuery(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QListWidget::dragEnterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QListWidget::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QListWidget::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QListWidget::focusOutEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QListWidget::inputMethodEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QListWidget::keyPressEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QListWidget::mouseDoubleClickEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QListWidget::mousePressEvent(x1); }
    bool viewportEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 95); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 95, args).toBool(); } return QListWidget::viewportEvent(x1); }
    void scrollContentsBy(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 96); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 96, args).toBool()) return; } QListWidget::scrollContentsBy(x1, x2); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QListWidget::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QListWidget::sizeHint(); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QListWidget::contextMenuEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QListWidget::wheelEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QListWidget::changeEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QListWidget::heightForWidth(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QListWidget::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QListWidget::closeEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QListWidget::enterEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QListWidget::hideEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QListWidget::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QListWidget::leaveEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QListWidget::moveEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QListWidget::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QListWidget::tabletEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QListWidget::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QListWidget::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QListWidget::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QListWidget::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QListWidget::disconnectNotify(x1); }
};

class LMainWindow : public QMainWindow {
    Q_OBJECT
    friend class Q95;
public:
    LMainWindow(uint u, QWidget* x1 = 0, Qt::WindowFlags x2 = 0) : QMainWindow(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QMenu* createPopupMenu() { void* fun = LObjects::overrideFun(unique, 255); if(fun) { return (QMenu*)qVariantValue<void*>(callOverrideFun(fun, 255, 0)); } return QMainWindow::createPopupMenu(); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QMainWindow::contextMenuEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QMainWindow::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QMainWindow::inputMethodQuery(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QMainWindow::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QMainWindow::sizeHint(); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QMainWindow::actionEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QMainWindow::changeEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QMainWindow::closeEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QMainWindow::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QMainWindow::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QMainWindow::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QMainWindow::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QMainWindow::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QMainWindow::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QMainWindow::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QMainWindow::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QMainWindow::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QMainWindow::inputMethodEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QMainWindow::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QMainWindow::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QMainWindow::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QMainWindow::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QMainWindow::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QMainWindow::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QMainWindow::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QMainWindow::moveEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QMainWindow::paintEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QMainWindow::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QMainWindow::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QMainWindow::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QMainWindow::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QMainWindow::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QMainWindow::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QMainWindow::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QMainWindow::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QMainWindow::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QMainWindow::timerEvent(x1); }
};

class LMdiArea : public QMdiArea {
    Q_OBJECT
    friend class Q96;
public:
    LMdiArea(uint u, QWidget* x1 = 0) : QMdiArea(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QMdiArea::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QMdiArea::sizeHint(); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QMdiArea::childEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QMdiArea::paintEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QMdiArea::resizeEvent(x1); }
    void scrollContentsBy(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 96); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 96, args).toBool()) return; } QMdiArea::scrollContentsBy(x1, x2); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QMdiArea::showEvent(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QMdiArea::timerEvent(x1); }
    bool viewportEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 95); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 95, args).toBool(); } return QMdiArea::viewportEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QMdiArea::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QMdiArea::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QMdiArea::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QMdiArea::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QMdiArea::dropEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QMdiArea::keyPressEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QMdiArea::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QMdiArea::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QMdiArea::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QMdiArea::mouseReleaseEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QMdiArea::wheelEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QMdiArea::changeEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QMdiArea::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QMdiArea::inputMethodQuery(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QMdiArea::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QMdiArea::closeEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QMdiArea::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QMdiArea::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QMdiArea::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QMdiArea::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QMdiArea::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QMdiArea::inputMethodEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QMdiArea::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QMdiArea::leaveEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QMdiArea::moveEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QMdiArea::tabletEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QMdiArea::metric(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QMdiArea::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QMdiArea::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QMdiArea::disconnectNotify(x1); }
};

class LMdiSubWindow : public QMdiSubWindow {
    Q_OBJECT
    friend class Q97;
public:
    LMdiSubWindow(uint u, QWidget* x1 = 0, Qt::WindowFlags x2 = 0) : QMdiSubWindow(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QMdiSubWindow::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QMdiSubWindow::sizeHint(); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QMdiSubWindow::changeEvent(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QMdiSubWindow::childEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QMdiSubWindow::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QMdiSubWindow::contextMenuEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QMdiSubWindow::focusInEvent(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QMdiSubWindow::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QMdiSubWindow::hideEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QMdiSubWindow::keyPressEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QMdiSubWindow::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QMdiSubWindow::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QMdiSubWindow::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QMdiSubWindow::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QMdiSubWindow::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QMdiSubWindow::moveEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QMdiSubWindow::paintEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QMdiSubWindow::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QMdiSubWindow::showEvent(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QMdiSubWindow::timerEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QMdiSubWindow::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QMdiSubWindow::inputMethodQuery(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QMdiSubWindow::actionEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QMdiSubWindow::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QMdiSubWindow::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QMdiSubWindow::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QMdiSubWindow::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QMdiSubWindow::enterEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QMdiSubWindow::focusNextPrevChild(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QMdiSubWindow::inputMethodEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QMdiSubWindow::keyReleaseEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QMdiSubWindow::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QMdiSubWindow::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QMdiSubWindow::metric(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QMdiSubWindow::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QMdiSubWindow::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QMdiSubWindow::disconnectNotify(x1); }
};

class LMenu : public QMenu {
    Q_OBJECT
    friend class Q98;
public:
    LMenu(uint u, QWidget* x1 = 0) : QMenu(x1), unique(u) {}
    LMenu(uint u, const QString& x1, QWidget* x2 = 0) : QMenu(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QMenu::sizeHint(); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QMenu::actionEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QMenu::changeEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QMenu::enterEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QMenu::focusNextPrevChild(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QMenu::hideEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QMenu::keyPressEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QMenu::leaveEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QMenu::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QMenu::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QMenu::mouseReleaseEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QMenu::paintEvent(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QMenu::timerEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QMenu::wheelEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QMenu::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QMenu::inputMethodQuery(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QMenu::minimumSizeHint(); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QMenu::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QMenu::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QMenu::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QMenu::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QMenu::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QMenu::dropEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QMenu::focusInEvent(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QMenu::focusOutEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QMenu::inputMethodEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QMenu::keyReleaseEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QMenu::mouseDoubleClickEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QMenu::moveEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QMenu::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QMenu::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QMenu::tabletEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QMenu::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QMenu::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QMenu::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QMenu::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QMenu::disconnectNotify(x1); }
};

class LMenuBar : public QMenuBar {
    Q_OBJECT
    friend class Q99;
public:
    LMenuBar(uint u, QWidget* x1 = 0) : QMenuBar(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QMenuBar::heightForWidth(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QMenuBar::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QMenuBar::sizeHint(); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QMenuBar::actionEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QMenuBar::changeEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QMenuBar::focusInEvent(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QMenuBar::focusOutEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QMenuBar::keyPressEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QMenuBar::leaveEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QMenuBar::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QMenuBar::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QMenuBar::mouseReleaseEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QMenuBar::paintEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QMenuBar::resizeEvent(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QMenuBar::timerEvent(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QMenuBar::inputMethodQuery(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QMenuBar::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QMenuBar::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QMenuBar::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QMenuBar::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QMenuBar::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QMenuBar::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QMenuBar::enterEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QMenuBar::focusNextPrevChild(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QMenuBar::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QMenuBar::inputMethodEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QMenuBar::keyReleaseEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QMenuBar::mouseDoubleClickEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QMenuBar::moveEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QMenuBar::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QMenuBar::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QMenuBar::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QMenuBar::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QMenuBar::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QMenuBar::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QMenuBar::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QMenuBar::disconnectNotify(x1); }
};

class LMessageBox : public QMessageBox {
    Q_OBJECT
    friend class Q100;
public:
    LMessageBox(uint u, QWidget* x1 = 0) : QMessageBox(x1), unique(u) {}
    LMessageBox(uint u, Icon x1, const QString& x2, const QString& x3, StandardButtons x4 = NoButton, QWidget* x5 = 0, Qt::WindowFlags x6 = Qt::Dialog|Qt::MSWindowsFixedSizeDialogHint) : QMessageBox(x1, x2, x3, x4, x5, x6), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void setVisible(bool x1) { void* fun = LObjects::overrideFun(unique, 98); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 98, args).toBool()) return; } QMessageBox::setVisible(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QMessageBox::changeEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QMessageBox::closeEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QMessageBox::keyPressEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QMessageBox::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QMessageBox::showEvent(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QMessageBox::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QMessageBox::sizeHint(); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QMessageBox::contextMenuEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QMessageBox::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QMessageBox::inputMethodQuery(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QMessageBox::actionEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QMessageBox::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QMessageBox::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QMessageBox::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QMessageBox::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QMessageBox::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QMessageBox::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QMessageBox::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QMessageBox::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QMessageBox::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QMessageBox::inputMethodEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QMessageBox::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QMessageBox::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QMessageBox::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QMessageBox::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QMessageBox::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QMessageBox::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QMessageBox::moveEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QMessageBox::paintEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QMessageBox::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QMessageBox::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QMessageBox::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QMessageBox::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QMessageBox::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QMessageBox::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QMessageBox::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QMessageBox::timerEvent(x1); }
};

class LMimeData : public QMimeData {
    Q_OBJECT
    friend class Q101;
public:
    LMimeData(uint u) : unique(u) {}

    static NumList overrideIds;
    uint unique;

    QStringList formats() const { void* fun = LObjects::overrideFun(unique, 256); if(fun) { return qVariantValue<QStringList>(callOverrideFun(fun, 256, 0)); } return QMimeData::formats(); }
    bool hasFormat(const QString& x1) const { void* fun = LObjects::overrideFun(unique, 257); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 257, args).toBool(); } return QMimeData::hasFormat(x1); }
    QVariant retrieveData(const QString& x1, QVariant::Type x2) const { void* fun = LObjects::overrideFun(unique, 258); if(fun) { const void* args[] = { &x1, &x2 }; return qVariantValue<QVariant>(callOverrideFun(fun, 258, args)); } return QMimeData::retrieveData(x1, x2); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QMimeData::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QMimeData::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QMimeData::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QMimeData::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QMimeData::timerEvent(x1); }
};

class LMotifStyle : public QMotifStyle {
    Q_OBJECT
    friend class Q102;
public:
    LMotifStyle(uint u, bool x1 = false) : QMotifStyle(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void drawComplexControl(ComplexControl x1, const QStyleOptionComplex* x2, QPainter* x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 155); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; if(callOverrideFun(fun, 155, args).toBool()) return; } QMotifStyle::drawComplexControl(x1, x2, x3, x4); }
    void drawControl(ControlElement x1, const QStyleOption* x2, QPainter* x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 151); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; if(callOverrideFun(fun, 151, args).toBool()) return; } QMotifStyle::drawControl(x1, x2, x3, x4); }
    void drawPrimitive(PrimitiveElement x1, const QStyleOption* x2, QPainter* x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 152); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; if(callOverrideFun(fun, 152, args).toBool()) return; } QMotifStyle::drawPrimitive(x1, x2, x3, x4); }
    int pixelMetric(PixelMetric x1, const QStyleOption* x2 = 0, const QWidget* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 153); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 153, args).toInt(); } return QMotifStyle::pixelMetric(x1, x2, x3); }
    void polish(QPalette& x1) { void* fun = LObjects::overrideFun(unique, 156); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 156, args).toBool()) return; } QMotifStyle::polish(x1); }
    QSize sizeFromContents(ContentsType x1, const QStyleOption* x2, const QSize& x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 157); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return qVariantValue<QSize>(callOverrideFun(fun, 157, args)); } return QMotifStyle::sizeFromContents(x1, x2, x3, x4); }
    QPalette standardPalette() const { void* fun = LObjects::overrideFun(unique, 154); if(fun) { return qVariantValue<QPalette>(callOverrideFun(fun, 154, 0)); } return QMotifStyle::standardPalette(); }
    QPixmap standardPixmap(StandardPixmap x1, const QStyleOption* x2, const QWidget* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 158); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QPixmap>(callOverrideFun(fun, 158, args)); } return QMotifStyle::standardPixmap(x1, x2, x3); }
    int styleHint(StyleHint x1, const QStyleOption* x2 = 0, const QWidget* x3 = 0, QStyleHintReturn* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 159); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return callOverrideFun(fun, 159, args).toInt(); } return QMotifStyle::styleHint(x1, x2, x3, x4); }
    QRect subControlRect(ComplexControl x1, const QStyleOptionComplex* x2, SubControl x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 160); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return qVariantValue<QRect>(callOverrideFun(fun, 160, args)); } return QMotifStyle::subControlRect(x1, x2, x3, x4); }
    QRect subElementRect(SubElement x1, const QStyleOption* x2, const QWidget* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 161); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QRect>(callOverrideFun(fun, 161, args)); } return QMotifStyle::subElementRect(x1, x2, x3); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QMotifStyle::timerEvent(x1); }
    QPixmap generatedIconPixmap(QIcon::Mode x1, const QPixmap& x2, const QStyleOption* x3) const { void* fun = LObjects::overrideFun(unique, 162); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QPixmap>(callOverrideFun(fun, 162, args)); } return QMotifStyle::generatedIconPixmap(x1, x2, x3); }
    SubControl hitTestComplexControl(ComplexControl x1, const QStyleOptionComplex* x2, const QPoint& x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 163); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return (SubControl)callOverrideFun(fun, 163, args).toInt(); } return QMotifStyle::hitTestComplexControl(x1, x2, x3, x4); }
    void unpolish(QWidget* x1) { void* fun = LObjects::overrideFun(unique, 166); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 166, args).toBool()) return; } QMotifStyle::unpolish(x1); }
    void drawItemPixmap(QPainter* x1, const QRect& x2, int x3, const QPixmap& x4) const { void* fun = LObjects::overrideFun(unique, 168); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; if(callOverrideFun(fun, 168, args).toBool()) return; } QMotifStyle::drawItemPixmap(x1, x2, x3, x4); }
    void drawItemText(QPainter* x1, const QRect& x2, int x3, const QPalette& x4, bool x5, const QString& x6, QPalette::ColorRole x7 = QPalette::NoRole) const { void* fun = LObjects::overrideFun(unique, 169); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5, &x6, &x7 }; if(callOverrideFun(fun, 169, args).toBool()) return; } QMotifStyle::drawItemText(x1, x2, x3, x4, x5, x6, x7); }
    QRect itemPixmapRect(const QRect& x1, int x2, const QPixmap& x3) const { void* fun = LObjects::overrideFun(unique, 170); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QRect>(callOverrideFun(fun, 170, args)); } return QMotifStyle::itemPixmapRect(x1, x2, x3); }
    QRect itemTextRect(const QFontMetrics& x1, const QRect& x2, int x3, bool x4, const QString& x5) const { void* fun = LObjects::overrideFun(unique, 171); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; return qVariantValue<QRect>(callOverrideFun(fun, 171, args)); } return QMotifStyle::itemTextRect(x1, x2, x3, x4, x5); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QMotifStyle::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QMotifStyle::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QMotifStyle::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QMotifStyle::disconnectNotify(x1); }
};

class LMouseEventTransition : public QMouseEventTransition {
    Q_OBJECT
    friend class Q103;
public:
    LMouseEventTransition(uint u, QState* x1 = 0) : QMouseEventTransition(x1), unique(u) {}
    LMouseEventTransition(uint u, QObject* x1, QEvent::Type x2, Qt::MouseButton x3, QState* x4 = 0) : QMouseEventTransition(x1, x2, x3, x4), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool eventTest(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 123); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 123, args).toBool(); } return QMouseEventTransition::eventTest(x1); }
    void onTransition(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 124); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 124, args).toBool()) return; } QMouseEventTransition::onTransition(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QMouseEventTransition::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QMouseEventTransition::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QMouseEventTransition::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QMouseEventTransition::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QMouseEventTransition::timerEvent(x1); }
};

class LMovie : public QMovie {
    Q_OBJECT
    friend class Q104;
public:
    LMovie(uint u, QObject* x1 = 0) : QMovie(x1), unique(u) {}
    LMovie(uint u, const QString& x1, const QByteArray& x2 = QByteArray(), QObject* x3 = 0) : QMovie(x1, x2, x3), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QMovie::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QMovie::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QMovie::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QMovie::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QMovie::timerEvent(x1); }
};

class LObject : public QObject {
    Q_OBJECT
    friend class Q105;
public:
    LObject(uint u, QObject* x1 = 0) : QObject(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QObject::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QObject::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QObject::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QObject::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QObject::timerEvent(x1); }
};

class LPageSetupDialog : public QPageSetupDialog {
    Q_OBJECT
    friend class Q106;
public:
    LPageSetupDialog(uint u, QPrinter* x1, QWidget* x2 = 0) : QPageSetupDialog(x1, x2), unique(u) {}
    LPageSetupDialog(uint u, QWidget* x1 = 0) : QPageSetupDialog(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void setVisible(bool x1) { void* fun = LObjects::overrideFun(unique, 98); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 98, args).toBool()) return; } QPageSetupDialog::setVisible(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QPageSetupDialog::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QPageSetupDialog::sizeHint(); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QPageSetupDialog::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QPageSetupDialog::contextMenuEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QPageSetupDialog::keyPressEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QPageSetupDialog::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QPageSetupDialog::showEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QPageSetupDialog::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QPageSetupDialog::inputMethodQuery(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QPageSetupDialog::actionEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QPageSetupDialog::changeEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QPageSetupDialog::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QPageSetupDialog::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QPageSetupDialog::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QPageSetupDialog::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QPageSetupDialog::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QPageSetupDialog::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QPageSetupDialog::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QPageSetupDialog::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QPageSetupDialog::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QPageSetupDialog::inputMethodEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QPageSetupDialog::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QPageSetupDialog::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QPageSetupDialog::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QPageSetupDialog::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QPageSetupDialog::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QPageSetupDialog::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QPageSetupDialog::moveEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QPageSetupDialog::paintEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QPageSetupDialog::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QPageSetupDialog::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QPageSetupDialog::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QPageSetupDialog::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QPageSetupDialog::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QPageSetupDialog::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QPageSetupDialog::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QPageSetupDialog::timerEvent(x1); }
};

class LPanGesture : public QPanGesture {
    Q_OBJECT
    friend class Q107;
public:

    static NumList overrideIds;
    uint unique;

    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QPanGesture::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QPanGesture::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QPanGesture::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QPanGesture::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QPanGesture::timerEvent(x1); }
};

class LParallelAnimationGroup : public QParallelAnimationGroup {
    Q_OBJECT
    friend class Q108;
public:
    LParallelAnimationGroup(uint u, QObject* x1 = 0) : QParallelAnimationGroup(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    int duration() const { void* fun = LObjects::overrideFun(unique, 1); if(fun) { return callOverrideFun(fun, 1, 0).toInt(); } return QParallelAnimationGroup::duration(); }
    void updateCurrentTime(int x1) { void* fun = LObjects::overrideFun(unique, 2); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 2, args).toBool()) return; } QParallelAnimationGroup::updateCurrentTime(x1); }
    void updateDirection(QAbstractAnimation::Direction x1) { void* fun = LObjects::overrideFun(unique, 3); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 3, args).toBool()) return; } QParallelAnimationGroup::updateDirection(x1); }
    void updateState(QAbstractAnimation::State x1, QAbstractAnimation::State x2) { void* fun = LObjects::overrideFun(unique, 4); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 4, args).toBool()) return; } QParallelAnimationGroup::updateState(x1, x2); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QParallelAnimationGroup::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QParallelAnimationGroup::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QParallelAnimationGroup::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QParallelAnimationGroup::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QParallelAnimationGroup::timerEvent(x1); }
};

class LPauseAnimation : public QPauseAnimation {
    Q_OBJECT
    friend class Q109;
public:
    LPauseAnimation(uint u, QObject* x1 = 0) : QPauseAnimation(x1), unique(u) {}
    LPauseAnimation(uint u, int x1, QObject* x2 = 0) : QPauseAnimation(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    int duration() const { void* fun = LObjects::overrideFun(unique, 1); if(fun) { return callOverrideFun(fun, 1, 0).toInt(); } return QPauseAnimation::duration(); }
    void updateCurrentTime(int x1) { void* fun = LObjects::overrideFun(unique, 2); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 2, args).toBool()) return; } QPauseAnimation::updateCurrentTime(x1); }
    void updateDirection(QAbstractAnimation::Direction x1) { void* fun = LObjects::overrideFun(unique, 3); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 3, args).toBool()) return; } QPauseAnimation::updateDirection(x1); }
    void updateState(QAbstractAnimation::State x1, QAbstractAnimation::State x2) { void* fun = LObjects::overrideFun(unique, 4); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 4, args).toBool()) return; } QPauseAnimation::updateState(x1, x2); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QPauseAnimation::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QPauseAnimation::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QPauseAnimation::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QPauseAnimation::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QPauseAnimation::timerEvent(x1); }
};

class LPinchGesture : public QPinchGesture {
    Q_OBJECT
    friend class Q110;
public:

    static NumList overrideIds;
    uint unique;

    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QPinchGesture::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QPinchGesture::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QPinchGesture::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QPinchGesture::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QPinchGesture::timerEvent(x1); }
};

class LPlainTextDocumentLayout : public QPlainTextDocumentLayout {
    Q_OBJECT
    friend class Q111;
public:
    LPlainTextDocumentLayout(uint u, QTextDocument* x1) : QPlainTextDocumentLayout(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QRectF blockBoundingRect(const QTextBlock& x1) const { void* fun = LObjects::overrideFun(unique, 113); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QRectF>(callOverrideFun(fun, 113, args)); } return QPlainTextDocumentLayout::blockBoundingRect(x1); }
    QSizeF documentSize() const { void* fun = LObjects::overrideFun(unique, 114); if(fun) { return qVariantValue<QSizeF>(callOverrideFun(fun, 114, 0)); } return QPlainTextDocumentLayout::documentSize(); }
    void draw(QPainter* x1, const PaintContext& x2) { void* fun = LObjects::overrideFun(unique, 115); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 115, args).toBool()) return; } QPlainTextDocumentLayout::draw(x1, x2); }
    QRectF frameBoundingRect(QTextFrame* x1) const { void* fun = LObjects::overrideFun(unique, 116); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QRectF>(callOverrideFun(fun, 116, args)); } return QPlainTextDocumentLayout::frameBoundingRect(x1); }
    int hitTest(const QPointF& x1, Qt::HitTestAccuracy x2) const { void* fun = LObjects::overrideFun(unique, 117); if(fun) { const void* args[] = { &x1, &x2 }; return callOverrideFun(fun, 117, args).toInt(); } return QPlainTextDocumentLayout::hitTest(x1, x2); }
    int pageCount() const { void* fun = LObjects::overrideFun(unique, 118); if(fun) { return callOverrideFun(fun, 118, 0).toInt(); } return QPlainTextDocumentLayout::pageCount(); }
    void documentChanged(int x1, int x2, int x3) { void* fun = LObjects::overrideFun(unique, 119); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 119, args).toBool()) return; } QPlainTextDocumentLayout::documentChanged(x1, x2, x3); }
    void drawInlineObject(QPainter* x1, const QRectF& x2, QTextInlineObject x3, int x4, const QTextFormat& x5) { void* fun = LObjects::overrideFun(unique, 120); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; if(callOverrideFun(fun, 120, args).toBool()) return; } QPlainTextDocumentLayout::drawInlineObject(x1, x2, x3, x4, x5); }
    void positionInlineObject(QTextInlineObject x1, int x2, const QTextFormat& x3) { void* fun = LObjects::overrideFun(unique, 121); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 121, args).toBool()) return; } QPlainTextDocumentLayout::positionInlineObject(x1, x2, x3); }
    void resizeInlineObject(QTextInlineObject x1, int x2, const QTextFormat& x3) { void* fun = LObjects::overrideFun(unique, 122); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 122, args).toBool()) return; } QPlainTextDocumentLayout::resizeInlineObject(x1, x2, x3); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QPlainTextDocumentLayout::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QPlainTextDocumentLayout::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QPlainTextDocumentLayout::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QPlainTextDocumentLayout::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QPlainTextDocumentLayout::timerEvent(x1); }
};

class LPlainTextEdit : public QPlainTextEdit {
    Q_OBJECT
    friend class Q112;
public:
    LPlainTextEdit(uint u, QWidget* x1 = 0) : QPlainTextEdit(x1), unique(u) {}
    LPlainTextEdit(uint u, const QString& x1, QWidget* x2 = 0) : QPlainTextEdit(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QVariant loadResource(int x1, const QUrl& x2) { void* fun = LObjects::overrideFun(unique, 259); if(fun) { const void* args[] = { &x1, &x2 }; return qVariantValue<QVariant>(callOverrideFun(fun, 259, args)); } return QPlainTextEdit::loadResource(x1, x2); }
    bool canInsertFromMimeData(const QMimeData* x1) const { void* fun = LObjects::overrideFun(unique, 260); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 260, args).toBool(); } return QPlainTextEdit::canInsertFromMimeData(x1); }
    QMimeData* createMimeDataFromSelection() const { void* fun = LObjects::overrideFun(unique, 261); if(fun) { return (QMimeData*)qVariantValue<void*>(callOverrideFun(fun, 261, 0)); } return QPlainTextEdit::createMimeDataFromSelection(); }
    void insertFromMimeData(const QMimeData* x1) { void* fun = LObjects::overrideFun(unique, 262); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 262, args).toBool()) return; } QPlainTextEdit::insertFromMimeData(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QPlainTextEdit::changeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QPlainTextEdit::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QPlainTextEdit::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QPlainTextEdit::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QPlainTextEdit::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QPlainTextEdit::dropEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QPlainTextEdit::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QPlainTextEdit::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QPlainTextEdit::focusOutEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QPlainTextEdit::inputMethodEvent(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QPlainTextEdit::inputMethodQuery(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QPlainTextEdit::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QPlainTextEdit::keyReleaseEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QPlainTextEdit::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QPlainTextEdit::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QPlainTextEdit::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QPlainTextEdit::mouseReleaseEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QPlainTextEdit::paintEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QPlainTextEdit::resizeEvent(x1); }
    void scrollContentsBy(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 96); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 96, args).toBool()) return; } QPlainTextEdit::scrollContentsBy(x1, x2); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QPlainTextEdit::showEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QPlainTextEdit::wheelEvent(x1); }
    bool viewportEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 95); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 95, args).toBool(); } return QPlainTextEdit::viewportEvent(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QPlainTextEdit::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QPlainTextEdit::sizeHint(); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QPlainTextEdit::heightForWidth(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QPlainTextEdit::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QPlainTextEdit::closeEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QPlainTextEdit::enterEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QPlainTextEdit::hideEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QPlainTextEdit::leaveEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QPlainTextEdit::moveEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QPlainTextEdit::tabletEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QPlainTextEdit::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QPlainTextEdit::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QPlainTextEdit::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QPlainTextEdit::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QPlainTextEdit::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QPlainTextEdit::timerEvent(x1); }
};

class LPlastiqueStyle : public QPlastiqueStyle {
    Q_OBJECT
    friend class Q113;
public:
    LPlastiqueStyle(uint u) : unique(u) {}

    static NumList overrideIds;
    uint unique;

    void drawComplexControl(ComplexControl x1, const QStyleOptionComplex* x2, QPainter* x3, const QWidget* x4) const { void* fun = LObjects::overrideFun(unique, 155); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; if(callOverrideFun(fun, 155, args).toBool()) return; } QPlastiqueStyle::drawComplexControl(x1, x2, x3, x4); }
    void drawControl(ControlElement x1, const QStyleOption* x2, QPainter* x3, const QWidget* x4) const { void* fun = LObjects::overrideFun(unique, 151); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; if(callOverrideFun(fun, 151, args).toBool()) return; } QPlastiqueStyle::drawControl(x1, x2, x3, x4); }
    void drawPrimitive(PrimitiveElement x1, const QStyleOption* x2, QPainter* x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 152); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; if(callOverrideFun(fun, 152, args).toBool()) return; } QPlastiqueStyle::drawPrimitive(x1, x2, x3, x4); }
    SubControl hitTestComplexControl(ComplexControl x1, const QStyleOptionComplex* x2, const QPoint& x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 163); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return (SubControl)callOverrideFun(fun, 163, args).toInt(); } return QPlastiqueStyle::hitTestComplexControl(x1, x2, x3, x4); }
    int pixelMetric(PixelMetric x1, const QStyleOption* x2 = 0, const QWidget* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 153); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 153, args).toInt(); } return QPlastiqueStyle::pixelMetric(x1, x2, x3); }
    void polish(QWidget* x1) { void* fun = LObjects::overrideFun(unique, 165); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 165, args).toBool()) return; } QPlastiqueStyle::polish(x1); }
    QSize sizeFromContents(ContentsType x1, const QStyleOption* x2, const QSize& x3, const QWidget* x4) const { void* fun = LObjects::overrideFun(unique, 157); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return qVariantValue<QSize>(callOverrideFun(fun, 157, args)); } return QPlastiqueStyle::sizeFromContents(x1, x2, x3, x4); }
    QPalette standardPalette() const { void* fun = LObjects::overrideFun(unique, 154); if(fun) { return qVariantValue<QPalette>(callOverrideFun(fun, 154, 0)); } return QPlastiqueStyle::standardPalette(); }
    QPixmap standardPixmap(StandardPixmap x1, const QStyleOption* x2, const QWidget* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 158); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QPixmap>(callOverrideFun(fun, 158, args)); } return QPlastiqueStyle::standardPixmap(x1, x2, x3); }
    int styleHint(StyleHint x1, const QStyleOption* x2 = 0, const QWidget* x3 = 0, QStyleHintReturn* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 159); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return callOverrideFun(fun, 159, args).toInt(); } return QPlastiqueStyle::styleHint(x1, x2, x3, x4); }
    QRect subControlRect(ComplexControl x1, const QStyleOptionComplex* x2, SubControl x3, const QWidget* x4) const { void* fun = LObjects::overrideFun(unique, 160); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return qVariantValue<QRect>(callOverrideFun(fun, 160, args)); } return QPlastiqueStyle::subControlRect(x1, x2, x3, x4); }
    QRect subElementRect(SubElement x1, const QStyleOption* x2, const QWidget* x3) const { void* fun = LObjects::overrideFun(unique, 161); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QRect>(callOverrideFun(fun, 161, args)); } return QPlastiqueStyle::subElementRect(x1, x2, x3); }
    void unpolish(QWidget* x1) { void* fun = LObjects::overrideFun(unique, 166); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 166, args).toBool()) return; } QPlastiqueStyle::unpolish(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QPlastiqueStyle::timerEvent(x1); }
    QPixmap generatedIconPixmap(QIcon::Mode x1, const QPixmap& x2, const QStyleOption* x3) const { void* fun = LObjects::overrideFun(unique, 162); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QPixmap>(callOverrideFun(fun, 162, args)); } return QPlastiqueStyle::generatedIconPixmap(x1, x2, x3); }
    void drawItemPixmap(QPainter* x1, const QRect& x2, int x3, const QPixmap& x4) const { void* fun = LObjects::overrideFun(unique, 168); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; if(callOverrideFun(fun, 168, args).toBool()) return; } QPlastiqueStyle::drawItemPixmap(x1, x2, x3, x4); }
    void drawItemText(QPainter* x1, const QRect& x2, int x3, const QPalette& x4, bool x5, const QString& x6, QPalette::ColorRole x7 = QPalette::NoRole) const { void* fun = LObjects::overrideFun(unique, 169); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5, &x6, &x7 }; if(callOverrideFun(fun, 169, args).toBool()) return; } QPlastiqueStyle::drawItemText(x1, x2, x3, x4, x5, x6, x7); }
    QRect itemPixmapRect(const QRect& x1, int x2, const QPixmap& x3) const { void* fun = LObjects::overrideFun(unique, 170); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QRect>(callOverrideFun(fun, 170, args)); } return QPlastiqueStyle::itemPixmapRect(x1, x2, x3); }
    QRect itemTextRect(const QFontMetrics& x1, const QRect& x2, int x3, bool x4, const QString& x5) const { void* fun = LObjects::overrideFun(unique, 171); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; return qVariantValue<QRect>(callOverrideFun(fun, 171, args)); } return QPlastiqueStyle::itemTextRect(x1, x2, x3, x4, x5); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QPlastiqueStyle::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QPlastiqueStyle::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QPlastiqueStyle::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QPlastiqueStyle::disconnectNotify(x1); }
};

class LPluginLoader : public QPluginLoader {
    Q_OBJECT
    friend class Q114;
public:
    LPluginLoader(uint u, QObject* x1 = 0) : QPluginLoader(x1), unique(u) {}
    LPluginLoader(uint u, const QString& x1, QObject* x2 = 0) : QPluginLoader(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QPluginLoader::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QPluginLoader::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QPluginLoader::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QPluginLoader::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QPluginLoader::timerEvent(x1); }
};

class LPrintDialog : public QPrintDialog {
    Q_OBJECT
    friend class Q115;
public:
    LPrintDialog(uint u, QPrinter* x1, QWidget* x2 = 0) : QPrintDialog(x1, x2), unique(u) {}
    LPrintDialog(uint u, QWidget* x1 = 0) : QPrintDialog(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void done(int x1) { void* fun = LObjects::overrideFun(unique, 173); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 173, args).toBool()) return; } QPrintDialog::done(x1); }
    int exec() { void* fun = LObjects::overrideFun(unique, 97); if(fun) { return callOverrideFun(fun, 97, 0).toInt(); } return QPrintDialog::exec(); }
    void setVisible(bool x1) { void* fun = LObjects::overrideFun(unique, 98); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 98, args).toBool()) return; } QPrintDialog::setVisible(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QPrintDialog::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QPrintDialog::sizeHint(); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QPrintDialog::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QPrintDialog::contextMenuEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QPrintDialog::keyPressEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QPrintDialog::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QPrintDialog::showEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QPrintDialog::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QPrintDialog::inputMethodQuery(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QPrintDialog::actionEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QPrintDialog::changeEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QPrintDialog::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QPrintDialog::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QPrintDialog::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QPrintDialog::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QPrintDialog::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QPrintDialog::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QPrintDialog::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QPrintDialog::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QPrintDialog::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QPrintDialog::inputMethodEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QPrintDialog::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QPrintDialog::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QPrintDialog::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QPrintDialog::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QPrintDialog::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QPrintDialog::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QPrintDialog::moveEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QPrintDialog::paintEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QPrintDialog::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QPrintDialog::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QPrintDialog::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QPrintDialog::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QPrintDialog::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QPrintDialog::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QPrintDialog::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QPrintDialog::timerEvent(x1); }
};

class LPrintPreviewDialog : public QPrintPreviewDialog {
    Q_OBJECT
    friend class Q116;
public:
    LPrintPreviewDialog(uint u, QPrinter* x1, QWidget* x2 = 0, Qt::WindowFlags x3 = 0) : QPrintPreviewDialog(x1, x2, x3), unique(u) {}
    LPrintPreviewDialog(uint u, QWidget* x1 = 0, Qt::WindowFlags x2 = 0) : QPrintPreviewDialog(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void done(int x1) { void* fun = LObjects::overrideFun(unique, 173); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 173, args).toBool()) return; } QPrintPreviewDialog::done(x1); }
    void setVisible(bool x1) { void* fun = LObjects::overrideFun(unique, 98); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 98, args).toBool()) return; } QPrintPreviewDialog::setVisible(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QPrintPreviewDialog::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QPrintPreviewDialog::sizeHint(); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QPrintPreviewDialog::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QPrintPreviewDialog::contextMenuEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QPrintPreviewDialog::keyPressEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QPrintPreviewDialog::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QPrintPreviewDialog::showEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QPrintPreviewDialog::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QPrintPreviewDialog::inputMethodQuery(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QPrintPreviewDialog::actionEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QPrintPreviewDialog::changeEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QPrintPreviewDialog::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QPrintPreviewDialog::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QPrintPreviewDialog::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QPrintPreviewDialog::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QPrintPreviewDialog::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QPrintPreviewDialog::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QPrintPreviewDialog::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QPrintPreviewDialog::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QPrintPreviewDialog::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QPrintPreviewDialog::inputMethodEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QPrintPreviewDialog::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QPrintPreviewDialog::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QPrintPreviewDialog::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QPrintPreviewDialog::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QPrintPreviewDialog::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QPrintPreviewDialog::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QPrintPreviewDialog::moveEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QPrintPreviewDialog::paintEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QPrintPreviewDialog::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QPrintPreviewDialog::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QPrintPreviewDialog::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QPrintPreviewDialog::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QPrintPreviewDialog::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QPrintPreviewDialog::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QPrintPreviewDialog::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QPrintPreviewDialog::timerEvent(x1); }
};

class LPrintPreviewWidget : public QPrintPreviewWidget {
    Q_OBJECT
    friend class Q117;
public:
    LPrintPreviewWidget(uint u, QPrinter* x1, QWidget* x2 = 0, Qt::WindowFlags x3 = 0) : QPrintPreviewWidget(x1, x2, x3), unique(u) {}
    LPrintPreviewWidget(uint u, QWidget* x1 = 0, Qt::WindowFlags x2 = 0) : QPrintPreviewWidget(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void setVisible(bool x1) { void* fun = LObjects::overrideFun(unique, 98); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 98, args).toBool()) return; } QPrintPreviewWidget::setVisible(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QPrintPreviewWidget::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QPrintPreviewWidget::inputMethodQuery(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QPrintPreviewWidget::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QPrintPreviewWidget::sizeHint(); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QPrintPreviewWidget::actionEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QPrintPreviewWidget::changeEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QPrintPreviewWidget::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QPrintPreviewWidget::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QPrintPreviewWidget::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QPrintPreviewWidget::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QPrintPreviewWidget::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QPrintPreviewWidget::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QPrintPreviewWidget::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QPrintPreviewWidget::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QPrintPreviewWidget::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QPrintPreviewWidget::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QPrintPreviewWidget::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QPrintPreviewWidget::inputMethodEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QPrintPreviewWidget::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QPrintPreviewWidget::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QPrintPreviewWidget::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QPrintPreviewWidget::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QPrintPreviewWidget::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QPrintPreviewWidget::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QPrintPreviewWidget::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QPrintPreviewWidget::moveEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QPrintPreviewWidget::paintEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QPrintPreviewWidget::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QPrintPreviewWidget::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QPrintPreviewWidget::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QPrintPreviewWidget::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QPrintPreviewWidget::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QPrintPreviewWidget::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QPrintPreviewWidget::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QPrintPreviewWidget::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QPrintPreviewWidget::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QPrintPreviewWidget::timerEvent(x1); }
};

class LProcess : public QProcess {
    Q_OBJECT
    friend class Q118;
public:
    LProcess(uint u, QObject* x1 = 0) : QProcess(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void setupChildProcess() { void* fun = LObjects::overrideFun(unique, 263); if(fun) { if(callOverrideFun(fun, 263, 0).toBool()) return; } QProcess::setupChildProcess(); }
    bool atEnd() const { void* fun = LObjects::overrideFun(unique, 143); if(fun) { return callOverrideFun(fun, 143, 0).toBool(); } return QProcess::atEnd(); }
    bool canReadLine() const { void* fun = LObjects::overrideFun(unique, 144); if(fun) { return callOverrideFun(fun, 144, 0).toBool(); } return QProcess::canReadLine(); }
    void close() { void* fun = LObjects::overrideFun(unique, 145); if(fun) { if(callOverrideFun(fun, 145, 0).toBool()) return; } QProcess::close(); }
    bool isSequential() const { void* fun = LObjects::overrideFun(unique, 147); if(fun) { return callOverrideFun(fun, 147, 0).toBool(); } return QProcess::isSequential(); }
    bool waitForBytesWritten(int x1 = 30000) { void* fun = LObjects::overrideFun(unique, 149); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 149, args).toBool(); } return QProcess::waitForBytesWritten(x1); }
    bool waitForReadyRead(int x1 = 30000) { void* fun = LObjects::overrideFun(unique, 150); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 150, args).toBool(); } return QProcess::waitForReadyRead(x1); }
    bool open(OpenMode x1) { void* fun = LObjects::overrideFun(unique, 146); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 146, args).toBool(); } return QProcess::open(x1); }
    bool reset() { void* fun = LObjects::overrideFun(unique, 148); if(fun) { return callOverrideFun(fun, 148, 0).toBool(); } return QProcess::reset(); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QProcess::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QProcess::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QProcess::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QProcess::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QProcess::timerEvent(x1); }
};

class LProgressBar : public QProgressBar {
    Q_OBJECT
    friend class Q119;
public:
    LProgressBar(uint u, QWidget* x1 = 0) : QProgressBar(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QString text() const { void* fun = LObjects::overrideFun(unique, 264); if(fun) { return qVariantValue<QString>(callOverrideFun(fun, 264, 0)); } return QProgressBar::text(); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QProgressBar::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QProgressBar::sizeHint(); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QProgressBar::paintEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QProgressBar::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QProgressBar::inputMethodQuery(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QProgressBar::actionEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QProgressBar::changeEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QProgressBar::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QProgressBar::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QProgressBar::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QProgressBar::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QProgressBar::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QProgressBar::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QProgressBar::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QProgressBar::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QProgressBar::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QProgressBar::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QProgressBar::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QProgressBar::inputMethodEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QProgressBar::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QProgressBar::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QProgressBar::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QProgressBar::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QProgressBar::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QProgressBar::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QProgressBar::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QProgressBar::moveEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QProgressBar::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QProgressBar::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QProgressBar::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QProgressBar::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QProgressBar::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QProgressBar::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QProgressBar::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QProgressBar::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QProgressBar::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QProgressBar::timerEvent(x1); }
};

class LProgressDialog : public QProgressDialog {
    Q_OBJECT
    friend class Q120;
public:
    LProgressDialog(uint u, QWidget* x1 = 0, Qt::WindowFlags x2 = 0) : QProgressDialog(x1, x2), unique(u) {}
    LProgressDialog(uint u, const QString& x1, const QString& x2, int x3, int x4, QWidget* x5 = 0, Qt::WindowFlags x6 = 0) : QProgressDialog(x1, x2, x3, x4, x5, x6), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QProgressDialog::sizeHint(); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QProgressDialog::changeEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QProgressDialog::closeEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QProgressDialog::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QProgressDialog::showEvent(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QProgressDialog::minimumSizeHint(); }
    void setVisible(bool x1) { void* fun = LObjects::overrideFun(unique, 98); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 98, args).toBool()) return; } QProgressDialog::setVisible(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QProgressDialog::contextMenuEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QProgressDialog::keyPressEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QProgressDialog::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QProgressDialog::inputMethodQuery(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QProgressDialog::actionEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QProgressDialog::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QProgressDialog::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QProgressDialog::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QProgressDialog::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QProgressDialog::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QProgressDialog::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QProgressDialog::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QProgressDialog::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QProgressDialog::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QProgressDialog::inputMethodEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QProgressDialog::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QProgressDialog::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QProgressDialog::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QProgressDialog::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QProgressDialog::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QProgressDialog::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QProgressDialog::moveEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QProgressDialog::paintEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QProgressDialog::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QProgressDialog::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QProgressDialog::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QProgressDialog::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QProgressDialog::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QProgressDialog::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QProgressDialog::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QProgressDialog::timerEvent(x1); }
};

class LPropertyAnimation : public QPropertyAnimation {
    Q_OBJECT
    friend class Q121;
public:
    LPropertyAnimation(uint u, QObject* x1 = 0) : QPropertyAnimation(x1), unique(u) {}
    LPropertyAnimation(uint u, QObject* x1, const QByteArray& x2, QObject* x3 = 0) : QPropertyAnimation(x1, x2, x3), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void updateCurrentValue(const QVariant& x1) { void* fun = LObjects::overrideFun(unique, 265); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 265, args).toBool()) return; } QPropertyAnimation::updateCurrentValue(x1); }
    void updateState(QAbstractAnimation::State x1, QAbstractAnimation::State x2) { void* fun = LObjects::overrideFun(unique, 4); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 4, args).toBool()) return; } QPropertyAnimation::updateState(x1, x2); }
    QVariant interpolated(const QVariant& x1, const QVariant& x2, qreal x3) const { void* fun = LObjects::overrideFun(unique, 266); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QVariant>(callOverrideFun(fun, 266, args)); } return QPropertyAnimation::interpolated(x1, x2, x3); }
    int duration() const { void* fun = LObjects::overrideFun(unique, 1); if(fun) { return callOverrideFun(fun, 1, 0).toInt(); } return QPropertyAnimation::duration(); }
    void updateCurrentTime(int x1) { void* fun = LObjects::overrideFun(unique, 2); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 2, args).toBool()) return; } QPropertyAnimation::updateCurrentTime(x1); }
    void updateDirection(QAbstractAnimation::Direction x1) { void* fun = LObjects::overrideFun(unique, 3); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 3, args).toBool()) return; } QPropertyAnimation::updateDirection(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QPropertyAnimation::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QPropertyAnimation::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QPropertyAnimation::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QPropertyAnimation::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QPropertyAnimation::timerEvent(x1); }
};

class LPushButton : public QPushButton {
    Q_OBJECT
    friend class Q122;
public:
    LPushButton(uint u, QWidget* x1 = 0) : QPushButton(x1), unique(u) {}
    LPushButton(uint u, const QString& x1, QWidget* x2 = 0) : QPushButton(x1, x2), unique(u) {}
    LPushButton(uint u, const QIcon& x1, const QString& x2, QWidget* x3 = 0) : QPushButton(x1, x2, x3), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QPushButton::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QPushButton::sizeHint(); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QPushButton::focusInEvent(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QPushButton::focusOutEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QPushButton::keyPressEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QPushButton::paintEvent(x1); }
    void checkStateSet() { void* fun = LObjects::overrideFun(unique, 10); if(fun) { if(callOverrideFun(fun, 10, 0).toBool()) return; } QPushButton::checkStateSet(); }
    bool hitButton(const QPoint& x1) const { void* fun = LObjects::overrideFun(unique, 11); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 11, args).toBool(); } return QPushButton::hitButton(x1); }
    void nextCheckState() { void* fun = LObjects::overrideFun(unique, 12); if(fun) { if(callOverrideFun(fun, 12, 0).toBool()) return; } QPushButton::nextCheckState(); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QPushButton::changeEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QPushButton::keyReleaseEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QPushButton::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QPushButton::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QPushButton::mouseReleaseEvent(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QPushButton::timerEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QPushButton::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QPushButton::inputMethodQuery(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QPushButton::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QPushButton::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QPushButton::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QPushButton::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QPushButton::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QPushButton::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QPushButton::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QPushButton::enterEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QPushButton::focusNextPrevChild(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QPushButton::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QPushButton::inputMethodEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QPushButton::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QPushButton::mouseDoubleClickEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QPushButton::moveEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QPushButton::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QPushButton::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QPushButton::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QPushButton::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QPushButton::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QPushButton::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QPushButton::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QPushButton::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QPushButton::disconnectNotify(x1); }
};

class LRadioButton : public QRadioButton {
    Q_OBJECT
    friend class Q123;
public:
    LRadioButton(uint u, QWidget* x1 = 0) : QRadioButton(x1), unique(u) {}
    LRadioButton(uint u, const QString& x1, QWidget* x2 = 0) : QRadioButton(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QRadioButton::sizeHint(); }
    bool hitButton(const QPoint& x1) const { void* fun = LObjects::overrideFun(unique, 11); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 11, args).toBool(); } return QRadioButton::hitButton(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QRadioButton::mouseMoveEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QRadioButton::paintEvent(x1); }
    void checkStateSet() { void* fun = LObjects::overrideFun(unique, 10); if(fun) { if(callOverrideFun(fun, 10, 0).toBool()) return; } QRadioButton::checkStateSet(); }
    void nextCheckState() { void* fun = LObjects::overrideFun(unique, 12); if(fun) { if(callOverrideFun(fun, 12, 0).toBool()) return; } QRadioButton::nextCheckState(); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QRadioButton::changeEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QRadioButton::focusInEvent(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QRadioButton::focusOutEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QRadioButton::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QRadioButton::keyReleaseEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QRadioButton::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QRadioButton::mouseReleaseEvent(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QRadioButton::timerEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QRadioButton::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QRadioButton::inputMethodQuery(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QRadioButton::minimumSizeHint(); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QRadioButton::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QRadioButton::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QRadioButton::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QRadioButton::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QRadioButton::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QRadioButton::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QRadioButton::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QRadioButton::enterEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QRadioButton::focusNextPrevChild(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QRadioButton::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QRadioButton::inputMethodEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QRadioButton::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QRadioButton::mouseDoubleClickEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QRadioButton::moveEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QRadioButton::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QRadioButton::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QRadioButton::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QRadioButton::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QRadioButton::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QRadioButton::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QRadioButton::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QRadioButton::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QRadioButton::disconnectNotify(x1); }
};

class LRegExpValidator : public QRegExpValidator {
    Q_OBJECT
    friend class Q124;
public:
    LRegExpValidator(uint u, QObject* x1) : QRegExpValidator(x1), unique(u) {}
    LRegExpValidator(uint u, const QRegExp& x1, QObject* x2) : QRegExpValidator(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QValidator::State validate(QString& x1, int& x2) const { void* fun = LObjects::overrideFun(unique, 109); if(fun) { const void* args[] = { &x1, &x2 }; return (QValidator::State)callOverrideFun(fun, 109, args).toInt(); } return QRegExpValidator::validate(x1, x2); }
    void fixup(QString& x1) const { void* fun = LObjects::overrideFun(unique, 107); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 107, args).toBool()) return; } QRegExpValidator::fixup(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QRegExpValidator::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QRegExpValidator::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QRegExpValidator::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QRegExpValidator::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QRegExpValidator::timerEvent(x1); }
};

class LRubberBand : public QRubberBand {
    Q_OBJECT
    friend class Q125;
public:
    LRubberBand(uint u, Shape x1, QWidget* x2 = 0) : QRubberBand(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QRubberBand::changeEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QRubberBand::moveEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QRubberBand::paintEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QRubberBand::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QRubberBand::showEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QRubberBand::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QRubberBand::inputMethodQuery(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QRubberBand::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QRubberBand::sizeHint(); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QRubberBand::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QRubberBand::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QRubberBand::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QRubberBand::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QRubberBand::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QRubberBand::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QRubberBand::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QRubberBand::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QRubberBand::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QRubberBand::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QRubberBand::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QRubberBand::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QRubberBand::inputMethodEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QRubberBand::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QRubberBand::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QRubberBand::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QRubberBand::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QRubberBand::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QRubberBand::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QRubberBand::mouseReleaseEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QRubberBand::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QRubberBand::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QRubberBand::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QRubberBand::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QRubberBand::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QRubberBand::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QRubberBand::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QRubberBand::timerEvent(x1); }
};

class LScrollArea : public QScrollArea {
    Q_OBJECT
    friend class Q126;
public:
    LScrollArea(uint u, QWidget* x1 = 0) : QScrollArea(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QScrollArea::focusNextPrevChild(x1); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QScrollArea::sizeHint(); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QScrollArea::resizeEvent(x1); }
    void scrollContentsBy(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 96); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 96, args).toBool()) return; } QScrollArea::scrollContentsBy(x1, x2); }
    bool viewportEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 95); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 95, args).toBool(); } return QScrollArea::viewportEvent(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QScrollArea::minimumSizeHint(); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QScrollArea::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QScrollArea::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QScrollArea::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QScrollArea::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QScrollArea::dropEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QScrollArea::keyPressEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QScrollArea::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QScrollArea::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QScrollArea::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QScrollArea::mouseReleaseEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QScrollArea::paintEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QScrollArea::wheelEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QScrollArea::changeEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QScrollArea::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QScrollArea::inputMethodQuery(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QScrollArea::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QScrollArea::closeEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QScrollArea::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QScrollArea::focusInEvent(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QScrollArea::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QScrollArea::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QScrollArea::inputMethodEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QScrollArea::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QScrollArea::leaveEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QScrollArea::moveEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QScrollArea::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QScrollArea::tabletEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QScrollArea::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QScrollArea::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QScrollArea::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QScrollArea::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QScrollArea::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QScrollArea::timerEvent(x1); }
};

class LScrollBar : public QScrollBar {
    Q_OBJECT
    friend class Q127;
public:
    LScrollBar(uint u, QWidget* x1 = 0) : QScrollBar(x1), unique(u) {}
    LScrollBar(uint u, Qt::Orientation x1, QWidget* x2 = 0) : QScrollBar(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QScrollBar::sizeHint(); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QScrollBar::contextMenuEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QScrollBar::hideEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QScrollBar::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QScrollBar::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QScrollBar::mouseReleaseEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QScrollBar::paintEvent(x1); }
    void sliderChange(SliderChange x1) { void* fun = LObjects::overrideFun(unique, 106); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 106, args).toBool()) return; } QScrollBar::sliderChange(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QScrollBar::changeEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QScrollBar::keyPressEvent(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QScrollBar::timerEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QScrollBar::wheelEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QScrollBar::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QScrollBar::inputMethodQuery(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QScrollBar::minimumSizeHint(); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QScrollBar::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QScrollBar::closeEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QScrollBar::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QScrollBar::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QScrollBar::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QScrollBar::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QScrollBar::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QScrollBar::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QScrollBar::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QScrollBar::focusOutEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QScrollBar::inputMethodEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QScrollBar::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QScrollBar::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QScrollBar::mouseDoubleClickEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QScrollBar::moveEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QScrollBar::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QScrollBar::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QScrollBar::tabletEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QScrollBar::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QScrollBar::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QScrollBar::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QScrollBar::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QScrollBar::disconnectNotify(x1); }
};

class LSequentialAnimationGroup : public QSequentialAnimationGroup {
    Q_OBJECT
    friend class Q128;
public:
    LSequentialAnimationGroup(uint u, QObject* x1 = 0) : QSequentialAnimationGroup(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    int duration() const { void* fun = LObjects::overrideFun(unique, 1); if(fun) { return callOverrideFun(fun, 1, 0).toInt(); } return QSequentialAnimationGroup::duration(); }
    void updateCurrentTime(int x1) { void* fun = LObjects::overrideFun(unique, 2); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 2, args).toBool()) return; } QSequentialAnimationGroup::updateCurrentTime(x1); }
    void updateDirection(QAbstractAnimation::Direction x1) { void* fun = LObjects::overrideFun(unique, 3); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 3, args).toBool()) return; } QSequentialAnimationGroup::updateDirection(x1); }
    void updateState(QAbstractAnimation::State x1, QAbstractAnimation::State x2) { void* fun = LObjects::overrideFun(unique, 4); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 4, args).toBool()) return; } QSequentialAnimationGroup::updateState(x1, x2); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QSequentialAnimationGroup::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QSequentialAnimationGroup::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QSequentialAnimationGroup::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QSequentialAnimationGroup::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QSequentialAnimationGroup::timerEvent(x1); }
};

class LSettings : public QSettings {
    Q_OBJECT
    friend class Q130;
public:
    LSettings(uint u, const QString& x1, const QString& x2 = QString(), QObject* x3 = 0) : QSettings(x1, x2, x3), unique(u) {}
    LSettings(uint u, Scope x1, const QString& x2, const QString& x3 = QString(), QObject* x4 = 0) : QSettings(x1, x2, x3, x4), unique(u) {}
    LSettings(uint u, Format x1, Scope x2, const QString& x3, const QString& x4 = QString(), QObject* x5 = 0) : QSettings(x1, x2, x3, x4, x5), unique(u) {}
    LSettings(uint u, const QString& x1, Format x2, QObject* x3 = 0) : QSettings(x1, x2, x3), unique(u) {}
    LSettings(uint u, QObject* x1 = 0) : QSettings(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QSettings::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QSettings::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QSettings::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QSettings::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QSettings::timerEvent(x1); }
};

class LShortcut : public QShortcut {
    Q_OBJECT
    friend class Q131;
public:
    LShortcut(uint u, QWidget* x1) : QShortcut(x1), unique(u) {}
    LShortcut(uint u, const QKeySequence& x1, QWidget* x2, const char* x3 = 0, const char* x4 = 0, Qt::ShortcutContext x5 = Qt::WindowShortcut) : QShortcut(x1, x2, x3, x4, x5), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QShortcut::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QShortcut::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QShortcut::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QShortcut::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QShortcut::timerEvent(x1); }
};

class LSignalTransition : public QSignalTransition {
    Q_OBJECT
    friend class Q132;
public:
    LSignalTransition(uint u, QState* x1 = 0) : QSignalTransition(x1), unique(u) {}
    LSignalTransition(uint u, QObject* x1, const char* x2, QState* x3 = 0) : QSignalTransition(x1, x2, x3), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool eventTest(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 123); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 123, args).toBool(); } return QSignalTransition::eventTest(x1); }
    void onTransition(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 124); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 124, args).toBool()) return; } QSignalTransition::onTransition(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QSignalTransition::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QSignalTransition::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QSignalTransition::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QSignalTransition::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QSignalTransition::timerEvent(x1); }
};

class LSizeGrip : public QSizeGrip {
    Q_OBJECT
    friend class Q133;
public:
    LSizeGrip(uint u, QWidget* x1) : QSizeGrip(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void setVisible(bool x1) { void* fun = LObjects::overrideFun(unique, 98); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 98, args).toBool()) return; } QSizeGrip::setVisible(x1); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QSizeGrip::sizeHint(); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QSizeGrip::hideEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QSizeGrip::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QSizeGrip::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QSizeGrip::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QSizeGrip::moveEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QSizeGrip::paintEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QSizeGrip::showEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QSizeGrip::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QSizeGrip::inputMethodQuery(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QSizeGrip::minimumSizeHint(); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QSizeGrip::actionEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QSizeGrip::changeEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QSizeGrip::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QSizeGrip::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QSizeGrip::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QSizeGrip::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QSizeGrip::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QSizeGrip::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QSizeGrip::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QSizeGrip::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QSizeGrip::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QSizeGrip::focusOutEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QSizeGrip::inputMethodEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QSizeGrip::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QSizeGrip::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QSizeGrip::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QSizeGrip::mouseDoubleClickEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QSizeGrip::resizeEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QSizeGrip::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QSizeGrip::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QSizeGrip::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QSizeGrip::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QSizeGrip::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QSizeGrip::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QSizeGrip::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QSizeGrip::timerEvent(x1); }
};

class LSlider : public QSlider {
    Q_OBJECT
    friend class Q134;
public:
    LSlider(uint u, QWidget* x1 = 0) : QSlider(x1), unique(u) {}
    LSlider(uint u, Qt::Orientation x1, QWidget* x2 = 0) : QSlider(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QSlider::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QSlider::sizeHint(); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QSlider::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QSlider::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QSlider::mouseReleaseEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QSlider::paintEvent(x1); }
    void sliderChange(SliderChange x1) { void* fun = LObjects::overrideFun(unique, 106); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 106, args).toBool()) return; } QSlider::sliderChange(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QSlider::changeEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QSlider::keyPressEvent(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QSlider::timerEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QSlider::wheelEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QSlider::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QSlider::inputMethodQuery(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QSlider::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QSlider::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QSlider::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QSlider::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QSlider::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QSlider::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QSlider::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QSlider::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QSlider::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QSlider::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QSlider::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QSlider::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QSlider::inputMethodEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QSlider::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QSlider::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QSlider::mouseDoubleClickEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QSlider::moveEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QSlider::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QSlider::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QSlider::tabletEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QSlider::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QSlider::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QSlider::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QSlider::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QSlider::disconnectNotify(x1); }
};

class LSortFilterProxyModel : public QSortFilterProxyModel {
    Q_OBJECT
    friend class Q135;
public:
    LSortFilterProxyModel(uint u, QObject* x1 = 0) : QSortFilterProxyModel(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool filterAcceptsColumn(int x1, const QModelIndex& x2) const { void* fun = LObjects::overrideFun(unique, 267); if(fun) { const void* args[] = { &x1, &x2 }; return callOverrideFun(fun, 267, args).toBool(); } return QSortFilterProxyModel::filterAcceptsColumn(x1, x2); }
    bool filterAcceptsRow(int x1, const QModelIndex& x2) const { void* fun = LObjects::overrideFun(unique, 268); if(fun) { const void* args[] = { &x1, &x2 }; return callOverrideFun(fun, 268, args).toBool(); } return QSortFilterProxyModel::filterAcceptsRow(x1, x2); }
    bool lessThan(const QModelIndex& x1, const QModelIndex& x2) const { void* fun = LObjects::overrideFun(unique, 269); if(fun) { const void* args[] = { &x1, &x2 }; return callOverrideFun(fun, 269, args).toBool(); } return QSortFilterProxyModel::lessThan(x1, x2); }
    QModelIndex buddy(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 52); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 52, args)); } return QSortFilterProxyModel::buddy(x1); }
    bool canFetchMore(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 53); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 53, args).toBool(); } return QSortFilterProxyModel::canFetchMore(x1); }
    int columnCount(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 54); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 54, args).toInt(); } return QSortFilterProxyModel::columnCount(x1); }
    QVariant data(const QModelIndex& x1, int x2 = Qt::DisplayRole) const { void* fun = LObjects::overrideFun(unique, 55); if(fun) { const void* args[] = { &x1, &x2 }; return qVariantValue<QVariant>(callOverrideFun(fun, 55, args)); } return QSortFilterProxyModel::data(x1, x2); }
    bool dropMimeData(const QMimeData* x1, Qt::DropAction x2, int x3, int x4, const QModelIndex& x5) { void* fun = LObjects::overrideFun(unique, 56); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; return callOverrideFun(fun, 56, args).toBool(); } return QSortFilterProxyModel::dropMimeData(x1, x2, x3, x4, x5); }
    void fetchMore(const QModelIndex& x1) { void* fun = LObjects::overrideFun(unique, 57); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 57, args).toBool()) return; } QSortFilterProxyModel::fetchMore(x1); }
    Qt::ItemFlags flags(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 58); if(fun) { const void* args[] = { &x1 }; return (Qt::ItemFlags)callOverrideFun(fun, 58, args).toInt(); } return QSortFilterProxyModel::flags(x1); }
    bool hasChildren(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 59); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 59, args).toBool(); } return QSortFilterProxyModel::hasChildren(x1); }
    QVariant headerData(int x1, Qt::Orientation x2, int x3 = Qt::DisplayRole) const { void* fun = LObjects::overrideFun(unique, 60); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QVariant>(callOverrideFun(fun, 60, args)); } return QSortFilterProxyModel::headerData(x1, x2, x3); }
    QModelIndex index(int x1, int x2, const QModelIndex& x3 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 61); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 61, args)); } return QSortFilterProxyModel::index(x1, x2, x3); }
    bool insertColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 62); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 62, args).toBool(); } return QSortFilterProxyModel::insertColumns(x1, x2, x3); }
    bool insertRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 63); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 63, args).toBool(); } return QSortFilterProxyModel::insertRows(x1, x2, x3); }
    QModelIndex mapFromSource(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 99); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 99, args)); } return QSortFilterProxyModel::mapFromSource(x1); }
    QItemSelection mapSelectionFromSource(const QItemSelection& x1) const { void* fun = LObjects::overrideFun(unique, 100); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QItemSelection>(callOverrideFun(fun, 100, args)); } return QSortFilterProxyModel::mapSelectionFromSource(x1); }
    QItemSelection mapSelectionToSource(const QItemSelection& x1) const { void* fun = LObjects::overrideFun(unique, 101); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QItemSelection>(callOverrideFun(fun, 101, args)); } return QSortFilterProxyModel::mapSelectionToSource(x1); }
    QModelIndex mapToSource(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 102); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 102, args)); } return QSortFilterProxyModel::mapToSource(x1); }
    QModelIndexList match(const QModelIndex& x1, int x2, const QVariant& x3, int x4 = 1, Qt::MatchFlags x5 = Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap)) const { void* fun = LObjects::overrideFun(unique, 64); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; return qVariantValue<QModelIndexList>(callOverrideFun(fun, 64, args)); } return QSortFilterProxyModel::match(x1, x2, x3, x4, x5); }
    QMimeData* mimeData(const QModelIndexList& x1) const { void* fun = LObjects::overrideFun(unique, 65); if(fun) { const void* args[] = { &x1 }; return (QMimeData*)qVariantValue<void*>(callOverrideFun(fun, 65, args)); } return QSortFilterProxyModel::mimeData(x1); }
    QStringList mimeTypes() const { void* fun = LObjects::overrideFun(unique, 66); if(fun) { return qVariantValue<QStringList>(callOverrideFun(fun, 66, 0)); } return QSortFilterProxyModel::mimeTypes(); }
    QModelIndex parent(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 67); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 67, args)); } return QSortFilterProxyModel::parent(x1); }
    bool removeColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 68); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 68, args).toBool(); } return QSortFilterProxyModel::removeColumns(x1, x2, x3); }
    bool removeRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 69); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 69, args).toBool(); } return QSortFilterProxyModel::removeRows(x1, x2, x3); }
    int rowCount(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 70); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 70, args).toInt(); } return QSortFilterProxyModel::rowCount(x1); }
    bool setData(const QModelIndex& x1, const QVariant& x2, int x3 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 71); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 71, args).toBool(); } return QSortFilterProxyModel::setData(x1, x2, x3); }
    bool setHeaderData(int x1, Qt::Orientation x2, const QVariant& x3, int x4 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 72); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return callOverrideFun(fun, 72, args).toBool(); } return QSortFilterProxyModel::setHeaderData(x1, x2, x3, x4); }
    void setSourceModel(QAbstractItemModel* x1) { void* fun = LObjects::overrideFun(unique, 103); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 103, args).toBool()) return; } QSortFilterProxyModel::setSourceModel(x1); }
    void sort(int x1, Qt::SortOrder x2 = Qt::AscendingOrder) { void* fun = LObjects::overrideFun(unique, 73); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 73, args).toBool()) return; } QSortFilterProxyModel::sort(x1, x2); }
    QSize span(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 74); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QSize>(callOverrideFun(fun, 74, args)); } return QSortFilterProxyModel::span(x1); }
    Qt::DropActions supportedDropActions() const { void* fun = LObjects::overrideFun(unique, 75); if(fun) { return (Qt::DropActions)callOverrideFun(fun, 75, 0).toInt(); } return QSortFilterProxyModel::supportedDropActions(); }
    void revert() { void* fun = LObjects::overrideFun(unique, 104); if(fun) { if(callOverrideFun(fun, 104, 0).toBool()) return; } QSortFilterProxyModel::revert(); }
    bool submit() { void* fun = LObjects::overrideFun(unique, 105); if(fun) { return callOverrideFun(fun, 105, 0).toBool(); } return QSortFilterProxyModel::submit(); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QSortFilterProxyModel::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QSortFilterProxyModel::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QSortFilterProxyModel::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QSortFilterProxyModel::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QSortFilterProxyModel::timerEvent(x1); }
};

class LSound : public QSound {
    Q_OBJECT
    friend class Q136;
public:
    LSound(uint u, const QString& x1, QObject* x2 = 0) : QSound(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QSound::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QSound::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QSound::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QSound::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QSound::timerEvent(x1); }
};

class LSpinBox : public QSpinBox {
    Q_OBJECT
    friend class Q137;
public:
    LSpinBox(uint u, QWidget* x1 = 0) : QSpinBox(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QString textFromValue(int x1) const { void* fun = LObjects::overrideFun(unique, 270); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QString>(callOverrideFun(fun, 270, args)); } return QSpinBox::textFromValue(x1); }
    int valueFromText(const QString& x1) const { void* fun = LObjects::overrideFun(unique, 187); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 187, args).toInt(); } return QSpinBox::valueFromText(x1); }
    void fixup(QString& x1) const { void* fun = LObjects::overrideFun(unique, 107); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 107, args).toBool()) return; } QSpinBox::fixup(x1); }
    QValidator::State validate(QString& x1, int& x2) const { void* fun = LObjects::overrideFun(unique, 109); if(fun) { const void* args[] = { &x1, &x2 }; return (QValidator::State)callOverrideFun(fun, 109, args).toInt(); } return QSpinBox::validate(x1, x2); }
    void stepBy(int x1) { void* fun = LObjects::overrideFun(unique, 108); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 108, args).toBool()) return; } QSpinBox::stepBy(x1); }
    StepEnabled stepEnabled() const { void* fun = LObjects::overrideFun(unique, 110); if(fun) { return (StepEnabled)callOverrideFun(fun, 110, 0).toInt(); } return QSpinBox::stepEnabled(); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QSpinBox::inputMethodQuery(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QSpinBox::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QSpinBox::sizeHint(); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QSpinBox::changeEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QSpinBox::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QSpinBox::contextMenuEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QSpinBox::focusInEvent(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QSpinBox::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QSpinBox::hideEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QSpinBox::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QSpinBox::keyReleaseEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QSpinBox::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QSpinBox::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QSpinBox::mouseReleaseEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QSpinBox::paintEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QSpinBox::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QSpinBox::showEvent(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QSpinBox::timerEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QSpinBox::wheelEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QSpinBox::heightForWidth(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QSpinBox::actionEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QSpinBox::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QSpinBox::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QSpinBox::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QSpinBox::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QSpinBox::enterEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QSpinBox::focusNextPrevChild(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QSpinBox::inputMethodEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QSpinBox::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QSpinBox::mouseDoubleClickEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QSpinBox::moveEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QSpinBox::tabletEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QSpinBox::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QSpinBox::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QSpinBox::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QSpinBox::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QSpinBox::disconnectNotify(x1); }
};

class LSplashScreen : public QSplashScreen {
    Q_OBJECT
    friend class Q138;
public:
    LSplashScreen(uint u, const QPixmap& x1 = QPixmap(), Qt::WindowFlags x2 = 0) : QSplashScreen(x1, x2), unique(u) {}
    LSplashScreen(uint u, QWidget* x1, const QPixmap& x2 = QPixmap(), Qt::WindowFlags x3 = 0) : QSplashScreen(x1, x2, x3), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void drawContents(QPainter* x1) { void* fun = LObjects::overrideFun(unique, 271); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 271, args).toBool()) return; } QSplashScreen::drawContents(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QSplashScreen::mousePressEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QSplashScreen::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QSplashScreen::inputMethodQuery(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QSplashScreen::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QSplashScreen::sizeHint(); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QSplashScreen::actionEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QSplashScreen::changeEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QSplashScreen::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QSplashScreen::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QSplashScreen::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QSplashScreen::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QSplashScreen::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QSplashScreen::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QSplashScreen::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QSplashScreen::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QSplashScreen::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QSplashScreen::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QSplashScreen::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QSplashScreen::inputMethodEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QSplashScreen::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QSplashScreen::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QSplashScreen::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QSplashScreen::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QSplashScreen::mouseMoveEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QSplashScreen::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QSplashScreen::moveEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QSplashScreen::paintEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QSplashScreen::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QSplashScreen::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QSplashScreen::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QSplashScreen::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QSplashScreen::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QSplashScreen::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QSplashScreen::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QSplashScreen::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QSplashScreen::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QSplashScreen::timerEvent(x1); }
};

class LSplitter : public QSplitter {
    Q_OBJECT
    friend class Q139;
public:
    LSplitter(uint u, QWidget* x1 = 0) : QSplitter(x1), unique(u) {}
    LSplitter(uint u, Qt::Orientation x1, QWidget* x2 = 0) : QSplitter(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QSplitter::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QSplitter::sizeHint(); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QSplitter::changeEvent(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QSplitter::childEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QSplitter::resizeEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QSplitter::paintEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QSplitter::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QSplitter::inputMethodQuery(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QSplitter::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QSplitter::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QSplitter::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QSplitter::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QSplitter::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QSplitter::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QSplitter::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QSplitter::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QSplitter::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QSplitter::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QSplitter::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QSplitter::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QSplitter::inputMethodEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QSplitter::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QSplitter::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QSplitter::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QSplitter::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QSplitter::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QSplitter::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QSplitter::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QSplitter::moveEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QSplitter::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QSplitter::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QSplitter::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QSplitter::metric(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QSplitter::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QSplitter::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QSplitter::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QSplitter::timerEvent(x1); }
};

class LSplitterHandle : public QSplitterHandle {
    Q_OBJECT
    friend class Q140;
public:

    static NumList overrideIds;
    uint unique;

    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QSplitterHandle::sizeHint(); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QSplitterHandle::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QSplitterHandle::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QSplitterHandle::mouseReleaseEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QSplitterHandle::paintEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QSplitterHandle::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QSplitterHandle::inputMethodQuery(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QSplitterHandle::minimumSizeHint(); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QSplitterHandle::actionEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QSplitterHandle::changeEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QSplitterHandle::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QSplitterHandle::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QSplitterHandle::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QSplitterHandle::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QSplitterHandle::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QSplitterHandle::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QSplitterHandle::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QSplitterHandle::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QSplitterHandle::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QSplitterHandle::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QSplitterHandle::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QSplitterHandle::inputMethodEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QSplitterHandle::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QSplitterHandle::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QSplitterHandle::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QSplitterHandle::mouseDoubleClickEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QSplitterHandle::moveEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QSplitterHandle::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QSplitterHandle::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QSplitterHandle::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QSplitterHandle::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QSplitterHandle::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QSplitterHandle::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QSplitterHandle::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QSplitterHandle::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QSplitterHandle::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QSplitterHandle::timerEvent(x1); }
};

class LStackedLayout : public QStackedLayout {
    Q_OBJECT
    friend class Q141;
public:
    LStackedLayout(uint u) : unique(u) {}
    LStackedLayout(uint u, QWidget* x1) : QStackedLayout(x1), unique(u) {}
    LStackedLayout(uint u, QLayout* x1) : QStackedLayout(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void addItem(QLayoutItem* x1) { void* fun = LObjects::overrideFun(unique, 128); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 128, args).toBool()) return; } QStackedLayout::addItem(x1); }
    int count() const { void* fun = LObjects::overrideFun(unique, 129); if(fun) { return callOverrideFun(fun, 129, 0).toInt(); } return QStackedLayout::count(); }
    QLayoutItem* itemAt(int x1) const { void* fun = LObjects::overrideFun(unique, 133); if(fun) { const void* args[] = { &x1 }; return (QLayoutItem*)qVariantValue<void*>(callOverrideFun(fun, 133, args)); } return QStackedLayout::itemAt(x1); }
    QSize minimumSize() const { void* fun = LObjects::overrideFun(unique, 136); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 136, 0)); } return QStackedLayout::minimumSize(); }
    void setGeometry(const QRect& x1) { void* fun = LObjects::overrideFun(unique, 137); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 137, args).toBool()) return; } QStackedLayout::setGeometry(x1); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QStackedLayout::sizeHint(); }
    QLayoutItem* takeAt(int x1) { void* fun = LObjects::overrideFun(unique, 138); if(fun) { const void* args[] = { &x1 }; return (QLayoutItem*)qVariantValue<void*>(callOverrideFun(fun, 138, args)); } return QStackedLayout::takeAt(x1); }
    int indexOf(QWidget* x1) const { void* fun = LObjects::overrideFun(unique, 139); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 139, args).toInt(); } return QStackedLayout::indexOf(x1); }
    Qt::Orientations expandingDirections() const { void* fun = LObjects::overrideFun(unique, 130); if(fun) { return (Qt::Orientations)callOverrideFun(fun, 130, 0).toInt(); } return QStackedLayout::expandingDirections(); }
    QRect geometry() const { void* fun = LObjects::overrideFun(unique, 140); if(fun) { return qVariantValue<QRect>(callOverrideFun(fun, 140, 0)); } return QStackedLayout::geometry(); }
    void invalidate() { void* fun = LObjects::overrideFun(unique, 132); if(fun) { if(callOverrideFun(fun, 132, 0).toBool()) return; } QStackedLayout::invalidate(); }
    bool isEmpty() const { void* fun = LObjects::overrideFun(unique, 141); if(fun) { return callOverrideFun(fun, 141, 0).toBool(); } return QStackedLayout::isEmpty(); }
    QLayout* layout() { void* fun = LObjects::overrideFun(unique, 142); if(fun) { return (QLayout*)qVariantValue<void*>(callOverrideFun(fun, 142, 0)); } return QStackedLayout::layout(); }
    QSize maximumSize() const { void* fun = LObjects::overrideFun(unique, 134); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 134, 0)); } return QStackedLayout::maximumSize(); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QStackedLayout::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QStackedLayout::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QStackedLayout::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QStackedLayout::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QStackedLayout::timerEvent(x1); }
};

class LStackedWidget : public QStackedWidget {
    Q_OBJECT
    friend class Q142;
public:
    LStackedWidget(uint u, QWidget* x1 = 0) : QStackedWidget(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QStackedWidget::sizeHint(); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QStackedWidget::changeEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QStackedWidget::paintEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QStackedWidget::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QStackedWidget::inputMethodQuery(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QStackedWidget::minimumSizeHint(); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QStackedWidget::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QStackedWidget::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QStackedWidget::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QStackedWidget::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QStackedWidget::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QStackedWidget::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QStackedWidget::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QStackedWidget::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QStackedWidget::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QStackedWidget::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QStackedWidget::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QStackedWidget::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QStackedWidget::inputMethodEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QStackedWidget::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QStackedWidget::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QStackedWidget::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QStackedWidget::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QStackedWidget::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QStackedWidget::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QStackedWidget::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QStackedWidget::moveEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QStackedWidget::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QStackedWidget::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QStackedWidget::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QStackedWidget::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QStackedWidget::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QStackedWidget::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QStackedWidget::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QStackedWidget::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QStackedWidget::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QStackedWidget::timerEvent(x1); }
};

class LStandardItemModel : public QStandardItemModel {
    Q_OBJECT
    friend class Q143;
public:
    LStandardItemModel(uint u, QObject* x1 = 0) : QStandardItemModel(x1), unique(u) {}
    LStandardItemModel(uint u, int x1, int x2, QObject* x3 = 0) : QStandardItemModel(x1, x2, x3), unique(u) {}

    static NumList overrideIds;
    uint unique;

    int columnCount(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 54); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 54, args).toInt(); } return QStandardItemModel::columnCount(x1); }
    QVariant data(const QModelIndex& x1, int x2 = Qt::DisplayRole) const { void* fun = LObjects::overrideFun(unique, 55); if(fun) { const void* args[] = { &x1, &x2 }; return qVariantValue<QVariant>(callOverrideFun(fun, 55, args)); } return QStandardItemModel::data(x1, x2); }
    bool dropMimeData(const QMimeData* x1, Qt::DropAction x2, int x3, int x4, const QModelIndex& x5) { void* fun = LObjects::overrideFun(unique, 56); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; return callOverrideFun(fun, 56, args).toBool(); } return QStandardItemModel::dropMimeData(x1, x2, x3, x4, x5); }
    Qt::ItemFlags flags(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 58); if(fun) { const void* args[] = { &x1 }; return (Qt::ItemFlags)callOverrideFun(fun, 58, args).toInt(); } return QStandardItemModel::flags(x1); }
    bool hasChildren(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 59); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 59, args).toBool(); } return QStandardItemModel::hasChildren(x1); }
    QVariant headerData(int x1, Qt::Orientation x2, int x3 = Qt::DisplayRole) const { void* fun = LObjects::overrideFun(unique, 60); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QVariant>(callOverrideFun(fun, 60, args)); } return QStandardItemModel::headerData(x1, x2, x3); }
    QModelIndex index(int x1, int x2, const QModelIndex& x3 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 61); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 61, args)); } return QStandardItemModel::index(x1, x2, x3); }
    bool insertColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 62); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 62, args).toBool(); } return QStandardItemModel::insertColumns(x1, x2, x3); }
    bool insertRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 63); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 63, args).toBool(); } return QStandardItemModel::insertRows(x1, x2, x3); }
    QMimeData* mimeData(const QModelIndexList& x1) const { void* fun = LObjects::overrideFun(unique, 65); if(fun) { const void* args[] = { &x1 }; return (QMimeData*)qVariantValue<void*>(callOverrideFun(fun, 65, args)); } return QStandardItemModel::mimeData(x1); }
    QStringList mimeTypes() const { void* fun = LObjects::overrideFun(unique, 66); if(fun) { return qVariantValue<QStringList>(callOverrideFun(fun, 66, 0)); } return QStandardItemModel::mimeTypes(); }
    QModelIndex parent(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 67); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 67, args)); } return QStandardItemModel::parent(x1); }
    bool removeColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 68); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 68, args).toBool(); } return QStandardItemModel::removeColumns(x1, x2, x3); }
    bool removeRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 69); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 69, args).toBool(); } return QStandardItemModel::removeRows(x1, x2, x3); }
    int rowCount(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 70); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 70, args).toInt(); } return QStandardItemModel::rowCount(x1); }
    bool setData(const QModelIndex& x1, const QVariant& x2, int x3 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 71); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 71, args).toBool(); } return QStandardItemModel::setData(x1, x2, x3); }
    bool setHeaderData(int x1, Qt::Orientation x2, const QVariant& x3, int x4 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 72); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return callOverrideFun(fun, 72, args).toBool(); } return QStandardItemModel::setHeaderData(x1, x2, x3, x4); }
    void sort(int x1, Qt::SortOrder x2 = Qt::AscendingOrder) { void* fun = LObjects::overrideFun(unique, 73); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 73, args).toBool()) return; } QStandardItemModel::sort(x1, x2); }
    Qt::DropActions supportedDropActions() const { void* fun = LObjects::overrideFun(unique, 75); if(fun) { return (Qt::DropActions)callOverrideFun(fun, 75, 0).toInt(); } return QStandardItemModel::supportedDropActions(); }
    QModelIndex buddy(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 52); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 52, args)); } return QStandardItemModel::buddy(x1); }
    bool canFetchMore(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 53); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 53, args).toBool(); } return QStandardItemModel::canFetchMore(x1); }
    void fetchMore(const QModelIndex& x1) { void* fun = LObjects::overrideFun(unique, 57); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 57, args).toBool()) return; } QStandardItemModel::fetchMore(x1); }
    QModelIndexList match(const QModelIndex& x1, int x2, const QVariant& x3, int x4 = 1, Qt::MatchFlags x5 = Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap)) const { void* fun = LObjects::overrideFun(unique, 64); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; return qVariantValue<QModelIndexList>(callOverrideFun(fun, 64, args)); } return QStandardItemModel::match(x1, x2, x3, x4, x5); }
    QSize span(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 74); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QSize>(callOverrideFun(fun, 74, args)); } return QStandardItemModel::span(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QStandardItemModel::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QStandardItemModel::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QStandardItemModel::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QStandardItemModel::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QStandardItemModel::timerEvent(x1); }
};

class LState : public QState {
    Q_OBJECT
    friend class Q144;
public:
    LState(uint u, QState* x1 = 0) : QState(x1), unique(u) {}
    LState(uint u, ChildMode x1, QState* x2 = 0) : QState(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void onEntry(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 111); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 111, args).toBool()) return; } QState::onEntry(x1); }
    void onExit(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 112); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 112, args).toBool()) return; } QState::onExit(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QState::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QState::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QState::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QState::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QState::timerEvent(x1); }
};

class LStateMachine : public QStateMachine {
    Q_OBJECT
    friend class Q145;
public:
    LStateMachine(uint u, QObject* x1 = 0) : QStateMachine(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void onEntry(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 111); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 111, args).toBool()) return; } QStateMachine::onEntry(x1); }
    void onExit(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 112); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 112, args).toBool()) return; } QStateMachine::onExit(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QStateMachine::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QStateMachine::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QStateMachine::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QStateMachine::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QStateMachine::timerEvent(x1); }
};

class LStatusBar : public QStatusBar {
    Q_OBJECT
    friend class Q146;
public:
    LStatusBar(uint u, QWidget* x1 = 0) : QStatusBar(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QStatusBar::paintEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QStatusBar::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QStatusBar::showEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QStatusBar::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QStatusBar::inputMethodQuery(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QStatusBar::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QStatusBar::sizeHint(); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QStatusBar::actionEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QStatusBar::changeEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QStatusBar::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QStatusBar::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QStatusBar::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QStatusBar::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QStatusBar::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QStatusBar::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QStatusBar::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QStatusBar::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QStatusBar::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QStatusBar::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QStatusBar::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QStatusBar::inputMethodEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QStatusBar::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QStatusBar::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QStatusBar::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QStatusBar::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QStatusBar::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QStatusBar::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QStatusBar::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QStatusBar::moveEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QStatusBar::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QStatusBar::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QStatusBar::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QStatusBar::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QStatusBar::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QStatusBar::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QStatusBar::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QStatusBar::timerEvent(x1); }
};

class LStringListModel : public QStringListModel {
    Q_OBJECT
    friend class Q147;
public:
    LStringListModel(uint u, QObject* x1 = 0) : QStringListModel(x1), unique(u) {}
    LStringListModel(uint u, const QStringList& x1, QObject* x2 = 0) : QStringListModel(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QVariant data(const QModelIndex& x1, int x2) const { void* fun = LObjects::overrideFun(unique, 55); if(fun) { const void* args[] = { &x1, &x2 }; return qVariantValue<QVariant>(callOverrideFun(fun, 55, args)); } return QStringListModel::data(x1, x2); }
    Qt::ItemFlags flags(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 58); if(fun) { const void* args[] = { &x1 }; return (Qt::ItemFlags)callOverrideFun(fun, 58, args).toInt(); } return QStringListModel::flags(x1); }
    bool insertRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 63); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 63, args).toBool(); } return QStringListModel::insertRows(x1, x2, x3); }
    bool removeRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 69); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 69, args).toBool(); } return QStringListModel::removeRows(x1, x2, x3); }
    int rowCount(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 70); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 70, args).toInt(); } return QStringListModel::rowCount(x1); }
    bool setData(const QModelIndex& x1, const QVariant& x2, int x3 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 71); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 71, args).toBool(); } return QStringListModel::setData(x1, x2, x3); }
    void sort(int x1, Qt::SortOrder x2 = Qt::AscendingOrder) { void* fun = LObjects::overrideFun(unique, 73); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 73, args).toBool()) return; } QStringListModel::sort(x1, x2); }
    Qt::DropActions supportedDropActions() const { void* fun = LObjects::overrideFun(unique, 75); if(fun) { return (Qt::DropActions)callOverrideFun(fun, 75, 0).toInt(); } return QStringListModel::supportedDropActions(); }
    bool dropMimeData(const QMimeData* x1, Qt::DropAction x2, int x3, int x4, const QModelIndex& x5) { void* fun = LObjects::overrideFun(unique, 56); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; return callOverrideFun(fun, 56, args).toBool(); } return QStringListModel::dropMimeData(x1, x2, x3, x4, x5); }
    QModelIndex index(int x1, int x2 = 0, const QModelIndex& x3 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 61); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 61, args)); } return QStringListModel::index(x1, x2, x3); }
    QModelIndex buddy(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 52); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 52, args)); } return QStringListModel::buddy(x1); }
    bool canFetchMore(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 53); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 53, args).toBool(); } return QStringListModel::canFetchMore(x1); }
    void fetchMore(const QModelIndex& x1) { void* fun = LObjects::overrideFun(unique, 57); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 57, args).toBool()) return; } QStringListModel::fetchMore(x1); }
    QVariant headerData(int x1, Qt::Orientation x2, int x3 = Qt::DisplayRole) const { void* fun = LObjects::overrideFun(unique, 60); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QVariant>(callOverrideFun(fun, 60, args)); } return QStringListModel::headerData(x1, x2, x3); }
    bool insertColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 62); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 62, args).toBool(); } return QStringListModel::insertColumns(x1, x2, x3); }
    QModelIndexList match(const QModelIndex& x1, int x2, const QVariant& x3, int x4 = 1, Qt::MatchFlags x5 = Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap)) const { void* fun = LObjects::overrideFun(unique, 64); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; return qVariantValue<QModelIndexList>(callOverrideFun(fun, 64, args)); } return QStringListModel::match(x1, x2, x3, x4, x5); }
    QMimeData* mimeData(const QModelIndexList& x1) const { void* fun = LObjects::overrideFun(unique, 65); if(fun) { const void* args[] = { &x1 }; return (QMimeData*)qVariantValue<void*>(callOverrideFun(fun, 65, args)); } return QStringListModel::mimeData(x1); }
    QStringList mimeTypes() const { void* fun = LObjects::overrideFun(unique, 66); if(fun) { return qVariantValue<QStringList>(callOverrideFun(fun, 66, 0)); } return QStringListModel::mimeTypes(); }
    bool removeColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 68); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 68, args).toBool(); } return QStringListModel::removeColumns(x1, x2, x3); }
    bool setHeaderData(int x1, Qt::Orientation x2, const QVariant& x3, int x4 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 72); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return callOverrideFun(fun, 72, args).toBool(); } return QStringListModel::setHeaderData(x1, x2, x3, x4); }
    QSize span(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 74); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QSize>(callOverrideFun(fun, 74, args)); } return QStringListModel::span(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QStringListModel::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QStringListModel::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QStringListModel::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QStringListModel::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QStringListModel::timerEvent(x1); }
};

class LStyledItemDelegate : public QStyledItemDelegate {
    Q_OBJECT
    friend class Q149;
public:
    LStyledItemDelegate(uint u, QObject* x1 = 0) : QStyledItemDelegate(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QString displayText(const QVariant& x1, const QLocale& x2) const { void* fun = LObjects::overrideFun(unique, 272); if(fun) { const void* args[] = { &x1, &x2 }; return qVariantValue<QString>(callOverrideFun(fun, 272, args)); } return QStyledItemDelegate::displayText(x1, x2); }
    void initStyleOption(QStyleOptionViewItem* x1, const QModelIndex& x2) const { void* fun = LObjects::overrideFun(unique, 273); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 273, args).toBool()) return; } QStyledItemDelegate::initStyleOption(x1, x2); }
    QWidget* createEditor(QWidget* x1, const QStyleOptionViewItem& x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 45); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return (QWidget*)qVariantValue<void*>(callOverrideFun(fun, 45, args)); } return QStyledItemDelegate::createEditor(x1, x2, x3); }
    void paint(QPainter* x1, const QStyleOptionViewItem& x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 47); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 47, args).toBool()) return; } QStyledItemDelegate::paint(x1, x2, x3); }
    void setEditorData(QWidget* x1, const QModelIndex& x2) const { void* fun = LObjects::overrideFun(unique, 48); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 48, args).toBool()) return; } QStyledItemDelegate::setEditorData(x1, x2); }
    void setModelData(QWidget* x1, QAbstractItemModel* x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 49); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 49, args).toBool()) return; } QStyledItemDelegate::setModelData(x1, x2, x3); }
    QSize sizeHint(const QStyleOptionViewItem& x1, const QModelIndex& x2) const { void* fun = LObjects::overrideFun(unique, 50); if(fun) { const void* args[] = { &x1, &x2 }; return qVariantValue<QSize>(callOverrideFun(fun, 50, args)); } return QStyledItemDelegate::sizeHint(x1, x2); }
    void updateEditorGeometry(QWidget* x1, const QStyleOptionViewItem& x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 51); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 51, args).toBool()) return; } QStyledItemDelegate::updateEditorGeometry(x1, x2, x3); }
    bool editorEvent(QEvent* x1, QAbstractItemModel* x2, const QStyleOptionViewItem& x3, const QModelIndex& x4) { void* fun = LObjects::overrideFun(unique, 46); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return callOverrideFun(fun, 46, args).toBool(); } return QStyledItemDelegate::editorEvent(x1, x2, x3, x4); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QStyledItemDelegate::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QStyledItemDelegate::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QStyledItemDelegate::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QStyledItemDelegate::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QStyledItemDelegate::timerEvent(x1); }
};

class LSwipeGesture : public QSwipeGesture {
    Q_OBJECT
    friend class Q150;
public:

    static NumList overrideIds;
    uint unique;

    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QSwipeGesture::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QSwipeGesture::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QSwipeGesture::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QSwipeGesture::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QSwipeGesture::timerEvent(x1); }
};

class LSyntaxHighlighter : public QSyntaxHighlighter {
    Q_OBJECT
    friend class Q151;
public:
    LSyntaxHighlighter(uint u, QObject* x1) : QSyntaxHighlighter(x1), unique(u) {}
    LSyntaxHighlighter(uint u, QTextDocument* x1) : QSyntaxHighlighter(x1), unique(u) {}
    LSyntaxHighlighter(uint u, QTextEdit* x1) : QSyntaxHighlighter(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void highlightBlock(const QString& x1) { void* fun = LObjects::overrideFun(unique, 274); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 274, args).toBool()) return; }}
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QSyntaxHighlighter::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QSyntaxHighlighter::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QSyntaxHighlighter::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QSyntaxHighlighter::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QSyntaxHighlighter::timerEvent(x1); }
};

class LSystemTrayIcon : public QSystemTrayIcon {
    Q_OBJECT
    friend class Q152;
public:
    LSystemTrayIcon(uint u, QObject* x1 = 0) : QSystemTrayIcon(x1), unique(u) {}
    LSystemTrayIcon(uint u, const QIcon& x1, QObject* x2 = 0) : QSystemTrayIcon(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QSystemTrayIcon::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QSystemTrayIcon::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QSystemTrayIcon::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QSystemTrayIcon::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QSystemTrayIcon::timerEvent(x1); }
};

class LTabBar : public QTabBar {
    Q_OBJECT
    friend class Q153;
public:
    LTabBar(uint u, QWidget* x1 = 0) : QTabBar(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void tabInserted(int x1) { void* fun = LObjects::overrideFun(unique, 275); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 275, args).toBool()) return; } QTabBar::tabInserted(x1); }
    void tabLayoutChange() { void* fun = LObjects::overrideFun(unique, 276); if(fun) { if(callOverrideFun(fun, 276, 0).toBool()) return; } QTabBar::tabLayoutChange(); }
    void tabRemoved(int x1) { void* fun = LObjects::overrideFun(unique, 277); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 277, args).toBool()) return; } QTabBar::tabRemoved(x1); }
    QSize tabSizeHint(int x1) const { void* fun = LObjects::overrideFun(unique, 278); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QSize>(callOverrideFun(fun, 278, args)); } return QTabBar::tabSizeHint(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QTabBar::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QTabBar::sizeHint(); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QTabBar::changeEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QTabBar::hideEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QTabBar::keyPressEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QTabBar::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QTabBar::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QTabBar::mouseReleaseEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QTabBar::paintEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QTabBar::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QTabBar::showEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QTabBar::wheelEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QTabBar::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QTabBar::inputMethodQuery(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QTabBar::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QTabBar::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QTabBar::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QTabBar::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QTabBar::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QTabBar::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QTabBar::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QTabBar::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QTabBar::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QTabBar::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QTabBar::focusOutEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QTabBar::inputMethodEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QTabBar::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QTabBar::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QTabBar::mouseDoubleClickEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QTabBar::moveEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QTabBar::tabletEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QTabBar::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QTabBar::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QTabBar::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QTabBar::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QTabBar::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QTabBar::timerEvent(x1); }
};

class LTabWidget : public QTabWidget {
    Q_OBJECT
    friend class Q154;
public:
    LTabWidget(uint u, QWidget* x1 = 0) : QTabWidget(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void tabInserted(int x1) { void* fun = LObjects::overrideFun(unique, 275); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 275, args).toBool()) return; } QTabWidget::tabInserted(x1); }
    void tabRemoved(int x1) { void* fun = LObjects::overrideFun(unique, 277); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 277, args).toBool()) return; } QTabWidget::tabRemoved(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QTabWidget::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QTabWidget::sizeHint(); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QTabWidget::changeEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QTabWidget::keyPressEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QTabWidget::paintEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QTabWidget::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QTabWidget::showEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QTabWidget::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QTabWidget::inputMethodQuery(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QTabWidget::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QTabWidget::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QTabWidget::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QTabWidget::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QTabWidget::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QTabWidget::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QTabWidget::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QTabWidget::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QTabWidget::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QTabWidget::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QTabWidget::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QTabWidget::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QTabWidget::inputMethodEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QTabWidget::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QTabWidget::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QTabWidget::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QTabWidget::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QTabWidget::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QTabWidget::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QTabWidget::moveEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QTabWidget::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QTabWidget::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QTabWidget::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QTabWidget::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QTabWidget::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QTabWidget::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QTabWidget::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QTabWidget::timerEvent(x1); }
};

class LTableView : public QTableView {
    Q_OBJECT
    friend class Q155;
public:
    LTableView(uint u, QWidget* x1 = 0) : QTableView(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QModelIndex indexAt(const QPoint& x1) const { void* fun = LObjects::overrideFun(unique, 76); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 76, args)); } return QTableView::indexAt(x1); }
    void setModel(QAbstractItemModel* x1) { void* fun = LObjects::overrideFun(unique, 79); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 79, args).toBool()) return; } QTableView::setModel(x1); }
    void setRootIndex(const QModelIndex& x1) { void* fun = LObjects::overrideFun(unique, 176); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 176, args).toBool()) return; } QTableView::setRootIndex(x1); }
    void setSelectionModel(QItemSelectionModel* x1) { void* fun = LObjects::overrideFun(unique, 80); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 80, args).toBool()) return; } QTableView::setSelectionModel(x1); }
    void currentChanged(const QModelIndex& x1, const QModelIndex& x2) { void* fun = LObjects::overrideFun(unique, 177); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 177, args).toBool()) return; } QTableView::currentChanged(x1, x2); }
    int horizontalOffset() const { void* fun = LObjects::overrideFun(unique, 85); if(fun) { return callOverrideFun(fun, 85, 0).toInt(); } return QTableView::horizontalOffset(); }
    bool isIndexHidden(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 86); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 86, args).toBool(); } return QTableView::isIndexHidden(x1); }
    QModelIndex moveCursor(CursorAction x1, Qt::KeyboardModifiers x2) { void* fun = LObjects::overrideFun(unique, 87); if(fun) { const void* args[] = { &x1, &x2 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 87, args)); } return QTableView::moveCursor(x1, x2); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QTableView::paintEvent(x1); }
    QModelIndexList selectedIndexes() const { void* fun = LObjects::overrideFun(unique, 88); if(fun) { return qVariantValue<QModelIndexList>(callOverrideFun(fun, 88, 0)); } return QTableView::selectedIndexes(); }
    void selectionChanged(const QItemSelection& x1, const QItemSelection& x2) { void* fun = LObjects::overrideFun(unique, 251); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 251, args).toBool()) return; } QTableView::selectionChanged(x1, x2); }
    void setSelection(const QRect& x1, QItemSelectionModel::SelectionFlags x2) { void* fun = LObjects::overrideFun(unique, 90); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 90, args).toBool()) return; } QTableView::setSelection(x1, x2); }
    int sizeHintForColumn(int x1) const { void* fun = LObjects::overrideFun(unique, 81); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 81, args).toInt(); } return QTableView::sizeHintForColumn(x1); }
    int sizeHintForRow(int x1) const { void* fun = LObjects::overrideFun(unique, 82); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 82, args).toInt(); } return QTableView::sizeHintForRow(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QTableView::timerEvent(x1); }
    void updateGeometries() { void* fun = LObjects::overrideFun(unique, 252); if(fun) { if(callOverrideFun(fun, 252, 0).toBool()) return; } QTableView::updateGeometries(); }
    int verticalOffset() const { void* fun = LObjects::overrideFun(unique, 92); if(fun) { return callOverrideFun(fun, 92, 0).toInt(); } return QTableView::verticalOffset(); }
    QStyleOptionViewItem viewOptions() const { void* fun = LObjects::overrideFun(unique, 93); if(fun) { return qVariantValue<QStyleOptionViewItem>(callOverrideFun(fun, 93, 0)); } return QTableView::viewOptions(); }
    void keyboardSearch(const QString& x1) { void* fun = LObjects::overrideFun(unique, 77); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 77, args).toBool()) return; } QTableView::keyboardSearch(x1); }
    void scrollTo(const QModelIndex& x1, ScrollHint x2 = EnsureVisible) { void* fun = LObjects::overrideFun(unique, 78); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 78, args).toBool()) return; }}
    QRect visualRect(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 83); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QRect>(callOverrideFun(fun, 83, args)); } return QRect(); }
    bool edit(const QModelIndex& x1, EditTrigger x2, QEvent* x3) { void* fun = LObjects::overrideFun(unique, 84); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 84, args).toBool(); } return QTableView::edit(x1, x2, x3); }
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex& x1, const QEvent* x2 = 0) const { void* fun = LObjects::overrideFun(unique, 89); if(fun) { const void* args[] = { &x1, &x2 }; return (QItemSelectionModel::SelectionFlags)callOverrideFun(fun, 89, args).toInt(); } return QTableView::selectionCommand(x1, x2); }
    void startDrag(Qt::DropActions x1) { void* fun = LObjects::overrideFun(unique, 91); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 91, args).toBool()) return; } QTableView::startDrag(x1); }
    QRegion visualRegionForSelection(const QItemSelection& x1) const { void* fun = LObjects::overrideFun(unique, 94); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QRegion>(callOverrideFun(fun, 94, args)); } return QRegion(); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QTableView::inputMethodQuery(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QTableView::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QTableView::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QTableView::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QTableView::dropEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QTableView::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QTableView::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QTableView::focusOutEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QTableView::inputMethodEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QTableView::keyPressEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QTableView::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QTableView::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QTableView::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QTableView::mouseReleaseEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QTableView::resizeEvent(x1); }
    bool viewportEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 95); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 95, args).toBool(); } return QTableView::viewportEvent(x1); }
    void scrollContentsBy(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 96); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 96, args).toBool()) return; } QTableView::scrollContentsBy(x1, x2); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QTableView::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QTableView::sizeHint(); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QTableView::contextMenuEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QTableView::wheelEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QTableView::changeEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QTableView::heightForWidth(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QTableView::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QTableView::closeEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QTableView::enterEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QTableView::hideEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QTableView::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QTableView::leaveEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QTableView::moveEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QTableView::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QTableView::tabletEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QTableView::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QTableView::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QTableView::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QTableView::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QTableView::disconnectNotify(x1); }
};

class LTableWidget : public QTableWidget {
    Q_OBJECT
    friend class Q156;
public:
    LTableWidget(uint u, QWidget* x1 = 0) : QTableWidget(x1), unique(u) {}
    LTableWidget(uint u, int x1, int x2, QWidget* x3 = 0) : QTableWidget(x1, x2, x3), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool dropMimeData(int x1, int x2, const QMimeData* x3, Qt::DropAction x4) { void* fun = LObjects::overrideFun(unique, 279); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return callOverrideFun(fun, 279, args).toBool(); } return QTableWidget::dropMimeData(x1, x2, x3, x4); }
    QMimeData* mimeData(const QList<QTableWidgetItem*> x1) const { void* fun = LObjects::overrideFun(unique, 280); if(fun) { const void* args[] = { &x1 }; return (QMimeData*)qVariantValue<void*>(callOverrideFun(fun, 280, args)); } return QTableWidget::mimeData(x1); }
    QStringList mimeTypes() const { void* fun = LObjects::overrideFun(unique, 66); if(fun) { return qVariantValue<QStringList>(callOverrideFun(fun, 66, 0)); } return QTableWidget::mimeTypes(); }
    Qt::DropActions supportedDropActions() const { void* fun = LObjects::overrideFun(unique, 75); if(fun) { return (Qt::DropActions)callOverrideFun(fun, 75, 0).toInt(); } return QTableWidget::supportedDropActions(); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QTableWidget::dropEvent(x1); }
    QModelIndex indexAt(const QPoint& x1) const { void* fun = LObjects::overrideFun(unique, 76); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 76, args)); } return QTableWidget::indexAt(x1); }
    void setRootIndex(const QModelIndex& x1) { void* fun = LObjects::overrideFun(unique, 176); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 176, args).toBool()) return; } QTableWidget::setRootIndex(x1); }
    void setSelectionModel(QItemSelectionModel* x1) { void* fun = LObjects::overrideFun(unique, 80); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 80, args).toBool()) return; } QTableWidget::setSelectionModel(x1); }
    void currentChanged(const QModelIndex& x1, const QModelIndex& x2) { void* fun = LObjects::overrideFun(unique, 177); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 177, args).toBool()) return; } QTableWidget::currentChanged(x1, x2); }
    int horizontalOffset() const { void* fun = LObjects::overrideFun(unique, 85); if(fun) { return callOverrideFun(fun, 85, 0).toInt(); } return QTableWidget::horizontalOffset(); }
    bool isIndexHidden(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 86); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 86, args).toBool(); } return QTableWidget::isIndexHidden(x1); }
    QModelIndex moveCursor(CursorAction x1, Qt::KeyboardModifiers x2) { void* fun = LObjects::overrideFun(unique, 87); if(fun) { const void* args[] = { &x1, &x2 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 87, args)); } return QTableWidget::moveCursor(x1, x2); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QTableWidget::paintEvent(x1); }
    QModelIndexList selectedIndexes() const { void* fun = LObjects::overrideFun(unique, 88); if(fun) { return qVariantValue<QModelIndexList>(callOverrideFun(fun, 88, 0)); } return QTableWidget::selectedIndexes(); }
    void selectionChanged(const QItemSelection& x1, const QItemSelection& x2) { void* fun = LObjects::overrideFun(unique, 251); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 251, args).toBool()) return; } QTableWidget::selectionChanged(x1, x2); }
    void setSelection(const QRect& x1, QItemSelectionModel::SelectionFlags x2) { void* fun = LObjects::overrideFun(unique, 90); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 90, args).toBool()) return; } QTableWidget::setSelection(x1, x2); }
    int sizeHintForColumn(int x1) const { void* fun = LObjects::overrideFun(unique, 81); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 81, args).toInt(); } return QTableWidget::sizeHintForColumn(x1); }
    int sizeHintForRow(int x1) const { void* fun = LObjects::overrideFun(unique, 82); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 82, args).toInt(); } return QTableWidget::sizeHintForRow(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QTableWidget::timerEvent(x1); }
    void updateGeometries() { void* fun = LObjects::overrideFun(unique, 252); if(fun) { if(callOverrideFun(fun, 252, 0).toBool()) return; } QTableWidget::updateGeometries(); }
    int verticalOffset() const { void* fun = LObjects::overrideFun(unique, 92); if(fun) { return callOverrideFun(fun, 92, 0).toInt(); } return QTableWidget::verticalOffset(); }
    QStyleOptionViewItem viewOptions() const { void* fun = LObjects::overrideFun(unique, 93); if(fun) { return qVariantValue<QStyleOptionViewItem>(callOverrideFun(fun, 93, 0)); } return QTableWidget::viewOptions(); }
    void keyboardSearch(const QString& x1) { void* fun = LObjects::overrideFun(unique, 77); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 77, args).toBool()) return; } QTableWidget::keyboardSearch(x1); }
    void scrollTo(const QModelIndex& x1, ScrollHint x2 = EnsureVisible) { void* fun = LObjects::overrideFun(unique, 78); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 78, args).toBool()) return; }}
    QRect visualRect(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 83); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QRect>(callOverrideFun(fun, 83, args)); } return QRect(); }
    bool edit(const QModelIndex& x1, EditTrigger x2, QEvent* x3) { void* fun = LObjects::overrideFun(unique, 84); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 84, args).toBool(); } return QTableWidget::edit(x1, x2, x3); }
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex& x1, const QEvent* x2 = 0) const { void* fun = LObjects::overrideFun(unique, 89); if(fun) { const void* args[] = { &x1, &x2 }; return (QItemSelectionModel::SelectionFlags)callOverrideFun(fun, 89, args).toInt(); } return QTableWidget::selectionCommand(x1, x2); }
    void startDrag(Qt::DropActions x1) { void* fun = LObjects::overrideFun(unique, 91); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 91, args).toBool()) return; } QTableWidget::startDrag(x1); }
    QRegion visualRegionForSelection(const QItemSelection& x1) const { void* fun = LObjects::overrideFun(unique, 94); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QRegion>(callOverrideFun(fun, 94, args)); } return QRegion(); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QTableWidget::inputMethodQuery(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QTableWidget::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QTableWidget::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QTableWidget::dragMoveEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QTableWidget::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QTableWidget::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QTableWidget::focusOutEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QTableWidget::inputMethodEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QTableWidget::keyPressEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QTableWidget::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QTableWidget::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QTableWidget::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QTableWidget::mouseReleaseEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QTableWidget::resizeEvent(x1); }
    bool viewportEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 95); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 95, args).toBool(); } return QTableWidget::viewportEvent(x1); }
    void scrollContentsBy(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 96); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 96, args).toBool()) return; } QTableWidget::scrollContentsBy(x1, x2); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QTableWidget::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QTableWidget::sizeHint(); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QTableWidget::contextMenuEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QTableWidget::wheelEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QTableWidget::changeEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QTableWidget::heightForWidth(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QTableWidget::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QTableWidget::closeEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QTableWidget::enterEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QTableWidget::hideEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QTableWidget::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QTableWidget::leaveEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QTableWidget::moveEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QTableWidget::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QTableWidget::tabletEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QTableWidget::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QTableWidget::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QTableWidget::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QTableWidget::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QTableWidget::disconnectNotify(x1); }
};

class LTapAndHoldGesture : public QTapAndHoldGesture {
    Q_OBJECT
    friend class Q157;
public:

    static NumList overrideIds;
    uint unique;

    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QTapAndHoldGesture::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QTapAndHoldGesture::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QTapAndHoldGesture::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QTapAndHoldGesture::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QTapAndHoldGesture::timerEvent(x1); }
};

class LTapGesture : public QTapGesture {
    Q_OBJECT
    friend class Q158;
public:

    static NumList overrideIds;
    uint unique;

    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QTapGesture::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QTapGesture::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QTapGesture::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QTapGesture::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QTapGesture::timerEvent(x1); }
};

class LTextBlockGroup : public QTextBlockGroup {
    Q_OBJECT
    friend class Q159;
public:
    LTextBlockGroup(uint u, QTextDocument* x1) : QTextBlockGroup(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void blockFormatChanged(const QTextBlock& x1) { void* fun = LObjects::overrideFun(unique, 281); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 281, args).toBool()) return; } QTextBlockGroup::blockFormatChanged(x1); }
    void blockInserted(const QTextBlock& x1) { void* fun = LObjects::overrideFun(unique, 282); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 282, args).toBool()) return; } QTextBlockGroup::blockInserted(x1); }
    void blockRemoved(const QTextBlock& x1) { void* fun = LObjects::overrideFun(unique, 283); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 283, args).toBool()) return; } QTextBlockGroup::blockRemoved(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QTextBlockGroup::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QTextBlockGroup::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QTextBlockGroup::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QTextBlockGroup::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QTextBlockGroup::timerEvent(x1); }
};

class LTextBrowser : public QTextBrowser {
    Q_OBJECT
    friend class Q160;
public:
    LTextBrowser(uint u, QWidget* x1 = 0) : QTextBrowser(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QVariant loadResource(int x1, const QUrl& x2) { void* fun = LObjects::overrideFun(unique, 259); if(fun) { const void* args[] = { &x1, &x2 }; return qVariantValue<QVariant>(callOverrideFun(fun, 259, args)); } return QTextBrowser::loadResource(x1, x2); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QTextBrowser::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QTextBrowser::focusOutEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QTextBrowser::keyPressEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QTextBrowser::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QTextBrowser::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QTextBrowser::mouseReleaseEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QTextBrowser::paintEvent(x1); }
    bool canInsertFromMimeData(const QMimeData* x1) const { void* fun = LObjects::overrideFun(unique, 260); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 260, args).toBool(); } return QTextBrowser::canInsertFromMimeData(x1); }
    QMimeData* createMimeDataFromSelection() const { void* fun = LObjects::overrideFun(unique, 261); if(fun) { return (QMimeData*)qVariantValue<void*>(callOverrideFun(fun, 261, 0)); } return QTextBrowser::createMimeDataFromSelection(); }
    void insertFromMimeData(const QMimeData* x1) { void* fun = LObjects::overrideFun(unique, 262); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 262, args).toBool()) return; } QTextBrowser::insertFromMimeData(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QTextBrowser::changeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QTextBrowser::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QTextBrowser::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QTextBrowser::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QTextBrowser::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QTextBrowser::dropEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QTextBrowser::focusInEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QTextBrowser::inputMethodEvent(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QTextBrowser::inputMethodQuery(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QTextBrowser::keyReleaseEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QTextBrowser::mouseDoubleClickEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QTextBrowser::resizeEvent(x1); }
    void scrollContentsBy(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 96); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 96, args).toBool()) return; } QTextBrowser::scrollContentsBy(x1, x2); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QTextBrowser::showEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QTextBrowser::wheelEvent(x1); }
    bool viewportEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 95); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 95, args).toBool(); } return QTextBrowser::viewportEvent(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QTextBrowser::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QTextBrowser::sizeHint(); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QTextBrowser::heightForWidth(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QTextBrowser::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QTextBrowser::closeEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QTextBrowser::enterEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QTextBrowser::hideEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QTextBrowser::leaveEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QTextBrowser::moveEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QTextBrowser::tabletEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QTextBrowser::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QTextBrowser::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QTextBrowser::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QTextBrowser::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QTextBrowser::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QTextBrowser::timerEvent(x1); }
};

class LTextDocument : public QTextDocument {
    Q_OBJECT
    friend class Q161;
public:
    LTextDocument(uint u, QObject* x1 = 0) : QTextDocument(x1), unique(u) {}
    LTextDocument(uint u, const QString& x1, QObject* x2 = 0) : QTextDocument(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void clear() { void* fun = LObjects::overrideFun(unique, 185); if(fun) { if(callOverrideFun(fun, 185, 0).toBool()) return; } QTextDocument::clear(); }
    QTextObject* createObject(const QTextFormat& x1) { void* fun = LObjects::overrideFun(unique, 284); if(fun) { const void* args[] = { &x1 }; return (QTextObject*)qVariantValue<void*>(callOverrideFun(fun, 284, args)); } return QTextDocument::createObject(x1); }
    QVariant loadResource(int x1, const QUrl& x2) { void* fun = LObjects::overrideFun(unique, 259); if(fun) { const void* args[] = { &x1, &x2 }; return qVariantValue<QVariant>(callOverrideFun(fun, 259, args)); } return QTextDocument::loadResource(x1, x2); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QTextDocument::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QTextDocument::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QTextDocument::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QTextDocument::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QTextDocument::timerEvent(x1); }
};

class LTextEdit : public QTextEdit {
    Q_OBJECT
    friend class Q162;
public:
    LTextEdit(uint u, QWidget* x1 = 0) : QTextEdit(x1), unique(u) {}
    LTextEdit(uint u, const QString& x1, QWidget* x2 = 0) : QTextEdit(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QVariant loadResource(int x1, const QUrl& x2) { void* fun = LObjects::overrideFun(unique, 259); if(fun) { const void* args[] = { &x1, &x2 }; return qVariantValue<QVariant>(callOverrideFun(fun, 259, args)); } return QTextEdit::loadResource(x1, x2); }
    bool canInsertFromMimeData(const QMimeData* x1) const { void* fun = LObjects::overrideFun(unique, 260); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 260, args).toBool(); } return QTextEdit::canInsertFromMimeData(x1); }
    QMimeData* createMimeDataFromSelection() const { void* fun = LObjects::overrideFun(unique, 261); if(fun) { return (QMimeData*)qVariantValue<void*>(callOverrideFun(fun, 261, 0)); } return QTextEdit::createMimeDataFromSelection(); }
    void insertFromMimeData(const QMimeData* x1) { void* fun = LObjects::overrideFun(unique, 262); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 262, args).toBool()) return; } QTextEdit::insertFromMimeData(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QTextEdit::changeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QTextEdit::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QTextEdit::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QTextEdit::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QTextEdit::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QTextEdit::dropEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QTextEdit::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QTextEdit::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QTextEdit::focusOutEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QTextEdit::inputMethodEvent(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QTextEdit::inputMethodQuery(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QTextEdit::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QTextEdit::keyReleaseEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QTextEdit::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QTextEdit::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QTextEdit::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QTextEdit::mouseReleaseEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QTextEdit::paintEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QTextEdit::resizeEvent(x1); }
    void scrollContentsBy(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 96); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 96, args).toBool()) return; } QTextEdit::scrollContentsBy(x1, x2); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QTextEdit::showEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QTextEdit::wheelEvent(x1); }
    bool viewportEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 95); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 95, args).toBool(); } return QTextEdit::viewportEvent(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QTextEdit::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QTextEdit::sizeHint(); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QTextEdit::heightForWidth(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QTextEdit::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QTextEdit::closeEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QTextEdit::enterEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QTextEdit::hideEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QTextEdit::leaveEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QTextEdit::moveEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QTextEdit::tabletEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QTextEdit::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QTextEdit::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QTextEdit::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QTextEdit::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QTextEdit::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QTextEdit::timerEvent(x1); }
};

class LTextFrame : public QTextFrame {
    Q_OBJECT
    friend class Q163;
public:
    LTextFrame(uint u, QTextDocument* x1) : QTextFrame(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QTextFrame::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QTextFrame::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QTextFrame::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QTextFrame::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QTextFrame::timerEvent(x1); }
};

class LTextList : public QTextList {
    Q_OBJECT
    friend class Q164;
public:

    static NumList overrideIds;
    uint unique;

    void blockFormatChanged(const QTextBlock& x1) { void* fun = LObjects::overrideFun(unique, 281); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 281, args).toBool()) return; } QTextList::blockFormatChanged(x1); }
    void blockInserted(const QTextBlock& x1) { void* fun = LObjects::overrideFun(unique, 282); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 282, args).toBool()) return; } QTextList::blockInserted(x1); }
    void blockRemoved(const QTextBlock& x1) { void* fun = LObjects::overrideFun(unique, 283); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 283, args).toBool()) return; } QTextList::blockRemoved(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QTextList::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QTextList::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QTextList::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QTextList::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QTextList::timerEvent(x1); }
};

class LTextObject : public QTextObject {
    Q_OBJECT
    friend class Q165;
public:
    LTextObject(uint u, QTextDocument* x1) : QTextObject(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QTextObject::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QTextObject::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QTextObject::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QTextObject::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QTextObject::timerEvent(x1); }
};

class LTextTable : public QTextTable {
    Q_OBJECT
    friend class Q166;
public:

    static NumList overrideIds;
    uint unique;

    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QTextTable::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QTextTable::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QTextTable::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QTextTable::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QTextTable::timerEvent(x1); }
};

class LThread : public QThread {
    Q_OBJECT
    friend class Q167;
public:
    LThread(uint u, QObject* x1 = 0) : QThread(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void run() { void* fun = LObjects::overrideFun(unique, 285); if(fun) { if(callOverrideFun(fun, 285, 0).toBool()) return; } QThread::run(); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QThread::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QThread::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QThread::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QThread::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QThread::timerEvent(x1); }
};

class LThreadPool : public QThreadPool {
    Q_OBJECT
    friend class Q168;
public:
    LThreadPool(uint u, QObject* x1 = 0) : QThreadPool(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QThreadPool::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QThreadPool::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QThreadPool::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QThreadPool::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QThreadPool::timerEvent(x1); }
};

class LTimeEdit : public QTimeEdit {
    Q_OBJECT
    friend class Q169;
public:
    LTimeEdit(uint u, QWidget* x1 = 0) : QTimeEdit(x1), unique(u) {}
    LTimeEdit(uint u, const QTime& x1, QWidget* x2 = 0) : QTimeEdit(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QDateTime dateTimeFromText(const QString& x1) const { void* fun = LObjects::overrideFun(unique, 183); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QDateTime>(callOverrideFun(fun, 183, args)); } return QTimeEdit::dateTimeFromText(x1); }
    QString textFromDateTime(const QDateTime& x1) const { void* fun = LObjects::overrideFun(unique, 184); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QString>(callOverrideFun(fun, 184, args)); } return QTimeEdit::textFromDateTime(x1); }
    void clear() { void* fun = LObjects::overrideFun(unique, 185); if(fun) { if(callOverrideFun(fun, 185, 0).toBool()) return; } QTimeEdit::clear(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QTimeEdit::sizeHint(); }
    void stepBy(int x1) { void* fun = LObjects::overrideFun(unique, 108); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 108, args).toBool()) return; } QTimeEdit::stepBy(x1); }
    void fixup(QString& x1) const { void* fun = LObjects::overrideFun(unique, 107); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 107, args).toBool()) return; } QTimeEdit::fixup(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QTimeEdit::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QTimeEdit::focusNextPrevChild(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QTimeEdit::keyPressEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QTimeEdit::mousePressEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QTimeEdit::paintEvent(x1); }
    StepEnabled stepEnabled() const { void* fun = LObjects::overrideFun(unique, 110); if(fun) { return (StepEnabled)callOverrideFun(fun, 110, 0).toInt(); } return QTimeEdit::stepEnabled(); }
    QValidator::State validate(QString& x1, int& x2) const { void* fun = LObjects::overrideFun(unique, 109); if(fun) { const void* args[] = { &x1, &x2 }; return (QValidator::State)callOverrideFun(fun, 109, args).toInt(); } return QTimeEdit::validate(x1, x2); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QTimeEdit::wheelEvent(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QTimeEdit::inputMethodQuery(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QTimeEdit::minimumSizeHint(); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QTimeEdit::changeEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QTimeEdit::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QTimeEdit::contextMenuEvent(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QTimeEdit::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QTimeEdit::hideEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QTimeEdit::keyReleaseEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QTimeEdit::mouseMoveEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QTimeEdit::mouseReleaseEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QTimeEdit::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QTimeEdit::showEvent(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QTimeEdit::timerEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QTimeEdit::heightForWidth(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QTimeEdit::actionEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QTimeEdit::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QTimeEdit::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QTimeEdit::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QTimeEdit::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QTimeEdit::enterEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QTimeEdit::inputMethodEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QTimeEdit::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QTimeEdit::mouseDoubleClickEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QTimeEdit::moveEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QTimeEdit::tabletEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QTimeEdit::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QTimeEdit::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QTimeEdit::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QTimeEdit::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QTimeEdit::disconnectNotify(x1); }
};

class LTimeLine : public QTimeLine {
    Q_OBJECT
    friend class Q170;
public:
    LTimeLine(uint u, int x1 = 1000, QObject* x2 = 0) : QTimeLine(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    qreal valueForTime(int x1) const { void* fun = LObjects::overrideFun(unique, 286); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 286, args).toReal(); } return QTimeLine::valueForTime(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QTimeLine::timerEvent(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QTimeLine::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QTimeLine::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QTimeLine::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QTimeLine::disconnectNotify(x1); }
};

class LTimer : public QTimer {
    Q_OBJECT
    friend class Q171;
public:
    LTimer(uint u, QObject* x1 = 0) : QTimer(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QTimer::timerEvent(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QTimer::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QTimer::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QTimer::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QTimer::disconnectNotify(x1); }
};

class LToolBar : public QToolBar {
    Q_OBJECT
    friend class Q172;
public:
    LToolBar(uint u, const QString& x1, QWidget* x2 = 0) : QToolBar(x1, x2), unique(u) {}
    LToolBar(uint u, QWidget* x1 = 0) : QToolBar(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QToolBar::actionEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QToolBar::changeEvent(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QToolBar::childEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QToolBar::paintEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QToolBar::resizeEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QToolBar::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QToolBar::inputMethodQuery(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QToolBar::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QToolBar::sizeHint(); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QToolBar::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QToolBar::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QToolBar::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QToolBar::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QToolBar::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QToolBar::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QToolBar::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QToolBar::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QToolBar::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QToolBar::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QToolBar::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QToolBar::inputMethodEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QToolBar::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QToolBar::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QToolBar::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QToolBar::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QToolBar::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QToolBar::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QToolBar::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QToolBar::moveEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QToolBar::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QToolBar::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QToolBar::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QToolBar::metric(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QToolBar::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QToolBar::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QToolBar::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QToolBar::timerEvent(x1); }
};

class LToolBox : public QToolBox {
    Q_OBJECT
    friend class Q173;
public:
    LToolBox(uint u, QWidget* x1 = 0, Qt::WindowFlags x2 = 0) : QToolBox(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void itemInserted(int x1) { void* fun = LObjects::overrideFun(unique, 287); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 287, args).toBool()) return; } QToolBox::itemInserted(x1); }
    void itemRemoved(int x1) { void* fun = LObjects::overrideFun(unique, 288); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 288, args).toBool()) return; } QToolBox::itemRemoved(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QToolBox::changeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QToolBox::showEvent(x1); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QToolBox::sizeHint(); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QToolBox::paintEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QToolBox::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QToolBox::inputMethodQuery(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QToolBox::minimumSizeHint(); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QToolBox::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QToolBox::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QToolBox::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QToolBox::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QToolBox::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QToolBox::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QToolBox::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QToolBox::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QToolBox::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QToolBox::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QToolBox::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QToolBox::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QToolBox::inputMethodEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QToolBox::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QToolBox::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QToolBox::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QToolBox::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QToolBox::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QToolBox::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QToolBox::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QToolBox::moveEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QToolBox::resizeEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QToolBox::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QToolBox::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QToolBox::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QToolBox::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QToolBox::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QToolBox::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QToolBox::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QToolBox::timerEvent(x1); }
};

class LToolButton : public QToolButton {
    Q_OBJECT
    friend class Q174;
public:
    LToolButton(uint u, QWidget* x1 = 0) : QToolButton(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QToolButton::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QToolButton::sizeHint(); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QToolButton::actionEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QToolButton::changeEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QToolButton::enterEvent(x1); }
    bool hitButton(const QPoint& x1) const { void* fun = LObjects::overrideFun(unique, 11); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 11, args).toBool(); } return QToolButton::hitButton(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QToolButton::leaveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QToolButton::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QToolButton::mouseReleaseEvent(x1); }
    void nextCheckState() { void* fun = LObjects::overrideFun(unique, 12); if(fun) { if(callOverrideFun(fun, 12, 0).toBool()) return; } QToolButton::nextCheckState(); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QToolButton::paintEvent(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QToolButton::timerEvent(x1); }
    void checkStateSet() { void* fun = LObjects::overrideFun(unique, 10); if(fun) { if(callOverrideFun(fun, 10, 0).toBool()) return; } QToolButton::checkStateSet(); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QToolButton::focusInEvent(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QToolButton::focusOutEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QToolButton::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QToolButton::keyReleaseEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QToolButton::mouseMoveEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QToolButton::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QToolButton::inputMethodQuery(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QToolButton::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QToolButton::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QToolButton::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QToolButton::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QToolButton::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QToolButton::dropEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QToolButton::focusNextPrevChild(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QToolButton::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QToolButton::inputMethodEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QToolButton::mouseDoubleClickEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QToolButton::moveEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QToolButton::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QToolButton::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QToolButton::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QToolButton::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QToolButton::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QToolButton::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QToolButton::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QToolButton::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QToolButton::disconnectNotify(x1); }
};

class LTranslator : public QTranslator {
    Q_OBJECT
    friend class Q175;
public:
    LTranslator(uint u, QObject* x1 = 0) : QTranslator(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool isEmpty() const { void* fun = LObjects::overrideFun(unique, 141); if(fun) { return callOverrideFun(fun, 141, 0).toBool(); } return QTranslator::isEmpty(); }
    QString translate(const char* x1, const char* x2, const char* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 289); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QString>(callOverrideFun(fun, 289, args)); } return QTranslator::translate(x1, x2, x3); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QTranslator::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QTranslator::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QTranslator::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QTranslator::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QTranslator::timerEvent(x1); }
};

class LTreeView : public QTreeView {
    Q_OBJECT
    friend class Q176;
public:
    LTreeView(uint u, QWidget* x1 = 0) : QTreeView(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void drawBranches(QPainter* x1, const QRect& x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 290); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 290, args).toBool()) return; } QTreeView::drawBranches(x1, x2, x3); }
    void drawRow(QPainter* x1, const QStyleOptionViewItem& x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 291); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 291, args).toBool()) return; } QTreeView::drawRow(x1, x2, x3); }
    void dataChanged(const QModelIndex& x1, const QModelIndex& x2) { void* fun = LObjects::overrideFun(unique, 249); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 249, args).toBool()) return; } QTreeView::dataChanged(x1, x2); }
    QModelIndex indexAt(const QPoint& x1) const { void* fun = LObjects::overrideFun(unique, 76); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 76, args)); } return QTreeView::indexAt(x1); }
    void keyboardSearch(const QString& x1) { void* fun = LObjects::overrideFun(unique, 77); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 77, args).toBool()) return; } QTreeView::keyboardSearch(x1); }
    void reset() { void* fun = LObjects::overrideFun(unique, 148); if(fun) { if(callOverrideFun(fun, 148, 0).toBool()) return; } QTreeView::reset(); }
    void scrollTo(const QModelIndex& x1, ScrollHint x2 = EnsureVisible) { void* fun = LObjects::overrideFun(unique, 78); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 78, args).toBool()) return; } QTreeView::scrollTo(x1, x2); }
    void selectAll() { void* fun = LObjects::overrideFun(unique, 175); if(fun) { if(callOverrideFun(fun, 175, 0).toBool()) return; } QTreeView::selectAll(); }
    void setModel(QAbstractItemModel* x1) { void* fun = LObjects::overrideFun(unique, 79); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 79, args).toBool()) return; } QTreeView::setModel(x1); }
    void setRootIndex(const QModelIndex& x1) { void* fun = LObjects::overrideFun(unique, 176); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 176, args).toBool()) return; } QTreeView::setRootIndex(x1); }
    void setSelectionModel(QItemSelectionModel* x1) { void* fun = LObjects::overrideFun(unique, 80); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 80, args).toBool()) return; } QTreeView::setSelectionModel(x1); }
    QRect visualRect(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 83); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QRect>(callOverrideFun(fun, 83, args)); } return QTreeView::visualRect(x1); }
    void currentChanged(const QModelIndex& x1, const QModelIndex& x2) { void* fun = LObjects::overrideFun(unique, 177); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 177, args).toBool()) return; } QTreeView::currentChanged(x1, x2); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QTreeView::dragMoveEvent(x1); }
    int horizontalOffset() const { void* fun = LObjects::overrideFun(unique, 85); if(fun) { return callOverrideFun(fun, 85, 0).toInt(); } return QTreeView::horizontalOffset(); }
    bool isIndexHidden(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 86); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 86, args).toBool(); } return QTreeView::isIndexHidden(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QTreeView::keyPressEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QTreeView::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QTreeView::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QTreeView::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QTreeView::mouseReleaseEvent(x1); }
    QModelIndex moveCursor(CursorAction x1, Qt::KeyboardModifiers x2) { void* fun = LObjects::overrideFun(unique, 87); if(fun) { const void* args[] = { &x1, &x2 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 87, args)); } return QTreeView::moveCursor(x1, x2); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QTreeView::paintEvent(x1); }
    void rowsAboutToBeRemoved(const QModelIndex& x1, int x2, int x3) { void* fun = LObjects::overrideFun(unique, 250); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 250, args).toBool()) return; } QTreeView::rowsAboutToBeRemoved(x1, x2, x3); }
    void rowsInserted(const QModelIndex& x1, int x2, int x3) { void* fun = LObjects::overrideFun(unique, 178); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 178, args).toBool()) return; } QTreeView::rowsInserted(x1, x2, x3); }
    void scrollContentsBy(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 96); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 96, args).toBool()) return; } QTreeView::scrollContentsBy(x1, x2); }
    QModelIndexList selectedIndexes() const { void* fun = LObjects::overrideFun(unique, 88); if(fun) { return qVariantValue<QModelIndexList>(callOverrideFun(fun, 88, 0)); } return QTreeView::selectedIndexes(); }
    void selectionChanged(const QItemSelection& x1, const QItemSelection& x2) { void* fun = LObjects::overrideFun(unique, 251); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 251, args).toBool()) return; } QTreeView::selectionChanged(x1, x2); }
    void setSelection(const QRect& x1, QItemSelectionModel::SelectionFlags x2) { void* fun = LObjects::overrideFun(unique, 90); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 90, args).toBool()) return; } QTreeView::setSelection(x1, x2); }
    int sizeHintForColumn(int x1) const { void* fun = LObjects::overrideFun(unique, 81); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 81, args).toInt(); } return QTreeView::sizeHintForColumn(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QTreeView::timerEvent(x1); }
    void updateGeometries() { void* fun = LObjects::overrideFun(unique, 252); if(fun) { if(callOverrideFun(fun, 252, 0).toBool()) return; } QTreeView::updateGeometries(); }
    int verticalOffset() const { void* fun = LObjects::overrideFun(unique, 92); if(fun) { return callOverrideFun(fun, 92, 0).toInt(); } return QTreeView::verticalOffset(); }
    bool viewportEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 95); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 95, args).toBool(); } return QTreeView::viewportEvent(x1); }
    QRegion visualRegionForSelection(const QItemSelection& x1) const { void* fun = LObjects::overrideFun(unique, 94); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QRegion>(callOverrideFun(fun, 94, args)); } return QTreeView::visualRegionForSelection(x1); }
    int sizeHintForRow(int x1) const { void* fun = LObjects::overrideFun(unique, 82); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 82, args).toInt(); } return QTreeView::sizeHintForRow(x1); }
    bool edit(const QModelIndex& x1, EditTrigger x2, QEvent* x3) { void* fun = LObjects::overrideFun(unique, 84); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 84, args).toBool(); } return QTreeView::edit(x1, x2, x3); }
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex& x1, const QEvent* x2 = 0) const { void* fun = LObjects::overrideFun(unique, 89); if(fun) { const void* args[] = { &x1, &x2 }; return (QItemSelectionModel::SelectionFlags)callOverrideFun(fun, 89, args).toInt(); } return QTreeView::selectionCommand(x1, x2); }
    void startDrag(Qt::DropActions x1) { void* fun = LObjects::overrideFun(unique, 91); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 91, args).toBool()) return; } QTreeView::startDrag(x1); }
    QStyleOptionViewItem viewOptions() const { void* fun = LObjects::overrideFun(unique, 93); if(fun) { return qVariantValue<QStyleOptionViewItem>(callOverrideFun(fun, 93, 0)); } return QTreeView::viewOptions(); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QTreeView::inputMethodQuery(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QTreeView::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QTreeView::dragLeaveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QTreeView::dropEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QTreeView::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QTreeView::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QTreeView::focusOutEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QTreeView::inputMethodEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QTreeView::resizeEvent(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QTreeView::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QTreeView::sizeHint(); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QTreeView::contextMenuEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QTreeView::wheelEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QTreeView::changeEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QTreeView::heightForWidth(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QTreeView::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QTreeView::closeEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QTreeView::enterEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QTreeView::hideEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QTreeView::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QTreeView::leaveEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QTreeView::moveEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QTreeView::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QTreeView::tabletEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QTreeView::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QTreeView::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QTreeView::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QTreeView::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QTreeView::disconnectNotify(x1); }
};

class LTreeWidget : public QTreeWidget {
    Q_OBJECT
    friend class Q177;
public:
    LTreeWidget(uint u, QWidget* x1 = 0) : QTreeWidget(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool dropMimeData(QTreeWidgetItem* x1, int x2, const QMimeData* x3, Qt::DropAction x4) { void* fun = LObjects::overrideFun(unique, 292); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return callOverrideFun(fun, 292, args).toBool(); } return QTreeWidget::dropMimeData(x1, x2, x3, x4); }
    QMimeData* mimeData(const QList<QTreeWidgetItem*> x1) const { void* fun = LObjects::overrideFun(unique, 293); if(fun) { const void* args[] = { &x1 }; return (QMimeData*)qVariantValue<void*>(callOverrideFun(fun, 293, args)); } return QTreeWidget::mimeData(x1); }
    QStringList mimeTypes() const { void* fun = LObjects::overrideFun(unique, 66); if(fun) { return qVariantValue<QStringList>(callOverrideFun(fun, 66, 0)); } return QTreeWidget::mimeTypes(); }
    Qt::DropActions supportedDropActions() const { void* fun = LObjects::overrideFun(unique, 75); if(fun) { return (Qt::DropActions)callOverrideFun(fun, 75, 0).toInt(); } return QTreeWidget::supportedDropActions(); }
    void setSelectionModel(QItemSelectionModel* x1) { void* fun = LObjects::overrideFun(unique, 80); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 80, args).toBool()) return; } QTreeWidget::setSelectionModel(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QTreeWidget::dropEvent(x1); }
    void drawBranches(QPainter* x1, const QRect& x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 290); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 290, args).toBool()) return; } QTreeWidget::drawBranches(x1, x2, x3); }
    void drawRow(QPainter* x1, const QStyleOptionViewItem& x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 291); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 291, args).toBool()) return; } QTreeWidget::drawRow(x1, x2, x3); }
    void dataChanged(const QModelIndex& x1, const QModelIndex& x2) { void* fun = LObjects::overrideFun(unique, 249); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 249, args).toBool()) return; } QTreeWidget::dataChanged(x1, x2); }
    QModelIndex indexAt(const QPoint& x1) const { void* fun = LObjects::overrideFun(unique, 76); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 76, args)); } return QTreeWidget::indexAt(x1); }
    void keyboardSearch(const QString& x1) { void* fun = LObjects::overrideFun(unique, 77); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 77, args).toBool()) return; } QTreeWidget::keyboardSearch(x1); }
    void reset() { void* fun = LObjects::overrideFun(unique, 148); if(fun) { if(callOverrideFun(fun, 148, 0).toBool()) return; } QTreeWidget::reset(); }
    void scrollTo(const QModelIndex& x1, ScrollHint x2 = EnsureVisible) { void* fun = LObjects::overrideFun(unique, 78); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 78, args).toBool()) return; } QTreeWidget::scrollTo(x1, x2); }
    void selectAll() { void* fun = LObjects::overrideFun(unique, 175); if(fun) { if(callOverrideFun(fun, 175, 0).toBool()) return; } QTreeWidget::selectAll(); }
    void setRootIndex(const QModelIndex& x1) { void* fun = LObjects::overrideFun(unique, 176); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 176, args).toBool()) return; } QTreeWidget::setRootIndex(x1); }
    QRect visualRect(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 83); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QRect>(callOverrideFun(fun, 83, args)); } return QTreeWidget::visualRect(x1); }
    void currentChanged(const QModelIndex& x1, const QModelIndex& x2) { void* fun = LObjects::overrideFun(unique, 177); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 177, args).toBool()) return; } QTreeWidget::currentChanged(x1, x2); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QTreeWidget::dragMoveEvent(x1); }
    int horizontalOffset() const { void* fun = LObjects::overrideFun(unique, 85); if(fun) { return callOverrideFun(fun, 85, 0).toInt(); } return QTreeWidget::horizontalOffset(); }
    bool isIndexHidden(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 86); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 86, args).toBool(); } return QTreeWidget::isIndexHidden(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QTreeWidget::keyPressEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QTreeWidget::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QTreeWidget::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QTreeWidget::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QTreeWidget::mouseReleaseEvent(x1); }
    QModelIndex moveCursor(CursorAction x1, Qt::KeyboardModifiers x2) { void* fun = LObjects::overrideFun(unique, 87); if(fun) { const void* args[] = { &x1, &x2 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 87, args)); } return QTreeWidget::moveCursor(x1, x2); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QTreeWidget::paintEvent(x1); }
    void rowsAboutToBeRemoved(const QModelIndex& x1, int x2, int x3) { void* fun = LObjects::overrideFun(unique, 250); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 250, args).toBool()) return; } QTreeWidget::rowsAboutToBeRemoved(x1, x2, x3); }
    void rowsInserted(const QModelIndex& x1, int x2, int x3) { void* fun = LObjects::overrideFun(unique, 178); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 178, args).toBool()) return; } QTreeWidget::rowsInserted(x1, x2, x3); }
    void scrollContentsBy(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 96); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 96, args).toBool()) return; } QTreeWidget::scrollContentsBy(x1, x2); }
    QModelIndexList selectedIndexes() const { void* fun = LObjects::overrideFun(unique, 88); if(fun) { return qVariantValue<QModelIndexList>(callOverrideFun(fun, 88, 0)); } return QTreeWidget::selectedIndexes(); }
    void selectionChanged(const QItemSelection& x1, const QItemSelection& x2) { void* fun = LObjects::overrideFun(unique, 251); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 251, args).toBool()) return; } QTreeWidget::selectionChanged(x1, x2); }
    void setSelection(const QRect& x1, QItemSelectionModel::SelectionFlags x2) { void* fun = LObjects::overrideFun(unique, 90); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 90, args).toBool()) return; } QTreeWidget::setSelection(x1, x2); }
    int sizeHintForColumn(int x1) const { void* fun = LObjects::overrideFun(unique, 81); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 81, args).toInt(); } return QTreeWidget::sizeHintForColumn(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QTreeWidget::timerEvent(x1); }
    void updateGeometries() { void* fun = LObjects::overrideFun(unique, 252); if(fun) { if(callOverrideFun(fun, 252, 0).toBool()) return; } QTreeWidget::updateGeometries(); }
    int verticalOffset() const { void* fun = LObjects::overrideFun(unique, 92); if(fun) { return callOverrideFun(fun, 92, 0).toInt(); } return QTreeWidget::verticalOffset(); }
    bool viewportEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 95); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 95, args).toBool(); } return QTreeWidget::viewportEvent(x1); }
    QRegion visualRegionForSelection(const QItemSelection& x1) const { void* fun = LObjects::overrideFun(unique, 94); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QRegion>(callOverrideFun(fun, 94, args)); } return QTreeWidget::visualRegionForSelection(x1); }
    int sizeHintForRow(int x1) const { void* fun = LObjects::overrideFun(unique, 82); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 82, args).toInt(); } return QTreeWidget::sizeHintForRow(x1); }
    bool edit(const QModelIndex& x1, EditTrigger x2, QEvent* x3) { void* fun = LObjects::overrideFun(unique, 84); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 84, args).toBool(); } return QTreeWidget::edit(x1, x2, x3); }
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex& x1, const QEvent* x2 = 0) const { void* fun = LObjects::overrideFun(unique, 89); if(fun) { const void* args[] = { &x1, &x2 }; return (QItemSelectionModel::SelectionFlags)callOverrideFun(fun, 89, args).toInt(); } return QTreeWidget::selectionCommand(x1, x2); }
    void startDrag(Qt::DropActions x1) { void* fun = LObjects::overrideFun(unique, 91); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 91, args).toBool()) return; } QTreeWidget::startDrag(x1); }
    QStyleOptionViewItem viewOptions() const { void* fun = LObjects::overrideFun(unique, 93); if(fun) { return qVariantValue<QStyleOptionViewItem>(callOverrideFun(fun, 93, 0)); } return QTreeWidget::viewOptions(); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QTreeWidget::inputMethodQuery(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QTreeWidget::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QTreeWidget::dragLeaveEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QTreeWidget::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QTreeWidget::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QTreeWidget::focusOutEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QTreeWidget::inputMethodEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QTreeWidget::resizeEvent(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QTreeWidget::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QTreeWidget::sizeHint(); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QTreeWidget::contextMenuEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QTreeWidget::wheelEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QTreeWidget::changeEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QTreeWidget::heightForWidth(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QTreeWidget::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QTreeWidget::closeEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QTreeWidget::enterEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QTreeWidget::hideEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QTreeWidget::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QTreeWidget::leaveEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QTreeWidget::moveEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QTreeWidget::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QTreeWidget::tabletEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QTreeWidget::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QTreeWidget::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QTreeWidget::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QTreeWidget::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QTreeWidget::disconnectNotify(x1); }
};

class LUndoGroup : public QUndoGroup {
    Q_OBJECT
    friend class Q178;
public:
    LUndoGroup(uint u, QObject* x1 = 0) : QUndoGroup(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QUndoGroup::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QUndoGroup::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QUndoGroup::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QUndoGroup::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QUndoGroup::timerEvent(x1); }
};

class LUndoStack : public QUndoStack {
    Q_OBJECT
    friend class Q179;
public:
    LUndoStack(uint u, QObject* x1 = 0) : QUndoStack(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QUndoStack::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QUndoStack::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QUndoStack::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QUndoStack::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QUndoStack::timerEvent(x1); }
};

class LUndoView : public QUndoView {
    Q_OBJECT
    friend class Q180;
public:
    LUndoView(uint u, QWidget* x1 = 0) : QUndoView(x1), unique(u) {}
    LUndoView(uint u, QUndoStack* x1, QWidget* x2 = 0) : QUndoView(x1, x2), unique(u) {}
    LUndoView(uint u, QUndoGroup* x1, QWidget* x2 = 0) : QUndoView(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QModelIndex indexAt(const QPoint& x1) const { void* fun = LObjects::overrideFun(unique, 76); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 76, args)); } return QUndoView::indexAt(x1); }
    void scrollTo(const QModelIndex& x1, ScrollHint x2 = EnsureVisible) { void* fun = LObjects::overrideFun(unique, 78); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 78, args).toBool()) return; } QUndoView::scrollTo(x1, x2); }
    QRect visualRect(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 83); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QRect>(callOverrideFun(fun, 83, args)); } return QUndoView::visualRect(x1); }
    void currentChanged(const QModelIndex& x1, const QModelIndex& x2) { void* fun = LObjects::overrideFun(unique, 177); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 177, args).toBool()) return; } QUndoView::currentChanged(x1, x2); }
    void dataChanged(const QModelIndex& x1, const QModelIndex& x2) { void* fun = LObjects::overrideFun(unique, 249); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 249, args).toBool()) return; } QUndoView::dataChanged(x1, x2); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QUndoView::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QUndoView::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QUndoView::dropEvent(x1); }
    int horizontalOffset() const { void* fun = LObjects::overrideFun(unique, 85); if(fun) { return callOverrideFun(fun, 85, 0).toInt(); } return QUndoView::horizontalOffset(); }
    bool isIndexHidden(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 86); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 86, args).toBool(); } return QUndoView::isIndexHidden(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QUndoView::mouseMoveEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QUndoView::mouseReleaseEvent(x1); }
    QModelIndex moveCursor(CursorAction x1, Qt::KeyboardModifiers x2) { void* fun = LObjects::overrideFun(unique, 87); if(fun) { const void* args[] = { &x1, &x2 }; return qVariantValue<QModelIndex>(callOverrideFun(fun, 87, args)); } return QUndoView::moveCursor(x1, x2); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QUndoView::paintEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QUndoView::resizeEvent(x1); }
    void rowsAboutToBeRemoved(const QModelIndex& x1, int x2, int x3) { void* fun = LObjects::overrideFun(unique, 250); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 250, args).toBool()) return; } QUndoView::rowsAboutToBeRemoved(x1, x2, x3); }
    void rowsInserted(const QModelIndex& x1, int x2, int x3) { void* fun = LObjects::overrideFun(unique, 178); if(fun) { const void* args[] = { &x1, &x2, &x3 }; if(callOverrideFun(fun, 178, args).toBool()) return; } QUndoView::rowsInserted(x1, x2, x3); }
    QModelIndexList selectedIndexes() const { void* fun = LObjects::overrideFun(unique, 88); if(fun) { return qVariantValue<QModelIndexList>(callOverrideFun(fun, 88, 0)); } return QUndoView::selectedIndexes(); }
    void selectionChanged(const QItemSelection& x1, const QItemSelection& x2) { void* fun = LObjects::overrideFun(unique, 251); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 251, args).toBool()) return; } QUndoView::selectionChanged(x1, x2); }
    void setSelection(const QRect& x1, QItemSelectionModel::SelectionFlags x2) { void* fun = LObjects::overrideFun(unique, 90); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 90, args).toBool()) return; } QUndoView::setSelection(x1, x2); }
    void startDrag(Qt::DropActions x1) { void* fun = LObjects::overrideFun(unique, 91); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 91, args).toBool()) return; } QUndoView::startDrag(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QUndoView::timerEvent(x1); }
    void updateGeometries() { void* fun = LObjects::overrideFun(unique, 252); if(fun) { if(callOverrideFun(fun, 252, 0).toBool()) return; } QUndoView::updateGeometries(); }
    int verticalOffset() const { void* fun = LObjects::overrideFun(unique, 92); if(fun) { return callOverrideFun(fun, 92, 0).toInt(); } return QUndoView::verticalOffset(); }
    QStyleOptionViewItem viewOptions() const { void* fun = LObjects::overrideFun(unique, 93); if(fun) { return qVariantValue<QStyleOptionViewItem>(callOverrideFun(fun, 93, 0)); } return QUndoView::viewOptions(); }
    QRegion visualRegionForSelection(const QItemSelection& x1) const { void* fun = LObjects::overrideFun(unique, 94); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QRegion>(callOverrideFun(fun, 94, args)); } return QUndoView::visualRegionForSelection(x1); }
    void keyboardSearch(const QString& x1) { void* fun = LObjects::overrideFun(unique, 77); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 77, args).toBool()) return; } QUndoView::keyboardSearch(x1); }
    void setModel(QAbstractItemModel* x1) { void* fun = LObjects::overrideFun(unique, 79); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 79, args).toBool()) return; } QUndoView::setModel(x1); }
    void setSelectionModel(QItemSelectionModel* x1) { void* fun = LObjects::overrideFun(unique, 80); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 80, args).toBool()) return; } QUndoView::setSelectionModel(x1); }
    int sizeHintForColumn(int x1) const { void* fun = LObjects::overrideFun(unique, 81); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 81, args).toInt(); } return QUndoView::sizeHintForColumn(x1); }
    int sizeHintForRow(int x1) const { void* fun = LObjects::overrideFun(unique, 82); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 82, args).toInt(); } return QUndoView::sizeHintForRow(x1); }
    bool edit(const QModelIndex& x1, EditTrigger x2, QEvent* x3) { void* fun = LObjects::overrideFun(unique, 84); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 84, args).toBool(); } return QUndoView::edit(x1, x2, x3); }
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex& x1, const QEvent* x2 = 0) const { void* fun = LObjects::overrideFun(unique, 89); if(fun) { const void* args[] = { &x1, &x2 }; return (QItemSelectionModel::SelectionFlags)callOverrideFun(fun, 89, args).toInt(); } return QUndoView::selectionCommand(x1, x2); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QUndoView::inputMethodQuery(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QUndoView::dragEnterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QUndoView::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QUndoView::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QUndoView::focusOutEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QUndoView::inputMethodEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QUndoView::keyPressEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QUndoView::mouseDoubleClickEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QUndoView::mousePressEvent(x1); }
    bool viewportEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 95); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 95, args).toBool(); } return QUndoView::viewportEvent(x1); }
    void scrollContentsBy(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 96); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 96, args).toBool()) return; } QUndoView::scrollContentsBy(x1, x2); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QUndoView::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QUndoView::sizeHint(); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QUndoView::contextMenuEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QUndoView::wheelEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QUndoView::changeEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QUndoView::heightForWidth(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QUndoView::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QUndoView::closeEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QUndoView::enterEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QUndoView::hideEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QUndoView::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QUndoView::leaveEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QUndoView::moveEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QUndoView::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QUndoView::tabletEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QUndoView::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QUndoView::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QUndoView::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QUndoView::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QUndoView::disconnectNotify(x1); }
};

class LVBoxLayout : public QVBoxLayout {
    Q_OBJECT
    friend class Q181;
public:
    LVBoxLayout(uint u) : unique(u) {}
    LVBoxLayout(uint u, QWidget* x1) : QVBoxLayout(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void addItem(QLayoutItem* x1) { void* fun = LObjects::overrideFun(unique, 128); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 128, args).toBool()) return; } QVBoxLayout::addItem(x1); }
    int count() const { void* fun = LObjects::overrideFun(unique, 129); if(fun) { return callOverrideFun(fun, 129, 0).toInt(); } return QVBoxLayout::count(); }
    Qt::Orientations expandingDirections() const { void* fun = LObjects::overrideFun(unique, 130); if(fun) { return (Qt::Orientations)callOverrideFun(fun, 130, 0).toInt(); } return QVBoxLayout::expandingDirections(); }
    bool hasHeightForWidth() const { void* fun = LObjects::overrideFun(unique, 131); if(fun) { return callOverrideFun(fun, 131, 0).toBool(); } return QVBoxLayout::hasHeightForWidth(); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QVBoxLayout::heightForWidth(x1); }
    void invalidate() { void* fun = LObjects::overrideFun(unique, 132); if(fun) { if(callOverrideFun(fun, 132, 0).toBool()) return; } QVBoxLayout::invalidate(); }
    QLayoutItem* itemAt(int x1) const { void* fun = LObjects::overrideFun(unique, 133); if(fun) { const void* args[] = { &x1 }; return (QLayoutItem*)qVariantValue<void*>(callOverrideFun(fun, 133, args)); } return QVBoxLayout::itemAt(x1); }
    QSize maximumSize() const { void* fun = LObjects::overrideFun(unique, 134); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 134, 0)); } return QVBoxLayout::maximumSize(); }
    int minimumHeightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 135); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 135, args).toInt(); } return QVBoxLayout::minimumHeightForWidth(x1); }
    QSize minimumSize() const { void* fun = LObjects::overrideFun(unique, 136); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 136, 0)); } return QVBoxLayout::minimumSize(); }
    void setGeometry(const QRect& x1) { void* fun = LObjects::overrideFun(unique, 137); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 137, args).toBool()) return; } QVBoxLayout::setGeometry(x1); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QVBoxLayout::sizeHint(); }
    QLayoutItem* takeAt(int x1) { void* fun = LObjects::overrideFun(unique, 138); if(fun) { const void* args[] = { &x1 }; return (QLayoutItem*)qVariantValue<void*>(callOverrideFun(fun, 138, args)); } return QVBoxLayout::takeAt(x1); }
    int indexOf(QWidget* x1) const { void* fun = LObjects::overrideFun(unique, 139); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 139, args).toInt(); } return QVBoxLayout::indexOf(x1); }
    QRect geometry() const { void* fun = LObjects::overrideFun(unique, 140); if(fun) { return qVariantValue<QRect>(callOverrideFun(fun, 140, 0)); } return QVBoxLayout::geometry(); }
    bool isEmpty() const { void* fun = LObjects::overrideFun(unique, 141); if(fun) { return callOverrideFun(fun, 141, 0).toBool(); } return QVBoxLayout::isEmpty(); }
    QLayout* layout() { void* fun = LObjects::overrideFun(unique, 142); if(fun) { return (QLayout*)qVariantValue<void*>(callOverrideFun(fun, 142, 0)); } return QVBoxLayout::layout(); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QVBoxLayout::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QVBoxLayout::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QVBoxLayout::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QVBoxLayout::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QVBoxLayout::timerEvent(x1); }
};

class LValidator : public QValidator {
    Q_OBJECT
    friend class Q182;
public:
    LValidator(uint u, QObject* x1 = 0) : QValidator(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void fixup(QString& x1) const { void* fun = LObjects::overrideFun(unique, 107); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 107, args).toBool()) return; } QValidator::fixup(x1); }
    State validate(QString& x1, int& x2) const { void* fun = LObjects::overrideFun(unique, 109); if(fun) { const void* args[] = { &x1, &x2 }; return (State)callOverrideFun(fun, 109, args).toInt(); } return (State)0; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QValidator::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QValidator::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QValidator::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QValidator::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QValidator::timerEvent(x1); }
};

class LVariantAnimation : public QVariantAnimation {
    Q_OBJECT
    friend class Q183;
public:
    LVariantAnimation(uint u, QObject* x1 = 0) : QVariantAnimation(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QVariant interpolated(const QVariant& x1, const QVariant& x2, qreal x3) const { void* fun = LObjects::overrideFun(unique, 266); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QVariant>(callOverrideFun(fun, 266, args)); } return QVariantAnimation::interpolated(x1, x2, x3); }
    void updateCurrentValue(const QVariant& x1) { void* fun = LObjects::overrideFun(unique, 265); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 265, args).toBool()) return; }}
    int duration() const { void* fun = LObjects::overrideFun(unique, 1); if(fun) { return callOverrideFun(fun, 1, 0).toInt(); } return QVariantAnimation::duration(); }
    void updateCurrentTime(int x1) { void* fun = LObjects::overrideFun(unique, 2); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 2, args).toBool()) return; } QVariantAnimation::updateCurrentTime(x1); }
    void updateState(QAbstractAnimation::State x1, QAbstractAnimation::State x2) { void* fun = LObjects::overrideFun(unique, 4); if(fun) { const void* args[] = { &x1, &x2 }; if(callOverrideFun(fun, 4, args).toBool()) return; } QVariantAnimation::updateState(x1, x2); }
    void updateDirection(QAbstractAnimation::Direction x1) { void* fun = LObjects::overrideFun(unique, 3); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 3, args).toBool()) return; } QVariantAnimation::updateDirection(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QVariantAnimation::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QVariantAnimation::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QVariantAnimation::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QVariantAnimation::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QVariantAnimation::timerEvent(x1); }
};

class LWidget : public QWidget {
    Q_OBJECT
    friend class Q184;
public:
    LWidget(uint u, QWidget* x1 = 0, Qt::WindowFlags x2 = 0) : QWidget(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QWidget::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QWidget::inputMethodQuery(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QWidget::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QWidget::sizeHint(); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QWidget::actionEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QWidget::changeEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QWidget::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QWidget::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QWidget::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QWidget::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QWidget::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QWidget::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QWidget::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QWidget::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QWidget::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QWidget::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QWidget::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QWidget::inputMethodEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QWidget::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QWidget::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QWidget::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QWidget::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QWidget::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QWidget::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QWidget::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QWidget::moveEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QWidget::paintEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QWidget::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QWidget::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QWidget::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QWidget::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QWidget::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QWidget::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QWidget::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QWidget::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QWidget::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QWidget::timerEvent(x1); }
};

class LWidgetAction : public QWidgetAction {
    Q_OBJECT
    friend class Q185;
public:
    LWidgetAction(uint u, QObject* x1) : QWidgetAction(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QWidget* createWidget(QWidget* x1) { void* fun = LObjects::overrideFun(unique, 294); if(fun) { const void* args[] = { &x1 }; return (QWidget*)qVariantValue<void*>(callOverrideFun(fun, 294, args)); } return QWidgetAction::createWidget(x1); }
    void deleteWidget(QWidget* x1) { void* fun = LObjects::overrideFun(unique, 295); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 295, args).toBool()) return; } QWidgetAction::deleteWidget(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QWidgetAction::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QWidgetAction::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QWidgetAction::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QWidgetAction::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QWidgetAction::timerEvent(x1); }
};

class LWindowsStyle : public QWindowsStyle {
    Q_OBJECT
    friend class Q186;
public:
    LWindowsStyle(uint u) : unique(u) {}

    static NumList overrideIds;
    uint unique;

    void drawComplexControl(ComplexControl x1, const QStyleOptionComplex* x2, QPainter* x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 155); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; if(callOverrideFun(fun, 155, args).toBool()) return; } QWindowsStyle::drawComplexControl(x1, x2, x3, x4); }
    void drawControl(ControlElement x1, const QStyleOption* x2, QPainter* x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 151); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; if(callOverrideFun(fun, 151, args).toBool()) return; } QWindowsStyle::drawControl(x1, x2, x3, x4); }
    void drawPrimitive(PrimitiveElement x1, const QStyleOption* x2, QPainter* x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 152); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; if(callOverrideFun(fun, 152, args).toBool()) return; } QWindowsStyle::drawPrimitive(x1, x2, x3, x4); }
    int pixelMetric(PixelMetric x1, const QStyleOption* x2 = 0, const QWidget* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 153); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return callOverrideFun(fun, 153, args).toInt(); } return QWindowsStyle::pixelMetric(x1, x2, x3); }
    void polish(QApplication* x1) { void* fun = LObjects::overrideFun(unique, 164); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 164, args).toBool()) return; } QWindowsStyle::polish(x1); }
    QSize sizeFromContents(ContentsType x1, const QStyleOption* x2, const QSize& x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 157); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return qVariantValue<QSize>(callOverrideFun(fun, 157, args)); } return QWindowsStyle::sizeFromContents(x1, x2, x3, x4); }
    QPixmap standardPixmap(StandardPixmap x1, const QStyleOption* x2, const QWidget* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 158); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QPixmap>(callOverrideFun(fun, 158, args)); } return QWindowsStyle::standardPixmap(x1, x2, x3); }
    int styleHint(StyleHint x1, const QStyleOption* x2 = 0, const QWidget* x3 = 0, QStyleHintReturn* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 159); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return callOverrideFun(fun, 159, args).toInt(); } return QWindowsStyle::styleHint(x1, x2, x3, x4); }
    QRect subElementRect(SubElement x1, const QStyleOption* x2, const QWidget* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 161); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QRect>(callOverrideFun(fun, 161, args)); } return QWindowsStyle::subElementRect(x1, x2, x3); }
    void unpolish(QApplication* x1) { void* fun = LObjects::overrideFun(unique, 167); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 167, args).toBool()) return; } QWindowsStyle::unpolish(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QWindowsStyle::timerEvent(x1); }
    QPixmap generatedIconPixmap(QIcon::Mode x1, const QPixmap& x2, const QStyleOption* x3) const { void* fun = LObjects::overrideFun(unique, 162); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QPixmap>(callOverrideFun(fun, 162, args)); } return QWindowsStyle::generatedIconPixmap(x1, x2, x3); }
    SubControl hitTestComplexControl(ComplexControl x1, const QStyleOptionComplex* x2, const QPoint& x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 163); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return (SubControl)callOverrideFun(fun, 163, args).toInt(); } return QWindowsStyle::hitTestComplexControl(x1, x2, x3, x4); }
    QRect subControlRect(ComplexControl x1, const QStyleOptionComplex* x2, SubControl x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 160); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; return qVariantValue<QRect>(callOverrideFun(fun, 160, args)); } return QWindowsStyle::subControlRect(x1, x2, x3, x4); }
    void drawItemPixmap(QPainter* x1, const QRect& x2, int x3, const QPixmap& x4) const { void* fun = LObjects::overrideFun(unique, 168); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; if(callOverrideFun(fun, 168, args).toBool()) return; } QWindowsStyle::drawItemPixmap(x1, x2, x3, x4); }
    void drawItemText(QPainter* x1, const QRect& x2, int x3, const QPalette& x4, bool x5, const QString& x6, QPalette::ColorRole x7 = QPalette::NoRole) const { void* fun = LObjects::overrideFun(unique, 169); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5, &x6, &x7 }; if(callOverrideFun(fun, 169, args).toBool()) return; } QWindowsStyle::drawItemText(x1, x2, x3, x4, x5, x6, x7); }
    QRect itemPixmapRect(const QRect& x1, int x2, const QPixmap& x3) const { void* fun = LObjects::overrideFun(unique, 170); if(fun) { const void* args[] = { &x1, &x2, &x3 }; return qVariantValue<QRect>(callOverrideFun(fun, 170, args)); } return QWindowsStyle::itemPixmapRect(x1, x2, x3); }
    QRect itemTextRect(const QFontMetrics& x1, const QRect& x2, int x3, bool x4, const QString& x5) const { void* fun = LObjects::overrideFun(unique, 171); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; return qVariantValue<QRect>(callOverrideFun(fun, 171, args)); } return QWindowsStyle::itemTextRect(x1, x2, x3, x4, x5); }
    QPalette standardPalette() const { void* fun = LObjects::overrideFun(unique, 154); if(fun) { return qVariantValue<QPalette>(callOverrideFun(fun, 154, 0)); } return QWindowsStyle::standardPalette(); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QWindowsStyle::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QWindowsStyle::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QWindowsStyle::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QWindowsStyle::disconnectNotify(x1); }
};

class LWizard : public QWizard {
    Q_OBJECT
    friend class Q187;
public:
    LWizard(uint u, QWidget* x1 = 0, Qt::WindowFlags x2 = 0) : QWizard(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    int nextId() const { void* fun = LObjects::overrideFun(unique, 296); if(fun) { return callOverrideFun(fun, 296, 0).toInt(); } return QWizard::nextId(); }
    bool validateCurrentPage() { void* fun = LObjects::overrideFun(unique, 297); if(fun) { return callOverrideFun(fun, 297, 0).toBool(); } return QWizard::validateCurrentPage(); }
    void cleanupPage(int x1) { void* fun = LObjects::overrideFun(unique, 298); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 298, args).toBool()) return; } QWizard::cleanupPage(x1); }
    void initializePage(int x1) { void* fun = LObjects::overrideFun(unique, 299); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 299, args).toBool()) return; } QWizard::initializePage(x1); }
    void setVisible(bool x1) { void* fun = LObjects::overrideFun(unique, 98); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 98, args).toBool()) return; } QWizard::setVisible(x1); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QWizard::sizeHint(); }
    void done(int x1) { void* fun = LObjects::overrideFun(unique, 173); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 173, args).toBool()) return; } QWizard::done(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QWizard::paintEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QWizard::resizeEvent(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QWizard::minimumSizeHint(); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QWizard::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QWizard::contextMenuEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QWizard::keyPressEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QWizard::showEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QWizard::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QWizard::inputMethodQuery(x1); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QWizard::actionEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QWizard::changeEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QWizard::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QWizard::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QWizard::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QWizard::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QWizard::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QWizard::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QWizard::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QWizard::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QWizard::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QWizard::inputMethodEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QWizard::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QWizard::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QWizard::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QWizard::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QWizard::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QWizard::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QWizard::moveEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QWizard::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QWizard::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QWizard::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QWizard::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QWizard::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QWizard::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QWizard::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QWizard::timerEvent(x1); }
};

class LWizardPage : public QWizardPage {
    Q_OBJECT
    friend class Q188;
public:
    LWizardPage(uint u, QWidget* x1 = 0) : QWizardPage(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void cleanupPage() { void* fun = LObjects::overrideFun(unique, 300); if(fun) { if(callOverrideFun(fun, 300, 0).toBool()) return; } QWizardPage::cleanupPage(); }
    void initializePage() { void* fun = LObjects::overrideFun(unique, 301); if(fun) { if(callOverrideFun(fun, 301, 0).toBool()) return; } QWizardPage::initializePage(); }
    bool isComplete() const { void* fun = LObjects::overrideFun(unique, 302); if(fun) { return callOverrideFun(fun, 302, 0).toBool(); } return QWizardPage::isComplete(); }
    int nextId() const { void* fun = LObjects::overrideFun(unique, 296); if(fun) { return callOverrideFun(fun, 296, 0).toInt(); } return QWizardPage::nextId(); }
    bool validatePage() { void* fun = LObjects::overrideFun(unique, 303); if(fun) { return callOverrideFun(fun, 303, 0).toBool(); } return QWizardPage::validatePage(); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QWizardPage::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QWizardPage::inputMethodQuery(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QWizardPage::minimumSizeHint(); }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QWizardPage::sizeHint(); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QWizardPage::actionEvent(x1); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QWizardPage::changeEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QWizardPage::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QWizardPage::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QWizardPage::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QWizardPage::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QWizardPage::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QWizardPage::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QWizardPage::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QWizardPage::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QWizardPage::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QWizardPage::focusOutEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QWizardPage::hideEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QWizardPage::inputMethodEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QWizardPage::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QWizardPage::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QWizardPage::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QWizardPage::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QWizardPage::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QWizardPage::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QWizardPage::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QWizardPage::moveEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QWizardPage::paintEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QWizardPage::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QWizardPage::showEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QWizardPage::tabletEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QWizardPage::wheelEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QWizardPage::metric(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QWizardPage::childEvent(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QWizardPage::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QWizardPage::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QWizardPage::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QWizardPage::timerEvent(x1); }
};

class LWorkspace : public QWorkspace {
    Q_OBJECT
    friend class Q189;
public:
    LWorkspace(uint u, QWidget* x1 = 0) : QWorkspace(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 25); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 25, 0)); } return QWorkspace::sizeHint(); }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 13); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 13, args).toBool()) return; } QWorkspace::changeEvent(x1); }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 5, args).toBool()) return; } QWorkspace::childEvent(x1); }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 35); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 35, args).toBool()) return; } QWorkspace::hideEvent(x1); }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 21, args).toBool()) return; } QWorkspace::paintEvent(x1); }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 40, args).toBool()) return; } QWorkspace::resizeEvent(x1); }
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 41, args).toBool()) return; } QWorkspace::showEvent(x1); }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 43, args).toBool()) return; } QWorkspace::wheelEvent(x1); }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 22); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 22, args).toInt(); } return QWorkspace::heightForWidth(x1); }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 23); if(fun) { const void* args[] = { &x1 }; return qVariantValue<QVariant>(callOverrideFun(fun, 23, args)); } return QWorkspace::inputMethodQuery(x1); }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 24); if(fun) { return qVariantValue<QSize>(callOverrideFun(fun, 24, 0)); } return QWorkspace::minimumSizeHint(); }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 26); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 26, args).toBool()) return; } QWorkspace::actionEvent(x1); }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 27, args).toBool()) return; } QWorkspace::closeEvent(x1); }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 28, args).toBool()) return; } QWorkspace::contextMenuEvent(x1); }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 29, args).toBool()) return; } QWorkspace::dragEnterEvent(x1); }
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 30, args).toBool()) return; } QWorkspace::dragLeaveEvent(x1); }
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 31, args).toBool()) return; } QWorkspace::dragMoveEvent(x1); }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 32, args).toBool()) return; } QWorkspace::dropEvent(x1); }
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 33, args).toBool()) return; } QWorkspace::enterEvent(x1); }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 14, args).toBool()) return; } QWorkspace::focusInEvent(x1); }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 34, args).toBool(); } return QWorkspace::focusNextPrevChild(x1); }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 15, args).toBool()) return; } QWorkspace::focusOutEvent(x1); }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 36, args).toBool()) return; } QWorkspace::inputMethodEvent(x1); }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 16, args).toBool()) return; } QWorkspace::keyPressEvent(x1); }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 17, args).toBool()) return; } QWorkspace::keyReleaseEvent(x1); }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 37, args).toBool()) return; } QWorkspace::leaveEvent(x1); }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 38, args).toBool()) return; } QWorkspace::mouseDoubleClickEvent(x1); }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 18, args).toBool()) return; } QWorkspace::mouseMoveEvent(x1); }
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 19, args).toBool()) return; } QWorkspace::mousePressEvent(x1); }
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 20, args).toBool()) return; } QWorkspace::mouseReleaseEvent(x1); }
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 39, args).toBool()) return; } QWorkspace::moveEvent(x1); }
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 42, args).toBool()) return; } QWorkspace::tabletEvent(x1); }
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 44); if(fun) { const void* args[] = { &x1 }; return callOverrideFun(fun, 44, args).toInt(); } return QWorkspace::metric(x1); }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 6, args).toBool()) return; } QWorkspace::connectNotify(x1); }
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 7, args).toBool()) return; } QWorkspace::customEvent(x1); }
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 8, args).toBool()) return; } QWorkspace::disconnectNotify(x1); }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; if(callOverrideFun(fun, 9, args).toBool()) return; } QWorkspace::timerEvent(x1); }
};

#endif
