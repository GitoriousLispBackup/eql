// THIS FILE IS GENERATED (see helper/)

#ifndef Q_CLASSES_H
#define Q_CLASSES_H

#include "_ini.h"
#include "../../ecl_fun.h"
#include "../_lobjects.h"
#include <QtGui>

class LSqlDriver : public QSqlDriver {
    Q_OBJECT
    friend class Q163;
public:
    LSqlDriver(uint u, QObject* x1 = 0) : QSqlDriver(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool beginTransaction() { void* fun = LObjects::overrideFun(unique, 301); bool ret = false; if(fun) { ret = callOverrideFun(fun, 301, 0).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlDriver::beginTransaction(); } return ret; }
    void close() { void* fun = LObjects::overrideFun(unique, 111); if(fun) { callOverrideFun(fun, 111, 0); }}
    bool commitTransaction() { void* fun = LObjects::overrideFun(unique, 302); bool ret = false; if(fun) { ret = callOverrideFun(fun, 302, 0).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlDriver::commitTransaction(); } return ret; }
    QSqlResult* createResult() const { void* fun = LObjects::overrideFun(unique, 303); QSqlResult* ret = 0; if(fun) { ret = (QSqlResult*)qVariantValue<void*>(callOverrideFun(fun, 303, 0)); } return ret; }
    QString escapeIdentifier(const QString& x1, IdentifierType x2) const { void* fun = LObjects::overrideFun(unique, 304); QString ret; if(fun) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QString>(callOverrideFun(fun, 304, args)); } if(!fun || LObjects::call_default) { ret = QSqlDriver::escapeIdentifier(x1, x2); } return ret; }
    QString formatValue(const QSqlField& x1, bool x2 = false) const { void* fun = LObjects::overrideFun(unique, 305); QString ret; if(fun) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QString>(callOverrideFun(fun, 305, args)); } if(!fun || LObjects::call_default) { ret = QSqlDriver::formatValue(x1, x2); } return ret; }
    QVariant handle() const { void* fun = LObjects::overrideFun(unique, 306); QVariant ret; if(fun) { ret = qVariantValue<QVariant>(callOverrideFun(fun, 306, 0)); } if(!fun || LObjects::call_default) { ret = QSqlDriver::handle(); } return ret; }
    bool hasFeature(DriverFeature x1) const { void* fun = LObjects::overrideFun(unique, 307); bool ret = false; if(fun) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 307, args).toBool(); } return ret; }
    bool isOpen() const { void* fun = LObjects::overrideFun(unique, 308); bool ret = false; if(fun) { ret = callOverrideFun(fun, 308, 0).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlDriver::isOpen(); } return ret; }
    bool open(const QString& x1, const QString& x2 = QString(), const QString& x3 = QString(), const QString& x4 = QString(), int x5 = -1, const QString& x6 = QString()) { void* fun = LObjects::overrideFun(unique, 309); bool ret = false; if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5, &x6 }; ret = callOverrideFun(fun, 309, args).toBool(); } return ret; }
    QSqlIndex primaryIndex(const QString& x1) const { void* fun = LObjects::overrideFun(unique, 310); QSqlIndex ret; if(fun) { const void* args[] = { &x1 }; ret = qVariantValue<QSqlIndex>(callOverrideFun(fun, 310, args)); } if(!fun || LObjects::call_default) { ret = QSqlDriver::primaryIndex(x1); } return ret; }
    QSqlRecord record(const QString& x1) const { void* fun = LObjects::overrideFun(unique, 311); QSqlRecord ret; if(fun) { const void* args[] = { &x1 }; ret = qVariantValue<QSqlRecord>(callOverrideFun(fun, 311, args)); } if(!fun || LObjects::call_default) { ret = QSqlDriver::record(x1); } return ret; }
    bool rollbackTransaction() { void* fun = LObjects::overrideFun(unique, 312); bool ret = false; if(fun) { ret = callOverrideFun(fun, 312, 0).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlDriver::rollbackTransaction(); } return ret; }
    QString sqlStatement(StatementType x1, const QString& x2, const QSqlRecord& x3, bool x4) const { void* fun = LObjects::overrideFun(unique, 313); QString ret; if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = qVariantValue<QString>(callOverrideFun(fun, 313, args)); } if(!fun || LObjects::call_default) { ret = QSqlDriver::sqlStatement(x1, x2, x3, x4); } return ret; }
    QStringList tables(QSql::TableType x1) const { void* fun = LObjects::overrideFun(unique, 314); QStringList ret; if(fun) { const void* args[] = { &x1 }; ret = qVariantValue<QStringList>(callOverrideFun(fun, 314, args)); } if(!fun || LObjects::call_default) { ret = QSqlDriver::tables(x1); } return ret; }
    void setLastError(const QSqlError& x1) { void* fun = LObjects::overrideFun(unique, 315); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 315, args); } if(!fun || LObjects::call_default) { QSqlDriver::setLastError(x1); }}
    void setOpen(bool x1) { void* fun = LObjects::overrideFun(unique, 316); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 316, args); } if(!fun || LObjects::call_default) { QSqlDriver::setOpen(x1); }}
    void setOpenError(bool x1) { void* fun = LObjects::overrideFun(unique, 317); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 317, args); } if(!fun || LObjects::call_default) { QSqlDriver::setOpenError(x1); }}
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 5, args); } if(!fun || LObjects::call_default) { QSqlDriver::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args); } if(!fun || LObjects::call_default) { QSqlDriver::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args); } if(!fun || LObjects::call_default) { QSqlDriver::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args); } if(!fun || LObjects::call_default) { QSqlDriver::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args); } if(!fun || LObjects::call_default) { QSqlDriver::timerEvent(x1); }}
};

class LSqlQueryModel : public QSqlQueryModel {
    Q_OBJECT
    friend class Q164;
public:
    LSqlQueryModel(uint u, QObject* x1 = 0) : QSqlQueryModel(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void clear() { void* fun = LObjects::overrideFun(unique, 193); if(fun) { callOverrideFun(fun, 193, 0); } if(!fun || LObjects::call_default) { QSqlQueryModel::clear(); }}
    void queryChange() { void* fun = LObjects::overrideFun(unique, 318); if(fun) { callOverrideFun(fun, 318, 0); } if(!fun || LObjects::call_default) { QSqlQueryModel::queryChange(); }}
    bool canFetchMore(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 53); bool ret = false; if(fun) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 53, args).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlQueryModel::canFetchMore(x1); } return ret; }
    QVariant data(const QModelIndex& x1, int x2 = Qt::DisplayRole) const { void* fun = LObjects::overrideFun(unique, 55); QVariant ret; if(fun) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 55, args)); } if(!fun || LObjects::call_default) { ret = QSqlQueryModel::data(x1, x2); } return ret; }
    void fetchMore(const QModelIndex& x1 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 57); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 57, args); } if(!fun || LObjects::call_default) { QSqlQueryModel::fetchMore(x1); }}
    QVariant headerData(int x1, Qt::Orientation x2, int x3 = Qt::DisplayRole) const { void* fun = LObjects::overrideFun(unique, 60); QVariant ret; if(fun) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 60, args)); } if(!fun || LObjects::call_default) { ret = QSqlQueryModel::headerData(x1, x2, x3); } return ret; }
    bool insertColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 62); bool ret = false; if(fun) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 62, args).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlQueryModel::insertColumns(x1, x2, x3); } return ret; }
    bool removeColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 68); bool ret = false; if(fun) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 68, args).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlQueryModel::removeColumns(x1, x2, x3); } return ret; }
    int rowCount(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 70); int ret = 0; if(fun) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 70, args).toInt(); } if(!fun || LObjects::call_default) { ret = QSqlQueryModel::rowCount(x1); } return ret; }
    bool setHeaderData(int x1, Qt::Orientation x2, const QVariant& x3, int x4 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 72); bool ret = false; if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = callOverrideFun(fun, 72, args).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlQueryModel::setHeaderData(x1, x2, x3, x4); } return ret; }
    bool dropMimeData(const QMimeData* x1, Qt::DropAction x2, int x3, int x4, const QModelIndex& x5) { void* fun = LObjects::overrideFun(unique, 56); bool ret = false; if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; ret = callOverrideFun(fun, 56, args).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlQueryModel::dropMimeData(x1, x2, x3, x4, x5); } return ret; }
    QModelIndex index(int x1, int x2, const QModelIndex& x3 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 61); QModelIndex ret; if(fun) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 61, args)); } if(!fun || LObjects::call_default) { ret = QSqlQueryModel::index(x1, x2, x3); } return ret; }
    QModelIndex buddy(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 52); QModelIndex ret; if(fun) { const void* args[] = { &x1 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 52, args)); } if(!fun || LObjects::call_default) { ret = QSqlQueryModel::buddy(x1); } return ret; }
    Qt::ItemFlags flags(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 58); Qt::ItemFlags ret; if(fun) { const void* args[] = { &x1 }; ret = (Qt::ItemFlags)callOverrideFun(fun, 58, args).toInt(); } if(!fun || LObjects::call_default) { ret = QSqlQueryModel::flags(x1); } return ret; }
    bool insertRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 63); bool ret = false; if(fun) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 63, args).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlQueryModel::insertRows(x1, x2, x3); } return ret; }
    QModelIndexList match(const QModelIndex& x1, int x2, const QVariant& x3, int x4 = 1, Qt::MatchFlags x5 = Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap)) const { void* fun = LObjects::overrideFun(unique, 64); QModelIndexList ret; if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; ret = qVariantValue<QModelIndexList>(callOverrideFun(fun, 64, args)); } if(!fun || LObjects::call_default) { ret = QSqlQueryModel::match(x1, x2, x3, x4, x5); } return ret; }
    QMimeData* mimeData(const QModelIndexList& x1) const { void* fun = LObjects::overrideFun(unique, 65); QMimeData* ret = 0; if(fun) { const void* args[] = { &x1 }; ret = (QMimeData*)qVariantValue<void*>(callOverrideFun(fun, 65, args)); } if(!fun || LObjects::call_default) { ret = QSqlQueryModel::mimeData(x1); } return ret; }
    QStringList mimeTypes() const { void* fun = LObjects::overrideFun(unique, 66); QStringList ret; if(fun) { ret = qVariantValue<QStringList>(callOverrideFun(fun, 66, 0)); } if(!fun || LObjects::call_default) { ret = QSqlQueryModel::mimeTypes(); } return ret; }
    bool removeRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 69); bool ret = false; if(fun) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 69, args).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlQueryModel::removeRows(x1, x2, x3); } return ret; }
    bool setData(const QModelIndex& x1, const QVariant& x2, int x3 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 71); bool ret = false; if(fun) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 71, args).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlQueryModel::setData(x1, x2, x3); } return ret; }
    void sort(int x1, Qt::SortOrder x2 = Qt::AscendingOrder) { void* fun = LObjects::overrideFun(unique, 73); if(fun) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 73, args); } if(!fun || LObjects::call_default) { QSqlQueryModel::sort(x1, x2); }}
    QSize span(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 74); QSize ret; if(fun) { const void* args[] = { &x1 }; ret = qVariantValue<QSize>(callOverrideFun(fun, 74, args)); } if(!fun || LObjects::call_default) { ret = QSqlQueryModel::span(x1); } return ret; }
    Qt::DropActions supportedDropActions() const { void* fun = LObjects::overrideFun(unique, 75); Qt::DropActions ret; if(fun) { ret = (Qt::DropActions)callOverrideFun(fun, 75, 0).toInt(); } if(!fun || LObjects::call_default) { ret = QSqlQueryModel::supportedDropActions(); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 5, args); } if(!fun || LObjects::call_default) { QSqlQueryModel::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args); } if(!fun || LObjects::call_default) { QSqlQueryModel::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args); } if(!fun || LObjects::call_default) { QSqlQueryModel::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args); } if(!fun || LObjects::call_default) { QSqlQueryModel::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args); } if(!fun || LObjects::call_default) { QSqlQueryModel::timerEvent(x1); }}
};

class LSqlRelationalDelegate : public QSqlRelationalDelegate {
    Q_OBJECT
    friend class Q165;
public:
    LSqlRelationalDelegate(uint u, QObject* x1 = 0) : QSqlRelationalDelegate(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QWidget* createEditor(QWidget* x1, const QStyleOptionViewItem& x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 45); QWidget* ret = 0; if(fun) { const void* args[] = { &x1, &x2, &x3 }; ret = (QWidget*)qVariantValue<void*>(callOverrideFun(fun, 45, args)); } if(!fun || LObjects::call_default) { ret = QSqlRelationalDelegate::createEditor(x1, x2, x3); } return ret; }
    void setEditorData(QWidget* x1, const QModelIndex& x2) const { void* fun = LObjects::overrideFun(unique, 48); if(fun) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 48, args); } if(!fun || LObjects::call_default) { QSqlRelationalDelegate::setEditorData(x1, x2); }}
    void setModelData(QWidget* x1, QAbstractItemModel* x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 49); if(fun) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 49, args); } if(!fun || LObjects::call_default) { QSqlRelationalDelegate::setModelData(x1, x2, x3); }}
    void drawCheck(QPainter* x1, const QStyleOptionViewItem& x2, const QRect& x3, Qt::CheckState x4) const { void* fun = LObjects::overrideFun(unique, 268); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; callOverrideFun(fun, 268, args); } if(!fun || LObjects::call_default) { QSqlRelationalDelegate::drawCheck(x1, x2, x3, x4); }}
    void drawDecoration(QPainter* x1, const QStyleOptionViewItem& x2, const QRect& x3, const QPixmap& x4) const { void* fun = LObjects::overrideFun(unique, 269); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; callOverrideFun(fun, 269, args); } if(!fun || LObjects::call_default) { QSqlRelationalDelegate::drawDecoration(x1, x2, x3, x4); }}
    void drawDisplay(QPainter* x1, const QStyleOptionViewItem& x2, const QRect& x3, const QString& x4) const { void* fun = LObjects::overrideFun(unique, 270); if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; callOverrideFun(fun, 270, args); } if(!fun || LObjects::call_default) { QSqlRelationalDelegate::drawDisplay(x1, x2, x3, x4); }}
    void drawFocus(QPainter* x1, const QStyleOptionViewItem& x2, const QRect& x3) const { void* fun = LObjects::overrideFun(unique, 271); if(fun) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 271, args); } if(!fun || LObjects::call_default) { QSqlRelationalDelegate::drawFocus(x1, x2, x3); }}
    void paint(QPainter* x1, const QStyleOptionViewItem& x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 47); if(fun) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 47, args); } if(!fun || LObjects::call_default) { QSqlRelationalDelegate::paint(x1, x2, x3); }}
    QSize sizeHint(const QStyleOptionViewItem& x1, const QModelIndex& x2) const { void* fun = LObjects::overrideFun(unique, 50); QSize ret; if(fun) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QSize>(callOverrideFun(fun, 50, args)); } if(!fun || LObjects::call_default) { ret = QSqlRelationalDelegate::sizeHint(x1, x2); } return ret; }
    void updateEditorGeometry(QWidget* x1, const QStyleOptionViewItem& x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 51); if(fun) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 51, args); } if(!fun || LObjects::call_default) { QSqlRelationalDelegate::updateEditorGeometry(x1, x2, x3); }}
    bool editorEvent(QEvent* x1, QAbstractItemModel* x2, const QStyleOptionViewItem& x3, const QModelIndex& x4) { void* fun = LObjects::overrideFun(unique, 46); bool ret = false; if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = callOverrideFun(fun, 46, args).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlRelationalDelegate::editorEvent(x1, x2, x3, x4); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 5, args); } if(!fun || LObjects::call_default) { QSqlRelationalDelegate::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args); } if(!fun || LObjects::call_default) { QSqlRelationalDelegate::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args); } if(!fun || LObjects::call_default) { QSqlRelationalDelegate::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args); } if(!fun || LObjects::call_default) { QSqlRelationalDelegate::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args); } if(!fun || LObjects::call_default) { QSqlRelationalDelegate::timerEvent(x1); }}
};

class LSqlRelationalTableModel : public QSqlRelationalTableModel {
    Q_OBJECT
    friend class Q166;
public:
    LSqlRelationalTableModel(uint u, QObject* x1 = 0, QSqlDatabase x2 = QSqlDatabase()) : QSqlRelationalTableModel(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSqlTableModel* relationModel(int x1) const { void* fun = LObjects::overrideFun(unique, 319); QSqlTableModel* ret = 0; if(fun) { const void* args[] = { &x1 }; ret = (QSqlTableModel*)qVariantValue<void*>(callOverrideFun(fun, 319, args)); } if(!fun || LObjects::call_default) { ret = QSqlRelationalTableModel::relationModel(x1); } return ret; }
    void setRelation(int x1, const QSqlRelation& x2) { void* fun = LObjects::overrideFun(unique, 320); if(fun) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 320, args); } if(!fun || LObjects::call_default) { QSqlRelationalTableModel::setRelation(x1, x2); }}
    void clear() { void* fun = LObjects::overrideFun(unique, 193); if(fun) { callOverrideFun(fun, 193, 0); } if(!fun || LObjects::call_default) { QSqlRelationalTableModel::clear(); }}
    QVariant data(const QModelIndex& x1, int x2 = Qt::DisplayRole) const { void* fun = LObjects::overrideFun(unique, 55); QVariant ret; if(fun) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 55, args)); } if(!fun || LObjects::call_default) { ret = QSqlRelationalTableModel::data(x1, x2); } return ret; }
    bool removeColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 68); bool ret = false; if(fun) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 68, args).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlRelationalTableModel::removeColumns(x1, x2, x3); } return ret; }
    bool select() { void* fun = LObjects::overrideFun(unique, 321); bool ret = false; if(fun) { ret = callOverrideFun(fun, 321, 0).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlRelationalTableModel::select(); } return ret; }
    bool setData(const QModelIndex& x1, const QVariant& x2, int x3 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 71); bool ret = false; if(fun) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 71, args).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlRelationalTableModel::setData(x1, x2, x3); } return ret; }
    void setTable(const QString& x1) { void* fun = LObjects::overrideFun(unique, 322); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 322, args); } if(!fun || LObjects::call_default) { QSqlRelationalTableModel::setTable(x1); }}
    bool insertRowIntoTable(const QSqlRecord& x1) { void* fun = LObjects::overrideFun(unique, 323); bool ret = false; if(fun) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 323, args).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlRelationalTableModel::insertRowIntoTable(x1); } return ret; }
    QString orderByClause() const { void* fun = LObjects::overrideFun(unique, 324); QString ret; if(fun) { ret = qVariantValue<QString>(callOverrideFun(fun, 324, 0)); } if(!fun || LObjects::call_default) { ret = QSqlRelationalTableModel::orderByClause(); } return ret; }
    QString selectStatement() const { void* fun = LObjects::overrideFun(unique, 325); QString ret; if(fun) { ret = qVariantValue<QString>(callOverrideFun(fun, 325, 0)); } if(!fun || LObjects::call_default) { ret = QSqlRelationalTableModel::selectStatement(); } return ret; }
    bool updateRowInTable(int x1, const QSqlRecord& x2) { void* fun = LObjects::overrideFun(unique, 326); bool ret = false; if(fun) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 326, args).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlRelationalTableModel::updateRowInTable(x1, x2); } return ret; }
    void revertRow(int x1) { void* fun = LObjects::overrideFun(unique, 327); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 327, args); } if(!fun || LObjects::call_default) { QSqlRelationalTableModel::revertRow(x1); }}
    void setEditStrategy(EditStrategy x1) { void* fun = LObjects::overrideFun(unique, 328); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 328, args); } if(!fun || LObjects::call_default) { QSqlRelationalTableModel::setEditStrategy(x1); }}
    void setFilter(const QString& x1) { void* fun = LObjects::overrideFun(unique, 329); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 329, args); } if(!fun || LObjects::call_default) { QSqlRelationalTableModel::setFilter(x1); }}
    void setSort(int x1, Qt::SortOrder x2) { void* fun = LObjects::overrideFun(unique, 330); if(fun) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 330, args); } if(!fun || LObjects::call_default) { QSqlRelationalTableModel::setSort(x1, x2); }}
    bool deleteRowFromTable(int x1) { void* fun = LObjects::overrideFun(unique, 331); bool ret = false; if(fun) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 331, args).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlRelationalTableModel::deleteRowFromTable(x1); } return ret; }
    Qt::ItemFlags flags(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 58); Qt::ItemFlags ret; if(fun) { const void* args[] = { &x1 }; ret = (Qt::ItemFlags)callOverrideFun(fun, 58, args).toInt(); } if(!fun || LObjects::call_default) { ret = QSqlRelationalTableModel::flags(x1); } return ret; }
    QVariant headerData(int x1, Qt::Orientation x2, int x3 = Qt::DisplayRole) const { void* fun = LObjects::overrideFun(unique, 60); QVariant ret; if(fun) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 60, args)); } if(!fun || LObjects::call_default) { ret = QSqlRelationalTableModel::headerData(x1, x2, x3); } return ret; }
    bool insertRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 63); bool ret = false; if(fun) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 63, args).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlRelationalTableModel::insertRows(x1, x2, x3); } return ret; }
    bool removeRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 69); bool ret = false; if(fun) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 69, args).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlRelationalTableModel::removeRows(x1, x2, x3); } return ret; }
    int rowCount(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 70); int ret = 0; if(fun) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 70, args).toInt(); } if(!fun || LObjects::call_default) { ret = QSqlRelationalTableModel::rowCount(x1); } return ret; }
    void sort(int x1, Qt::SortOrder x2) { void* fun = LObjects::overrideFun(unique, 73); if(fun) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 73, args); } if(!fun || LObjects::call_default) { QSqlRelationalTableModel::sort(x1, x2); }}
    void queryChange() { void* fun = LObjects::overrideFun(unique, 318); if(fun) { callOverrideFun(fun, 318, 0); } if(!fun || LObjects::call_default) { QSqlRelationalTableModel::queryChange(); }}
    bool canFetchMore(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 53); bool ret = false; if(fun) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 53, args).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlRelationalTableModel::canFetchMore(x1); } return ret; }
    void fetchMore(const QModelIndex& x1 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 57); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 57, args); } if(!fun || LObjects::call_default) { QSqlRelationalTableModel::fetchMore(x1); }}
    bool insertColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 62); bool ret = false; if(fun) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 62, args).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlRelationalTableModel::insertColumns(x1, x2, x3); } return ret; }
    bool setHeaderData(int x1, Qt::Orientation x2, const QVariant& x3, int x4 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 72); bool ret = false; if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = callOverrideFun(fun, 72, args).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlRelationalTableModel::setHeaderData(x1, x2, x3, x4); } return ret; }
    bool dropMimeData(const QMimeData* x1, Qt::DropAction x2, int x3, int x4, const QModelIndex& x5) { void* fun = LObjects::overrideFun(unique, 56); bool ret = false; if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; ret = callOverrideFun(fun, 56, args).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlRelationalTableModel::dropMimeData(x1, x2, x3, x4, x5); } return ret; }
    QModelIndex index(int x1, int x2, const QModelIndex& x3 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 61); QModelIndex ret; if(fun) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 61, args)); } if(!fun || LObjects::call_default) { ret = QSqlRelationalTableModel::index(x1, x2, x3); } return ret; }
    QModelIndex buddy(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 52); QModelIndex ret; if(fun) { const void* args[] = { &x1 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 52, args)); } if(!fun || LObjects::call_default) { ret = QSqlRelationalTableModel::buddy(x1); } return ret; }
    QModelIndexList match(const QModelIndex& x1, int x2, const QVariant& x3, int x4 = 1, Qt::MatchFlags x5 = Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap)) const { void* fun = LObjects::overrideFun(unique, 64); QModelIndexList ret; if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; ret = qVariantValue<QModelIndexList>(callOverrideFun(fun, 64, args)); } if(!fun || LObjects::call_default) { ret = QSqlRelationalTableModel::match(x1, x2, x3, x4, x5); } return ret; }
    QMimeData* mimeData(const QModelIndexList& x1) const { void* fun = LObjects::overrideFun(unique, 65); QMimeData* ret = 0; if(fun) { const void* args[] = { &x1 }; ret = (QMimeData*)qVariantValue<void*>(callOverrideFun(fun, 65, args)); } if(!fun || LObjects::call_default) { ret = QSqlRelationalTableModel::mimeData(x1); } return ret; }
    QStringList mimeTypes() const { void* fun = LObjects::overrideFun(unique, 66); QStringList ret; if(fun) { ret = qVariantValue<QStringList>(callOverrideFun(fun, 66, 0)); } if(!fun || LObjects::call_default) { ret = QSqlRelationalTableModel::mimeTypes(); } return ret; }
    QSize span(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 74); QSize ret; if(fun) { const void* args[] = { &x1 }; ret = qVariantValue<QSize>(callOverrideFun(fun, 74, args)); } if(!fun || LObjects::call_default) { ret = QSqlRelationalTableModel::span(x1); } return ret; }
    Qt::DropActions supportedDropActions() const { void* fun = LObjects::overrideFun(unique, 75); Qt::DropActions ret; if(fun) { ret = (Qt::DropActions)callOverrideFun(fun, 75, 0).toInt(); } if(!fun || LObjects::call_default) { ret = QSqlRelationalTableModel::supportedDropActions(); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 5, args); } if(!fun || LObjects::call_default) { QSqlRelationalTableModel::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args); } if(!fun || LObjects::call_default) { QSqlRelationalTableModel::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args); } if(!fun || LObjects::call_default) { QSqlRelationalTableModel::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args); } if(!fun || LObjects::call_default) { QSqlRelationalTableModel::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args); } if(!fun || LObjects::call_default) { QSqlRelationalTableModel::timerEvent(x1); }}
};

class LSqlTableModel : public QSqlTableModel {
    Q_OBJECT
    friend class Q167;
public:
    LSqlTableModel(uint u, QObject* x1 = 0, QSqlDatabase x2 = QSqlDatabase()) : QSqlTableModel(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void revertRow(int x1) { void* fun = LObjects::overrideFun(unique, 327); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 327, args); } if(!fun || LObjects::call_default) { QSqlTableModel::revertRow(x1); }}
    bool select() { void* fun = LObjects::overrideFun(unique, 321); bool ret = false; if(fun) { ret = callOverrideFun(fun, 321, 0).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlTableModel::select(); } return ret; }
    void setEditStrategy(EditStrategy x1) { void* fun = LObjects::overrideFun(unique, 328); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 328, args); } if(!fun || LObjects::call_default) { QSqlTableModel::setEditStrategy(x1); }}
    void setFilter(const QString& x1) { void* fun = LObjects::overrideFun(unique, 329); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 329, args); } if(!fun || LObjects::call_default) { QSqlTableModel::setFilter(x1); }}
    void setSort(int x1, Qt::SortOrder x2) { void* fun = LObjects::overrideFun(unique, 330); if(fun) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 330, args); } if(!fun || LObjects::call_default) { QSqlTableModel::setSort(x1, x2); }}
    void setTable(const QString& x1) { void* fun = LObjects::overrideFun(unique, 322); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 322, args); } if(!fun || LObjects::call_default) { QSqlTableModel::setTable(x1); }}
    bool deleteRowFromTable(int x1) { void* fun = LObjects::overrideFun(unique, 331); bool ret = false; if(fun) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 331, args).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlTableModel::deleteRowFromTable(x1); } return ret; }
    bool insertRowIntoTable(const QSqlRecord& x1) { void* fun = LObjects::overrideFun(unique, 323); bool ret = false; if(fun) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 323, args).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlTableModel::insertRowIntoTable(x1); } return ret; }
    QString orderByClause() const { void* fun = LObjects::overrideFun(unique, 324); QString ret; if(fun) { ret = qVariantValue<QString>(callOverrideFun(fun, 324, 0)); } if(!fun || LObjects::call_default) { ret = QSqlTableModel::orderByClause(); } return ret; }
    QString selectStatement() const { void* fun = LObjects::overrideFun(unique, 325); QString ret; if(fun) { ret = qVariantValue<QString>(callOverrideFun(fun, 325, 0)); } if(!fun || LObjects::call_default) { ret = QSqlTableModel::selectStatement(); } return ret; }
    bool updateRowInTable(int x1, const QSqlRecord& x2) { void* fun = LObjects::overrideFun(unique, 326); bool ret = false; if(fun) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 326, args).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlTableModel::updateRowInTable(x1, x2); } return ret; }
    void clear() { void* fun = LObjects::overrideFun(unique, 193); if(fun) { callOverrideFun(fun, 193, 0); } if(!fun || LObjects::call_default) { QSqlTableModel::clear(); }}
    QVariant data(const QModelIndex& x1, int x2 = Qt::DisplayRole) const { void* fun = LObjects::overrideFun(unique, 55); QVariant ret; if(fun) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 55, args)); } if(!fun || LObjects::call_default) { ret = QSqlTableModel::data(x1, x2); } return ret; }
    Qt::ItemFlags flags(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 58); Qt::ItemFlags ret; if(fun) { const void* args[] = { &x1 }; ret = (Qt::ItemFlags)callOverrideFun(fun, 58, args).toInt(); } if(!fun || LObjects::call_default) { ret = QSqlTableModel::flags(x1); } return ret; }
    QVariant headerData(int x1, Qt::Orientation x2, int x3 = Qt::DisplayRole) const { void* fun = LObjects::overrideFun(unique, 60); QVariant ret; if(fun) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 60, args)); } if(!fun || LObjects::call_default) { ret = QSqlTableModel::headerData(x1, x2, x3); } return ret; }
    bool insertRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 63); bool ret = false; if(fun) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 63, args).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlTableModel::insertRows(x1, x2, x3); } return ret; }
    bool removeColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 68); bool ret = false; if(fun) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 68, args).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlTableModel::removeColumns(x1, x2, x3); } return ret; }
    bool removeRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 69); bool ret = false; if(fun) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 69, args).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlTableModel::removeRows(x1, x2, x3); } return ret; }
    int rowCount(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 70); int ret = 0; if(fun) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 70, args).toInt(); } if(!fun || LObjects::call_default) { ret = QSqlTableModel::rowCount(x1); } return ret; }
    bool setData(const QModelIndex& x1, const QVariant& x2, int x3 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 71); bool ret = false; if(fun) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 71, args).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlTableModel::setData(x1, x2, x3); } return ret; }
    void sort(int x1, Qt::SortOrder x2) { void* fun = LObjects::overrideFun(unique, 73); if(fun) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 73, args); } if(!fun || LObjects::call_default) { QSqlTableModel::sort(x1, x2); }}
    void queryChange() { void* fun = LObjects::overrideFun(unique, 318); if(fun) { callOverrideFun(fun, 318, 0); } if(!fun || LObjects::call_default) { QSqlTableModel::queryChange(); }}
    bool canFetchMore(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 53); bool ret = false; if(fun) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 53, args).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlTableModel::canFetchMore(x1); } return ret; }
    void fetchMore(const QModelIndex& x1 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 57); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 57, args); } if(!fun || LObjects::call_default) { QSqlTableModel::fetchMore(x1); }}
    bool insertColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 62); bool ret = false; if(fun) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 62, args).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlTableModel::insertColumns(x1, x2, x3); } return ret; }
    bool setHeaderData(int x1, Qt::Orientation x2, const QVariant& x3, int x4 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 72); bool ret = false; if(fun) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = callOverrideFun(fun, 72, args).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlTableModel::setHeaderData(x1, x2, x3, x4); } return ret; }
    bool dropMimeData(const QMimeData* x1, Qt::DropAction x2, int x3, int x4, const QModelIndex& x5) { void* fun = LObjects::overrideFun(unique, 56); bool ret = false; if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; ret = callOverrideFun(fun, 56, args).toBool(); } if(!fun || LObjects::call_default) { ret = QSqlTableModel::dropMimeData(x1, x2, x3, x4, x5); } return ret; }
    QModelIndex index(int x1, int x2, const QModelIndex& x3 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 61); QModelIndex ret; if(fun) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 61, args)); } if(!fun || LObjects::call_default) { ret = QSqlTableModel::index(x1, x2, x3); } return ret; }
    QModelIndex buddy(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 52); QModelIndex ret; if(fun) { const void* args[] = { &x1 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 52, args)); } if(!fun || LObjects::call_default) { ret = QSqlTableModel::buddy(x1); } return ret; }
    QModelIndexList match(const QModelIndex& x1, int x2, const QVariant& x3, int x4 = 1, Qt::MatchFlags x5 = Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap)) const { void* fun = LObjects::overrideFun(unique, 64); QModelIndexList ret; if(fun) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; ret = qVariantValue<QModelIndexList>(callOverrideFun(fun, 64, args)); } if(!fun || LObjects::call_default) { ret = QSqlTableModel::match(x1, x2, x3, x4, x5); } return ret; }
    QMimeData* mimeData(const QModelIndexList& x1) const { void* fun = LObjects::overrideFun(unique, 65); QMimeData* ret = 0; if(fun) { const void* args[] = { &x1 }; ret = (QMimeData*)qVariantValue<void*>(callOverrideFun(fun, 65, args)); } if(!fun || LObjects::call_default) { ret = QSqlTableModel::mimeData(x1); } return ret; }
    QStringList mimeTypes() const { void* fun = LObjects::overrideFun(unique, 66); QStringList ret; if(fun) { ret = qVariantValue<QStringList>(callOverrideFun(fun, 66, 0)); } if(!fun || LObjects::call_default) { ret = QSqlTableModel::mimeTypes(); } return ret; }
    QSize span(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 74); QSize ret; if(fun) { const void* args[] = { &x1 }; ret = qVariantValue<QSize>(callOverrideFun(fun, 74, args)); } if(!fun || LObjects::call_default) { ret = QSqlTableModel::span(x1); } return ret; }
    Qt::DropActions supportedDropActions() const { void* fun = LObjects::overrideFun(unique, 75); Qt::DropActions ret; if(fun) { ret = (Qt::DropActions)callOverrideFun(fun, 75, 0).toInt(); } if(!fun || LObjects::call_default) { ret = QSqlTableModel::supportedDropActions(); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 5); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 5, args); } if(!fun || LObjects::call_default) { QSqlTableModel::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args); } if(!fun || LObjects::call_default) { QSqlTableModel::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args); } if(!fun || LObjects::call_default) { QSqlTableModel::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args); } if(!fun || LObjects::call_default) { QSqlTableModel::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args); } if(!fun || LObjects::call_default) { QSqlTableModel::timerEvent(x1); }}
};

#endif
