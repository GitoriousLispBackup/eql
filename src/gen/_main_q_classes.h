// THIS FILE IS GENERATED (see helper/)

#ifndef MAIN_Q_CLASSES_H
#define MAIN_Q_CLASSES_H

#include "../ecl_fun.h"
#include "_lobjects.h"
#include <QtGui>

QT_BEGIN_NAMESPACE

class LAbstractAnimation : public QAbstractAnimation {
    Q_OBJECT
    friend class Q1;
public:
    LAbstractAnimation(uint u, QObject* x1 = 0) : QAbstractAnimation(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    int duration() const { void* fun = LObjects::overrideFun(unique, 1); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 1, 0, unique).toInt(); } return ret; }
    void updateCurrentTime(int x1) { void* fun = LObjects::overrideFun(unique, 2); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 2, args, unique); }}
    void updateDirection(QAbstractAnimation::Direction x1) { void* fun = LObjects::overrideFun(unique, 3); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 3, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractAnimation::updateDirection(x1); }}
    void updateState(QAbstractAnimation::State x1, QAbstractAnimation::State x2) { void* fun = LObjects::overrideFun(unique, 4); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 4, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractAnimation::updateState(x1, x2); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractAnimation::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractAnimation::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractAnimation::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractAnimation::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractAnimation::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractAnimation::timerEvent(x1); }}
};

class LAbstractButton : public QAbstractButton {
    Q_OBJECT
    friend class Q2;
public:
    LAbstractButton(uint u, QWidget* x1 = 0) : QAbstractButton(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void checkStateSet() { void* fun = LObjects::overrideFun(unique, 11); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 11, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractButton::checkStateSet(); }}
    bool hitButton(const QPoint& x1) const { void* fun = LObjects::overrideFun(unique, 12); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 12, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractButton::hitButton(x1); } return ret; }
    void nextCheckState() { void* fun = LObjects::overrideFun(unique, 13); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 13, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractButton::nextCheckState(); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractButton::changeEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractButton::focusInEvent(x1); }}
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractButton::focusOutEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractButton::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractButton::keyReleaseEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractButton::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractButton::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractButton::mouseReleaseEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractButton::timerEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractButton::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractButton::inputMethodQuery(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractButton::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractButton::sizeHint(); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractButton::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractButton::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractButton::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractButton::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractButton::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractButton::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractButton::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractButton::enterEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractButton::focusNextPrevChild(x1); } return ret; }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractButton::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractButton::inputMethodEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractButton::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractButton::mouseDoubleClickEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractButton::moveEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractButton::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractButton::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractButton::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractButton::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractButton::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractButton::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractButton::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractButton::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractButton::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractButton::disconnectNotify(x1); }}
};

class LAbstractItemDelegate : public QAbstractItemDelegate {
    Q_OBJECT
    friend class Q3;
public:
    LAbstractItemDelegate(uint u, QObject* x1 = 0) : QAbstractItemDelegate(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QWidget* createEditor(QWidget* x1, const QStyleOptionViewItem& x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 46); QWidget* ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = (QWidget*)qVariantValue<void*>(callOverrideFun(fun, 46, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemDelegate::createEditor(x1, x2, x3); } return ret; }
    bool editorEvent(QEvent* x1, QAbstractItemModel* x2, const QStyleOptionViewItem& x3, const QModelIndex& x4) { void* fun = LObjects::overrideFun(unique, 47); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = callOverrideFun(fun, 47, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemDelegate::editorEvent(x1, x2, x3, x4); } return ret; }
    void paint(QPainter* x1, const QStyleOptionViewItem& x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 48); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 48, args, unique); }}
    void setEditorData(QWidget* x1, const QModelIndex& x2) const { void* fun = LObjects::overrideFun(unique, 49); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 49, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemDelegate::setEditorData(x1, x2); }}
    void setModelData(QWidget* x1, QAbstractItemModel* x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 50); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 50, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemDelegate::setModelData(x1, x2, x3); }}
    QSize sizeHint(const QStyleOptionViewItem& x1, const QModelIndex& x2) const { void* fun = LObjects::overrideFun(unique, 51); QSize ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QSize>(callOverrideFun(fun, 51, args, unique)); } return ret; }
    void updateEditorGeometry(QWidget* x1, const QStyleOptionViewItem& x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 52); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 52, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemDelegate::updateEditorGeometry(x1, x2, x3); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemDelegate::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemDelegate::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemDelegate::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemDelegate::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemDelegate::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemDelegate::timerEvent(x1); }}
};

class LAbstractItemModel : public QAbstractItemModel {
    Q_OBJECT
    friend class Q4;
public:
    LAbstractItemModel(uint u, QObject* x1 = 0) : QAbstractItemModel(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QModelIndex buddy(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 53); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 53, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemModel::buddy(x1); } return ret; }
    bool canFetchMore(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 54); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 54, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemModel::canFetchMore(x1); } return ret; }
    int columnCount(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 55); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 55, args, unique).toInt(); } return ret; }
    QVariant data(const QModelIndex& x1, int x2 = Qt::DisplayRole) const { void* fun = LObjects::overrideFun(unique, 56); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 56, args, unique)); } return ret; }
    bool dropMimeData(const QMimeData* x1, Qt::DropAction x2, int x3, int x4, const QModelIndex& x5) { void* fun = LObjects::overrideFun(unique, 57); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; ret = callOverrideFun(fun, 57, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemModel::dropMimeData(x1, x2, x3, x4, x5); } return ret; }
    void fetchMore(const QModelIndex& x1) { void* fun = LObjects::overrideFun(unique, 58); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 58, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemModel::fetchMore(x1); }}
    Qt::ItemFlags flags(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 59); Qt::ItemFlags ret = (Qt::ItemFlags)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (Qt::ItemFlags)callOverrideFun(fun, 59, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemModel::flags(x1); } return ret; }
    bool hasChildren(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 60); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 60, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemModel::hasChildren(x1); } return ret; }
    QVariant headerData(int x1, Qt::Orientation x2, int x3 = Qt::DisplayRole) const { void* fun = LObjects::overrideFun(unique, 61); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 61, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemModel::headerData(x1, x2, x3); } return ret; }
    QModelIndex index(int x1, int x2, const QModelIndex& x3 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 62); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 62, args, unique)); } return ret; }
    bool insertColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 63); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 63, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemModel::insertColumns(x1, x2, x3); } return ret; }
    bool insertRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 64); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 64, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemModel::insertRows(x1, x2, x3); } return ret; }
    QModelIndexList match(const QModelIndex& x1, int x2, const QVariant& x3, int x4 = 1, Qt::MatchFlags x5 = Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap)) const { void* fun = LObjects::overrideFun(unique, 65); QModelIndexList ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; ret = qVariantValue<QModelIndexList>(callOverrideFun(fun, 65, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemModel::match(x1, x2, x3, x4, x5); } return ret; }
    QMimeData* mimeData(const QModelIndexList& x1) const { void* fun = LObjects::overrideFun(unique, 66); QMimeData* ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (QMimeData*)qVariantValue<void*>(callOverrideFun(fun, 66, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemModel::mimeData(x1); } return ret; }
    QStringList mimeTypes() const { void* fun = LObjects::overrideFun(unique, 67); QStringList ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QStringList>(callOverrideFun(fun, 67, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemModel::mimeTypes(); } return ret; }
    QModelIndex parent(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 68); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 68, args, unique)); } return ret; }
    bool removeColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 69); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 69, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemModel::removeColumns(x1, x2, x3); } return ret; }
    bool removeRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 70); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 70, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemModel::removeRows(x1, x2, x3); } return ret; }
    int rowCount(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 71); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 71, args, unique).toInt(); } return ret; }
    bool setData(const QModelIndex& x1, const QVariant& x2, int x3 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 72); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 72, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemModel::setData(x1, x2, x3); } return ret; }
    bool setHeaderData(int x1, Qt::Orientation x2, const QVariant& x3, int x4 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 73); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = callOverrideFun(fun, 73, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemModel::setHeaderData(x1, x2, x3, x4); } return ret; }
    void sort(int x1, Qt::SortOrder x2 = Qt::AscendingOrder) { void* fun = LObjects::overrideFun(unique, 74); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 74, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemModel::sort(x1, x2); }}
    QSize span(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 75); QSize ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QSize>(callOverrideFun(fun, 75, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemModel::span(x1); } return ret; }
    Qt::DropActions supportedDropActions() const { void* fun = LObjects::overrideFun(unique, 76); Qt::DropActions ret = (Qt::DropActions)0; if(fun && (LObjects::calling != unique)) { ret = (Qt::DropActions)callOverrideFun(fun, 76, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemModel::supportedDropActions(); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemModel::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemModel::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemModel::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemModel::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemModel::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemModel::timerEvent(x1); }}
};

class LAbstractItemView : public QAbstractItemView {
    Q_OBJECT
    friend class Q5;
public:
    LAbstractItemView(uint u, QWidget* x1 = 0) : QAbstractItemView(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QModelIndex indexAt(const QPoint& x1) const { void* fun = LObjects::overrideFun(unique, 77); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 77, args, unique)); } return ret; }
    void keyboardSearch(const QString& x1) { void* fun = LObjects::overrideFun(unique, 78); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 78, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::keyboardSearch(x1); }}
    void scrollTo(const QModelIndex& x1, ScrollHint x2 = EnsureVisible) { void* fun = LObjects::overrideFun(unique, 79); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 79, args, unique); }}
    void setModel(QAbstractItemModel* x1) { void* fun = LObjects::overrideFun(unique, 80); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 80, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::setModel(x1); }}
    void setSelectionModel(QItemSelectionModel* x1) { void* fun = LObjects::overrideFun(unique, 81); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 81, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::setSelectionModel(x1); }}
    int sizeHintForColumn(int x1) const { void* fun = LObjects::overrideFun(unique, 82); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 82, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemView::sizeHintForColumn(x1); } return ret; }
    int sizeHintForRow(int x1) const { void* fun = LObjects::overrideFun(unique, 83); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 83, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemView::sizeHintForRow(x1); } return ret; }
    QRect visualRect(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 84); QRect ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QRect>(callOverrideFun(fun, 84, args, unique)); } return ret; }
    bool edit(const QModelIndex& x1, EditTrigger x2, QEvent* x3) { void* fun = LObjects::overrideFun(unique, 85); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 85, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemView::edit(x1, x2, x3); } return ret; }
    int horizontalOffset() const { void* fun = LObjects::overrideFun(unique, 86); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 86, 0, unique).toInt(); } return ret; }
    bool isIndexHidden(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 87); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 87, args, unique).toBool(); } return ret; }
    QModelIndex moveCursor(CursorAction x1, Qt::KeyboardModifiers x2) { void* fun = LObjects::overrideFun(unique, 88); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 88, args, unique)); } return ret; }
    QModelIndexList selectedIndexes() const { void* fun = LObjects::overrideFun(unique, 89); QModelIndexList ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QModelIndexList>(callOverrideFun(fun, 89, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemView::selectedIndexes(); } return ret; }
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex& x1, const QEvent* x2 = 0) const { void* fun = LObjects::overrideFun(unique, 90); QItemSelectionModel::SelectionFlags ret = (QItemSelectionModel::SelectionFlags)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = (QItemSelectionModel::SelectionFlags)callOverrideFun(fun, 90, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemView::selectionCommand(x1, x2); } return ret; }
    void setSelection(const QRect& x1, QItemSelectionModel::SelectionFlags x2) { void* fun = LObjects::overrideFun(unique, 91); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 91, args, unique); }}
    void startDrag(Qt::DropActions x1) { void* fun = LObjects::overrideFun(unique, 92); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 92, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::startDrag(x1); }}
    int verticalOffset() const { void* fun = LObjects::overrideFun(unique, 93); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 93, 0, unique).toInt(); } return ret; }
    QStyleOptionViewItem viewOptions() const { void* fun = LObjects::overrideFun(unique, 94); QStyleOptionViewItem ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QStyleOptionViewItem>(callOverrideFun(fun, 94, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemView::viewOptions(); } return ret; }
    QRegion visualRegionForSelection(const QItemSelection& x1) const { void* fun = LObjects::overrideFun(unique, 95); QRegion ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QRegion>(callOverrideFun(fun, 95, args, unique)); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemView::inputMethodQuery(x1); } return ret; }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::dropEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemView::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::focusOutEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::inputMethodEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::keyPressEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::mouseReleaseEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::resizeEvent(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::timerEvent(x1); }}
    bool viewportEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 96); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 96, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemView::viewportEvent(x1); } return ret; }
    void scrollContentsBy(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 97); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 97, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::scrollContentsBy(x1, x2); }}
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemView::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemView::sizeHint(); } return ret; }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::contextMenuEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::paintEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::wheelEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::changeEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemView::heightForWidth(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::closeEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::enterEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::hideEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::leaveEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::moveEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::tabletEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemView::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractItemView::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractItemView::disconnectNotify(x1); }}
};

class LAbstractListModel : public QAbstractListModel {
    Q_OBJECT
    friend class Q6;
public:
    LAbstractListModel(uint u, QObject* x1 = 0) : QAbstractListModel(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool dropMimeData(const QMimeData* x1, Qt::DropAction x2, int x3, int x4, const QModelIndex& x5) { void* fun = LObjects::overrideFun(unique, 57); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; ret = callOverrideFun(fun, 57, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractListModel::dropMimeData(x1, x2, x3, x4, x5); } return ret; }
    QModelIndex index(int x1, int x2 = 0, const QModelIndex& x3 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 62); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 62, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractListModel::index(x1, x2, x3); } return ret; }
    QModelIndex buddy(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 53); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 53, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractListModel::buddy(x1); } return ret; }
    bool canFetchMore(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 54); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 54, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractListModel::canFetchMore(x1); } return ret; }
    QVariant data(const QModelIndex& x1, int x2 = Qt::DisplayRole) const { void* fun = LObjects::overrideFun(unique, 56); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 56, args, unique)); } return ret; }
    void fetchMore(const QModelIndex& x1) { void* fun = LObjects::overrideFun(unique, 58); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 58, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractListModel::fetchMore(x1); }}
    Qt::ItemFlags flags(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 59); Qt::ItemFlags ret = (Qt::ItemFlags)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (Qt::ItemFlags)callOverrideFun(fun, 59, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractListModel::flags(x1); } return ret; }
    QVariant headerData(int x1, Qt::Orientation x2, int x3 = Qt::DisplayRole) const { void* fun = LObjects::overrideFun(unique, 61); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 61, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractListModel::headerData(x1, x2, x3); } return ret; }
    bool insertColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 63); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 63, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractListModel::insertColumns(x1, x2, x3); } return ret; }
    bool insertRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 64); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 64, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractListModel::insertRows(x1, x2, x3); } return ret; }
    QModelIndexList match(const QModelIndex& x1, int x2, const QVariant& x3, int x4 = 1, Qt::MatchFlags x5 = Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap)) const { void* fun = LObjects::overrideFun(unique, 65); QModelIndexList ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; ret = qVariantValue<QModelIndexList>(callOverrideFun(fun, 65, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractListModel::match(x1, x2, x3, x4, x5); } return ret; }
    QMimeData* mimeData(const QModelIndexList& x1) const { void* fun = LObjects::overrideFun(unique, 66); QMimeData* ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (QMimeData*)qVariantValue<void*>(callOverrideFun(fun, 66, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractListModel::mimeData(x1); } return ret; }
    QStringList mimeTypes() const { void* fun = LObjects::overrideFun(unique, 67); QStringList ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QStringList>(callOverrideFun(fun, 67, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractListModel::mimeTypes(); } return ret; }
    bool removeColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 69); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 69, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractListModel::removeColumns(x1, x2, x3); } return ret; }
    bool removeRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 70); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 70, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractListModel::removeRows(x1, x2, x3); } return ret; }
    int rowCount(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 71); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 71, args, unique).toInt(); } return ret; }
    bool setData(const QModelIndex& x1, const QVariant& x2, int x3 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 72); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 72, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractListModel::setData(x1, x2, x3); } return ret; }
    bool setHeaderData(int x1, Qt::Orientation x2, const QVariant& x3, int x4 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 73); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = callOverrideFun(fun, 73, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractListModel::setHeaderData(x1, x2, x3, x4); } return ret; }
    void sort(int x1, Qt::SortOrder x2 = Qt::AscendingOrder) { void* fun = LObjects::overrideFun(unique, 74); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 74, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractListModel::sort(x1, x2); }}
    QSize span(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 75); QSize ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QSize>(callOverrideFun(fun, 75, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractListModel::span(x1); } return ret; }
    Qt::DropActions supportedDropActions() const { void* fun = LObjects::overrideFun(unique, 76); Qt::DropActions ret = (Qt::DropActions)0; if(fun && (LObjects::calling != unique)) { ret = (Qt::DropActions)callOverrideFun(fun, 76, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractListModel::supportedDropActions(); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractListModel::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractListModel::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractListModel::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractListModel::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractListModel::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractListModel::timerEvent(x1); }}
};

class LAbstractPrintDialog : public QAbstractPrintDialog {
    Q_OBJECT
    friend class Q8;
public:
    LAbstractPrintDialog(uint u, QPrinter* x1, QWidget* x2 = 0) : QAbstractPrintDialog(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    int exec() { void* fun = LObjects::overrideFun(unique, 98); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 98, 0, unique).toInt(); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractPrintDialog::minimumSizeHint(); } return ret; }
    void setVisible(bool x1) { void* fun = LObjects::overrideFun(unique, 99); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 99, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractPrintDialog::setVisible(x1); }}
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractPrintDialog::sizeHint(); } return ret; }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractPrintDialog::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractPrintDialog::contextMenuEvent(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractPrintDialog::eventFilter(x1, x2); } return ret; }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractPrintDialog::keyPressEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractPrintDialog::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractPrintDialog::showEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractPrintDialog::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractPrintDialog::inputMethodQuery(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractPrintDialog::actionEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractPrintDialog::changeEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractPrintDialog::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractPrintDialog::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractPrintDialog::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractPrintDialog::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractPrintDialog::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractPrintDialog::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractPrintDialog::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractPrintDialog::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractPrintDialog::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractPrintDialog::inputMethodEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractPrintDialog::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractPrintDialog::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractPrintDialog::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractPrintDialog::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractPrintDialog::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractPrintDialog::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractPrintDialog::moveEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractPrintDialog::paintEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractPrintDialog::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractPrintDialog::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractPrintDialog::metric(x1); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractPrintDialog::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractPrintDialog::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractPrintDialog::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractPrintDialog::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractPrintDialog::timerEvent(x1); }}
};

class LAbstractProxyModel : public QAbstractProxyModel {
    Q_OBJECT
    friend class Q9;
public:
    LAbstractProxyModel(uint u, QObject* x1 = 0) : QAbstractProxyModel(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QModelIndex mapFromSource(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 100); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 100, args, unique)); } return ret; }
    QItemSelection mapSelectionFromSource(const QItemSelection& x1) const { void* fun = LObjects::overrideFun(unique, 101); QItemSelection ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QItemSelection>(callOverrideFun(fun, 101, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractProxyModel::mapSelectionFromSource(x1); } return ret; }
    QItemSelection mapSelectionToSource(const QItemSelection& x1) const { void* fun = LObjects::overrideFun(unique, 102); QItemSelection ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QItemSelection>(callOverrideFun(fun, 102, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractProxyModel::mapSelectionToSource(x1); } return ret; }
    QModelIndex mapToSource(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 103); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 103, args, unique)); } return ret; }
    void setSourceModel(QAbstractItemModel* x1) { void* fun = LObjects::overrideFun(unique, 104); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 104, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractProxyModel::setSourceModel(x1); }}
    QVariant data(const QModelIndex& x1, int x2 = Qt::DisplayRole) const { void* fun = LObjects::overrideFun(unique, 56); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 56, args, unique)); } return ret; }
    Qt::ItemFlags flags(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 59); Qt::ItemFlags ret = (Qt::ItemFlags)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (Qt::ItemFlags)callOverrideFun(fun, 59, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractProxyModel::flags(x1); } return ret; }
    QVariant headerData(int x1, Qt::Orientation x2, int x3) const { void* fun = LObjects::overrideFun(unique, 61); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 61, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractProxyModel::headerData(x1, x2, x3); } return ret; }
    void revert() { void* fun = LObjects::overrideFun(unique, 105); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 105, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractProxyModel::revert(); }}
    bool setData(const QModelIndex& x1, const QVariant& x2, int x3 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 72); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 72, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractProxyModel::setData(x1, x2, x3); } return ret; }
    bool setHeaderData(int x1, Qt::Orientation x2, const QVariant& x3, int x4 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 73); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = callOverrideFun(fun, 73, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractProxyModel::setHeaderData(x1, x2, x3, x4); } return ret; }
    bool submit() { void* fun = LObjects::overrideFun(unique, 106); bool ret = false; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 106, 0, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractProxyModel::submit(); } return ret; }
    QModelIndex buddy(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 53); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 53, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractProxyModel::buddy(x1); } return ret; }
    bool canFetchMore(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 54); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 54, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractProxyModel::canFetchMore(x1); } return ret; }
    int columnCount(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 55); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 55, args, unique).toInt(); } return ret; }
    bool dropMimeData(const QMimeData* x1, Qt::DropAction x2, int x3, int x4, const QModelIndex& x5) { void* fun = LObjects::overrideFun(unique, 57); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; ret = callOverrideFun(fun, 57, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractProxyModel::dropMimeData(x1, x2, x3, x4, x5); } return ret; }
    void fetchMore(const QModelIndex& x1) { void* fun = LObjects::overrideFun(unique, 58); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 58, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractProxyModel::fetchMore(x1); }}
    bool hasChildren(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 60); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 60, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractProxyModel::hasChildren(x1); } return ret; }
    QModelIndex index(int x1, int x2, const QModelIndex& x3 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 62); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 62, args, unique)); } return ret; }
    bool insertColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 63); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 63, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractProxyModel::insertColumns(x1, x2, x3); } return ret; }
    bool insertRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 64); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 64, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractProxyModel::insertRows(x1, x2, x3); } return ret; }
    QModelIndexList match(const QModelIndex& x1, int x2, const QVariant& x3, int x4 = 1, Qt::MatchFlags x5 = Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap)) const { void* fun = LObjects::overrideFun(unique, 65); QModelIndexList ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; ret = qVariantValue<QModelIndexList>(callOverrideFun(fun, 65, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractProxyModel::match(x1, x2, x3, x4, x5); } return ret; }
    QMimeData* mimeData(const QModelIndexList& x1) const { void* fun = LObjects::overrideFun(unique, 66); QMimeData* ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (QMimeData*)qVariantValue<void*>(callOverrideFun(fun, 66, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractProxyModel::mimeData(x1); } return ret; }
    QStringList mimeTypes() const { void* fun = LObjects::overrideFun(unique, 67); QStringList ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QStringList>(callOverrideFun(fun, 67, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractProxyModel::mimeTypes(); } return ret; }
    QModelIndex parent(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 68); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 68, args, unique)); } return ret; }
    bool removeColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 69); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 69, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractProxyModel::removeColumns(x1, x2, x3); } return ret; }
    bool removeRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 70); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 70, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractProxyModel::removeRows(x1, x2, x3); } return ret; }
    int rowCount(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 71); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 71, args, unique).toInt(); } return ret; }
    void sort(int x1, Qt::SortOrder x2 = Qt::AscendingOrder) { void* fun = LObjects::overrideFun(unique, 74); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 74, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractProxyModel::sort(x1, x2); }}
    QSize span(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 75); QSize ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QSize>(callOverrideFun(fun, 75, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractProxyModel::span(x1); } return ret; }
    Qt::DropActions supportedDropActions() const { void* fun = LObjects::overrideFun(unique, 76); Qt::DropActions ret = (Qt::DropActions)0; if(fun && (LObjects::calling != unique)) { ret = (Qt::DropActions)callOverrideFun(fun, 76, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractProxyModel::supportedDropActions(); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractProxyModel::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractProxyModel::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractProxyModel::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractProxyModel::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractProxyModel::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractProxyModel::timerEvent(x1); }}
};

class LAbstractScrollArea : public QAbstractScrollArea {
    Q_OBJECT
    friend class Q10;
public:
    LAbstractScrollArea(uint u, QWidget* x1 = 0) : QAbstractScrollArea(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void scrollContentsBy(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 97); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 97, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractScrollArea::scrollContentsBy(x1, x2); }}
    bool viewportEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 96); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 96, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractScrollArea::viewportEvent(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractScrollArea::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractScrollArea::sizeHint(); } return ret; }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractScrollArea::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractScrollArea::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractScrollArea::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractScrollArea::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractScrollArea::dropEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractScrollArea::keyPressEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractScrollArea::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractScrollArea::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractScrollArea::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractScrollArea::mouseReleaseEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractScrollArea::paintEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractScrollArea::resizeEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractScrollArea::wheelEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractScrollArea::changeEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractScrollArea::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractScrollArea::inputMethodQuery(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractScrollArea::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractScrollArea::closeEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractScrollArea::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractScrollArea::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractScrollArea::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractScrollArea::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractScrollArea::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractScrollArea::inputMethodEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractScrollArea::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractScrollArea::leaveEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractScrollArea::moveEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractScrollArea::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractScrollArea::tabletEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractScrollArea::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractScrollArea::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractScrollArea::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractScrollArea::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractScrollArea::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractScrollArea::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractScrollArea::timerEvent(x1); }}
};

class LAbstractSlider : public QAbstractSlider {
    Q_OBJECT
    friend class Q11;
public:
    LAbstractSlider(uint u, QWidget* x1 = 0) : QAbstractSlider(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void sliderChange(SliderChange x1) { void* fun = LObjects::overrideFun(unique, 107); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 107, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSlider::sliderChange(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSlider::changeEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSlider::keyPressEvent(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSlider::timerEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSlider::wheelEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractSlider::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractSlider::inputMethodQuery(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractSlider::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractSlider::sizeHint(); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSlider::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSlider::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSlider::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSlider::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSlider::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSlider::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSlider::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSlider::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSlider::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractSlider::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSlider::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSlider::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSlider::inputMethodEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSlider::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSlider::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSlider::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSlider::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSlider::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSlider::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSlider::moveEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSlider::paintEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSlider::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSlider::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSlider::tabletEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractSlider::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractSlider::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSlider::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSlider::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSlider::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSlider::disconnectNotify(x1); }}
};

class LAbstractSpinBox : public QAbstractSpinBox {
    Q_OBJECT
    friend class Q13;
public:
    LAbstractSpinBox(uint u, QWidget* x1 = 0) : QAbstractSpinBox(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void fixup(QString& x1) const { void* fun = LObjects::overrideFun(unique, 124); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 124, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSpinBox::fixup(x1); }}
    void stepBy(int x1) { void* fun = LObjects::overrideFun(unique, 125); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 125, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSpinBox::stepBy(x1); }}
    QValidator::State validate(QString& x1, int& x2) const { void* fun = LObjects::overrideFun(unique, 126); QValidator::State ret = (QValidator::State)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = (QValidator::State)callOverrideFun(fun, 126, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractSpinBox::validate(x1, x2); } return ret; }
    StepEnabled stepEnabled() const { void* fun = LObjects::overrideFun(unique, 127); StepEnabled ret = (StepEnabled)0; if(fun && (LObjects::calling != unique)) { ret = (StepEnabled)callOverrideFun(fun, 127, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractSpinBox::stepEnabled(); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractSpinBox::inputMethodQuery(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractSpinBox::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractSpinBox::sizeHint(); } return ret; }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSpinBox::changeEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSpinBox::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSpinBox::contextMenuEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSpinBox::focusInEvent(x1); }}
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSpinBox::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSpinBox::hideEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSpinBox::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSpinBox::keyReleaseEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSpinBox::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSpinBox::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSpinBox::mouseReleaseEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSpinBox::paintEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSpinBox::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSpinBox::showEvent(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSpinBox::timerEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSpinBox::wheelEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractSpinBox::heightForWidth(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSpinBox::actionEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSpinBox::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSpinBox::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSpinBox::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSpinBox::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSpinBox::enterEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractSpinBox::focusNextPrevChild(x1); } return ret; }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSpinBox::inputMethodEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSpinBox::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSpinBox::mouseDoubleClickEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSpinBox::moveEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSpinBox::tabletEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractSpinBox::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractSpinBox::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSpinBox::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSpinBox::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSpinBox::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractSpinBox::disconnectNotify(x1); }}
};

class LAbstractState : public QAbstractState {
    Q_OBJECT
    friend class Q14;
public:

    static NumList overrideIds;
    uint unique;

    void onEntry(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 128); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 128, args, unique); }}
    void onExit(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 129); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 129, args, unique); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractState::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractState::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractState::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractState::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractState::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractState::timerEvent(x1); }}
};

class LAbstractTextDocumentLayout : public QAbstractTextDocumentLayout {
    Q_OBJECT
    friend class Q16;
public:
    LAbstractTextDocumentLayout(uint u, QTextDocument* x1) : QAbstractTextDocumentLayout(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QRectF blockBoundingRect(const QTextBlock& x1) const { void* fun = LObjects::overrideFun(unique, 130); QRectF ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QRectF>(callOverrideFun(fun, 130, args, unique)); } return ret; }
    QSizeF documentSize() const { void* fun = LObjects::overrideFun(unique, 131); QSizeF ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSizeF>(callOverrideFun(fun, 131, 0, unique)); } return ret; }
    void draw(QPainter* x1, const PaintContext& x2) { void* fun = LObjects::overrideFun(unique, 132); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 132, args, unique); }}
    QRectF frameBoundingRect(QTextFrame* x1) const { void* fun = LObjects::overrideFun(unique, 133); QRectF ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QRectF>(callOverrideFun(fun, 133, args, unique)); } return ret; }
    int hitTest(const QPointF& x1, Qt::HitTestAccuracy x2) const { void* fun = LObjects::overrideFun(unique, 134); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 134, args, unique).toInt(); } return ret; }
    int pageCount() const { void* fun = LObjects::overrideFun(unique, 135); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 135, 0, unique).toInt(); } return ret; }
    void documentChanged(int x1, int x2, int x3) { void* fun = LObjects::overrideFun(unique, 136); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 136, args, unique); }}
    void drawInlineObject(QPainter* x1, const QRectF& x2, QTextInlineObject x3, int x4, const QTextFormat& x5) { void* fun = LObjects::overrideFun(unique, 137); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; callOverrideFun(fun, 137, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractTextDocumentLayout::drawInlineObject(x1, x2, x3, x4, x5); }}
    void positionInlineObject(QTextInlineObject x1, int x2, const QTextFormat& x3) { void* fun = LObjects::overrideFun(unique, 138); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 138, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractTextDocumentLayout::positionInlineObject(x1, x2, x3); }}
    void resizeInlineObject(QTextInlineObject x1, int x2, const QTextFormat& x3) { void* fun = LObjects::overrideFun(unique, 139); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 139, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractTextDocumentLayout::resizeInlineObject(x1, x2, x3); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractTextDocumentLayout::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractTextDocumentLayout::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractTextDocumentLayout::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractTextDocumentLayout::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractTextDocumentLayout::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractTextDocumentLayout::timerEvent(x1); }}
};

class LAbstractTransition : public QAbstractTransition {
    Q_OBJECT
    friend class Q17;
public:
    LAbstractTransition(uint u, QState* x1 = 0) : QAbstractTransition(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool eventTest(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 140); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 140, args, unique).toBool(); } return ret; }
    void onTransition(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 141); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 141, args, unique); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAbstractTransition::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractTransition::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractTransition::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractTransition::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractTransition::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAbstractTransition::timerEvent(x1); }}
};

class LAction : public QAction {
    Q_OBJECT
    friend class Q18;
public:
    LAction(uint u, QObject* x1) : QAction(x1), unique(u) {}
    LAction(uint u, const QString& x1, QObject* x2) : QAction(x1, x2), unique(u) {}
    LAction(uint u, const QIcon& x1, const QString& x2, QObject* x3) : QAction(x1, x2, x3), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAction::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAction::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAction::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAction::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAction::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAction::timerEvent(x1); }}
};

class LActionGroup : public QActionGroup {
    Q_OBJECT
    friend class Q19;
public:
    LActionGroup(uint u, QObject* x1) : QActionGroup(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QActionGroup::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QActionGroup::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QActionGroup::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QActionGroup::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QActionGroup::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QActionGroup::timerEvent(x1); }}
};

class LAnimationGroup : public QAnimationGroup {
    Q_OBJECT
    friend class Q20;
public:
    LAnimationGroup(uint u, QObject* x1 = 0) : QAnimationGroup(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    int duration() const { void* fun = LObjects::overrideFun(unique, 1); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 1, 0, unique).toInt(); } return ret; }
    void updateCurrentTime(int x1) { void* fun = LObjects::overrideFun(unique, 2); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 2, args, unique); }}
    void updateDirection(QAbstractAnimation::Direction x1) { void* fun = LObjects::overrideFun(unique, 3); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 3, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAnimationGroup::updateDirection(x1); }}
    void updateState(QAbstractAnimation::State x1, QAbstractAnimation::State x2) { void* fun = LObjects::overrideFun(unique, 4); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 4, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAnimationGroup::updateState(x1, x2); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QAnimationGroup::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAnimationGroup::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAnimationGroup::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAnimationGroup::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAnimationGroup::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QAnimationGroup::timerEvent(x1); }}
};

class LApplication : public QApplication {
    Q_OBJECT
    friend class Q21;
public:

    static NumList overrideIds;
    uint unique;

    void commitData(QSessionManager& x1) { void* fun = LObjects::overrideFun(unique, 142); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 142, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QApplication::commitData(x1); }}
    void saveState(QSessionManager& x1) { void* fun = LObjects::overrideFun(unique, 143); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 143, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QApplication::saveState(x1); }}
    bool notify(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 144); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 144, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QApplication::notify(x1, x2); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QApplication::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QApplication::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QApplication::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QApplication::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QApplication::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QApplication::timerEvent(x1); }}
};

class LBoxLayout : public QBoxLayout {
    Q_OBJECT
    friend class Q22;
public:
    LBoxLayout(uint u, Direction x1, QWidget* x2 = 0) : QBoxLayout(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void addItem(QLayoutItem* x1) { void* fun = LObjects::overrideFun(unique, 145); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 145, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QBoxLayout::addItem(x1); }}
    int count() const { void* fun = LObjects::overrideFun(unique, 146); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 146, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QBoxLayout::count(); } return ret; }
    Qt::Orientations expandingDirections() const { void* fun = LObjects::overrideFun(unique, 147); Qt::Orientations ret = (Qt::Orientations)0; if(fun && (LObjects::calling != unique)) { ret = (Qt::Orientations)callOverrideFun(fun, 147, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QBoxLayout::expandingDirections(); } return ret; }
    bool hasHeightForWidth() const { void* fun = LObjects::overrideFun(unique, 148); bool ret = false; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 148, 0, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QBoxLayout::hasHeightForWidth(); } return ret; }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QBoxLayout::heightForWidth(x1); } return ret; }
    void invalidate() { void* fun = LObjects::overrideFun(unique, 149); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 149, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QBoxLayout::invalidate(); }}
    QLayoutItem* itemAt(int x1) const { void* fun = LObjects::overrideFun(unique, 150); QLayoutItem* ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (QLayoutItem*)qVariantValue<void*>(callOverrideFun(fun, 150, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QBoxLayout::itemAt(x1); } return ret; }
    QSize maximumSize() const { void* fun = LObjects::overrideFun(unique, 151); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 151, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QBoxLayout::maximumSize(); } return ret; }
    int minimumHeightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 152); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 152, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QBoxLayout::minimumHeightForWidth(x1); } return ret; }
    QSize minimumSize() const { void* fun = LObjects::overrideFun(unique, 153); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 153, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QBoxLayout::minimumSize(); } return ret; }
    void setGeometry(const QRect& x1) { void* fun = LObjects::overrideFun(unique, 154); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 154, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QBoxLayout::setGeometry(x1); }}
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QBoxLayout::sizeHint(); } return ret; }
    QLayoutItem* takeAt(int x1) { void* fun = LObjects::overrideFun(unique, 155); QLayoutItem* ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (QLayoutItem*)qVariantValue<void*>(callOverrideFun(fun, 155, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QBoxLayout::takeAt(x1); } return ret; }
    int indexOf(QWidget* x1) const { void* fun = LObjects::overrideFun(unique, 156); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 156, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QBoxLayout::indexOf(x1); } return ret; }
    QRect geometry() const { void* fun = LObjects::overrideFun(unique, 157); QRect ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QRect>(callOverrideFun(fun, 157, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QBoxLayout::geometry(); } return ret; }
    bool isEmpty() const { void* fun = LObjects::overrideFun(unique, 158); bool ret = false; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 158, 0, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QBoxLayout::isEmpty(); } return ret; }
    QLayout* layout() { void* fun = LObjects::overrideFun(unique, 159); QLayout* ret = 0; if(fun && (LObjects::calling != unique)) { ret = (QLayout*)qVariantValue<void*>(callOverrideFun(fun, 159, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QBoxLayout::layout(); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QBoxLayout::childEvent(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QBoxLayout::eventFilter(x1, x2); } return ret; }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QBoxLayout::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QBoxLayout::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QBoxLayout::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QBoxLayout::timerEvent(x1); }}
};

class LBuffer : public QBuffer {
    Q_OBJECT
    friend class Q23;
public:
    LBuffer(uint u, QObject* x1 = 0) : QBuffer(x1), unique(u) {}
    LBuffer(uint u, QByteArray* x1, QObject* x2 = 0) : QBuffer(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool atEnd() const { void* fun = LObjects::overrideFun(unique, 108); bool ret = false; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 108, 0, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QBuffer::atEnd(); } return ret; }
    bool canReadLine() const { void* fun = LObjects::overrideFun(unique, 111); bool ret = false; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 111, 0, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QBuffer::canReadLine(); } return ret; }
    void close() { void* fun = LObjects::overrideFun(unique, 112); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 112, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QBuffer::close(); }}
    bool open(OpenMode x1) { void* fun = LObjects::overrideFun(unique, 119); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 119, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QBuffer::open(x1); } return ret; }
    qlonglong pos() const { void* fun = LObjects::overrideFun(unique, 120); qlonglong ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 120, 0, unique).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QBuffer::pos(); } return ret; }
    bool seek(qint64 x1) { void* fun = LObjects::overrideFun(unique, 122); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 122, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QBuffer::seek(x1); } return ret; }
    qlonglong size() const { void* fun = LObjects::overrideFun(unique, 123); qlonglong ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 123, 0, unique).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QBuffer::size(); } return ret; }
    qlonglong readData(char* x1, qint64 x2) { void* fun = LObjects::overrideFun(unique, 116); qlonglong ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 116, args, unique).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QBuffer::readData(x1, x2); } return ret; }
    qlonglong writeData(const char* x1, qint64 x2) { void* fun = LObjects::overrideFun(unique, 118); qlonglong ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 118, args, unique).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QBuffer::writeData(x1, x2); } return ret; }
    qlonglong bytesAvailable() const { void* fun = LObjects::overrideFun(unique, 109); qlonglong ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 109, 0, unique).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QBuffer::bytesAvailable(); } return ret; }
    qlonglong bytesToWrite() const { void* fun = LObjects::overrideFun(unique, 110); qlonglong ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 110, 0, unique).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QBuffer::bytesToWrite(); } return ret; }
    bool isSequential() const { void* fun = LObjects::overrideFun(unique, 113); bool ret = false; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 113, 0, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QBuffer::isSequential(); } return ret; }
    bool reset() { void* fun = LObjects::overrideFun(unique, 121); bool ret = false; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 121, 0, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QBuffer::reset(); } return ret; }
    bool waitForBytesWritten(int x1) { void* fun = LObjects::overrideFun(unique, 114); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 114, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QBuffer::waitForBytesWritten(x1); } return ret; }
    bool waitForReadyRead(int x1) { void* fun = LObjects::overrideFun(unique, 115); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 115, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QBuffer::waitForReadyRead(x1); } return ret; }
    qlonglong readLineData(char* x1, qint64 x2) { void* fun = LObjects::overrideFun(unique, 117); qlonglong ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 117, args, unique).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QBuffer::readLineData(x1, x2); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QBuffer::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QBuffer::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QBuffer::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QBuffer::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QBuffer::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QBuffer::timerEvent(x1); }}
};

class LButtonGroup : public QButtonGroup {
    Q_OBJECT
    friend class Q24;
public:
    LButtonGroup(uint u, QObject* x1 = 0) : QButtonGroup(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QButtonGroup::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QButtonGroup::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QButtonGroup::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QButtonGroup::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QButtonGroup::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QButtonGroup::timerEvent(x1); }}
};

class LCDEStyle : public QCDEStyle {
    Q_OBJECT
    friend class Q25;
public:
    LCDEStyle(uint u, bool x1 = false) : QCDEStyle(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void drawControl(ControlElement x1, const QStyleOption* x2, QPainter* x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 160); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; callOverrideFun(fun, 160, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCDEStyle::drawControl(x1, x2, x3, x4); }}
    void drawPrimitive(PrimitiveElement x1, const QStyleOption* x2, QPainter* x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 161); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; callOverrideFun(fun, 161, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCDEStyle::drawPrimitive(x1, x2, x3, x4); }}
    int pixelMetric(PixelMetric x1, const QStyleOption* x2 = 0, const QWidget* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 162); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 162, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCDEStyle::pixelMetric(x1, x2, x3); } return ret; }
    QPalette standardPalette() const { void* fun = LObjects::overrideFun(unique, 163); QPalette ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QPalette>(callOverrideFun(fun, 163, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCDEStyle::standardPalette(); } return ret; }
    void drawComplexControl(ComplexControl x1, const QStyleOptionComplex* x2, QPainter* x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 164); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; callOverrideFun(fun, 164, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCDEStyle::drawComplexControl(x1, x2, x3, x4); }}
    void polish(QPalette& x1) { void* fun = LObjects::overrideFun(unique, 165); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 165, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCDEStyle::polish(x1); }}
    QSize sizeFromContents(ContentsType x1, const QStyleOption* x2, const QSize& x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 166); QSize ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = qVariantValue<QSize>(callOverrideFun(fun, 166, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCDEStyle::sizeFromContents(x1, x2, x3, x4); } return ret; }
    QPixmap standardPixmap(StandardPixmap x1, const QStyleOption* x2, const QWidget* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 167); QPixmap ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QPixmap>(callOverrideFun(fun, 167, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCDEStyle::standardPixmap(x1, x2, x3); } return ret; }
    int styleHint(StyleHint x1, const QStyleOption* x2 = 0, const QWidget* x3 = 0, QStyleHintReturn* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 168); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = callOverrideFun(fun, 168, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCDEStyle::styleHint(x1, x2, x3, x4); } return ret; }
    QRect subControlRect(ComplexControl x1, const QStyleOptionComplex* x2, SubControl x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 169); QRect ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = qVariantValue<QRect>(callOverrideFun(fun, 169, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCDEStyle::subControlRect(x1, x2, x3, x4); } return ret; }
    QRect subElementRect(SubElement x1, const QStyleOption* x2, const QWidget* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 170); QRect ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QRect>(callOverrideFun(fun, 170, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCDEStyle::subElementRect(x1, x2, x3); } return ret; }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCDEStyle::timerEvent(x1); }}
    QPixmap generatedIconPixmap(QIcon::Mode x1, const QPixmap& x2, const QStyleOption* x3) const { void* fun = LObjects::overrideFun(unique, 171); QPixmap ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QPixmap>(callOverrideFun(fun, 171, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCDEStyle::generatedIconPixmap(x1, x2, x3); } return ret; }
    SubControl hitTestComplexControl(ComplexControl x1, const QStyleOptionComplex* x2, const QPoint& x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 172); SubControl ret = (SubControl)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = (SubControl)callOverrideFun(fun, 172, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCDEStyle::hitTestComplexControl(x1, x2, x3, x4); } return ret; }
    void unpolish(QWidget* x1) { void* fun = LObjects::overrideFun(unique, 175); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 175, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCDEStyle::unpolish(x1); }}
    void drawItemPixmap(QPainter* x1, const QRect& x2, int x3, const QPixmap& x4) const { void* fun = LObjects::overrideFun(unique, 177); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; callOverrideFun(fun, 177, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCDEStyle::drawItemPixmap(x1, x2, x3, x4); }}
    void drawItemText(QPainter* x1, const QRect& x2, int x3, const QPalette& x4, bool x5, const QString& x6, QPalette::ColorRole x7 = QPalette::NoRole) const { void* fun = LObjects::overrideFun(unique, 178); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4, &x5, &x6, &x7 }; callOverrideFun(fun, 178, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCDEStyle::drawItemText(x1, x2, x3, x4, x5, x6, x7); }}
    QRect itemPixmapRect(const QRect& x1, int x2, const QPixmap& x3) const { void* fun = LObjects::overrideFun(unique, 179); QRect ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QRect>(callOverrideFun(fun, 179, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCDEStyle::itemPixmapRect(x1, x2, x3); } return ret; }
    QRect itemTextRect(const QFontMetrics& x1, const QRect& x2, int x3, bool x4, const QString& x5) const { void* fun = LObjects::overrideFun(unique, 180); QRect ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; ret = qVariantValue<QRect>(callOverrideFun(fun, 180, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCDEStyle::itemTextRect(x1, x2, x3, x4, x5); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCDEStyle::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCDEStyle::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCDEStyle::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCDEStyle::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCDEStyle::disconnectNotify(x1); }}
};

class LCalendarWidget : public QCalendarWidget {
    Q_OBJECT
    friend class Q26;
public:
    LCalendarWidget(uint u, QWidget* x1 = 0) : QCalendarWidget(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void paintCell(QPainter* x1, const QRect& x2, const QDate& x3) const { void* fun = LObjects::overrideFun(unique, 181); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 181, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCalendarWidget::paintCell(x1, x2, x3); }}
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCalendarWidget::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCalendarWidget::sizeHint(); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCalendarWidget::eventFilter(x1, x2); } return ret; }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCalendarWidget::keyPressEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCalendarWidget::mousePressEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCalendarWidget::resizeEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCalendarWidget::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCalendarWidget::inputMethodQuery(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCalendarWidget::actionEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCalendarWidget::changeEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCalendarWidget::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCalendarWidget::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCalendarWidget::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCalendarWidget::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCalendarWidget::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCalendarWidget::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCalendarWidget::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCalendarWidget::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCalendarWidget::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCalendarWidget::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCalendarWidget::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCalendarWidget::inputMethodEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCalendarWidget::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCalendarWidget::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCalendarWidget::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCalendarWidget::mouseMoveEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCalendarWidget::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCalendarWidget::moveEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCalendarWidget::paintEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCalendarWidget::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCalendarWidget::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCalendarWidget::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCalendarWidget::metric(x1); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCalendarWidget::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCalendarWidget::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCalendarWidget::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCalendarWidget::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCalendarWidget::timerEvent(x1); }}
};

class LCheckBox : public QCheckBox {
    Q_OBJECT
    friend class Q27;
public:
    LCheckBox(uint u, QWidget* x1 = 0) : QCheckBox(x1), unique(u) {}
    LCheckBox(uint u, const QString& x1, QWidget* x2 = 0) : QCheckBox(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCheckBox::sizeHint(); } return ret; }
    void checkStateSet() { void* fun = LObjects::overrideFun(unique, 11); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 11, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCheckBox::checkStateSet(); }}
    bool hitButton(const QPoint& x1) const { void* fun = LObjects::overrideFun(unique, 12); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 12, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCheckBox::hitButton(x1); } return ret; }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCheckBox::mouseMoveEvent(x1); }}
    void nextCheckState() { void* fun = LObjects::overrideFun(unique, 13); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 13, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCheckBox::nextCheckState(); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCheckBox::paintEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCheckBox::changeEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCheckBox::focusInEvent(x1); }}
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCheckBox::focusOutEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCheckBox::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCheckBox::keyReleaseEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCheckBox::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCheckBox::mouseReleaseEvent(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCheckBox::timerEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCheckBox::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCheckBox::inputMethodQuery(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCheckBox::minimumSizeHint(); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCheckBox::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCheckBox::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCheckBox::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCheckBox::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCheckBox::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCheckBox::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCheckBox::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCheckBox::enterEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCheckBox::focusNextPrevChild(x1); } return ret; }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCheckBox::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCheckBox::inputMethodEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCheckBox::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCheckBox::mouseDoubleClickEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCheckBox::moveEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCheckBox::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCheckBox::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCheckBox::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCheckBox::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCheckBox::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCheckBox::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCheckBox::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCheckBox::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCheckBox::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCheckBox::disconnectNotify(x1); }}
};

class LCleanlooksStyle : public QCleanlooksStyle {
    Q_OBJECT
    friend class Q28;
public:
    LCleanlooksStyle(uint u) : unique(u) {}

    static NumList overrideIds;
    uint unique;

    void drawComplexControl(ComplexControl x1, const QStyleOptionComplex* x2, QPainter* x3, const QWidget* x4) const { void* fun = LObjects::overrideFun(unique, 164); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; callOverrideFun(fun, 164, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCleanlooksStyle::drawComplexControl(x1, x2, x3, x4); }}
    void drawControl(ControlElement x1, const QStyleOption* x2, QPainter* x3, const QWidget* x4) const { void* fun = LObjects::overrideFun(unique, 160); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; callOverrideFun(fun, 160, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCleanlooksStyle::drawControl(x1, x2, x3, x4); }}
    void drawItemPixmap(QPainter* x1, const QRect& x2, int x3, const QPixmap& x4) const { void* fun = LObjects::overrideFun(unique, 177); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; callOverrideFun(fun, 177, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCleanlooksStyle::drawItemPixmap(x1, x2, x3, x4); }}
    void drawItemText(QPainter* x1, const QRect& x2, int x3, const QPalette& x4, bool x5, const QString& x6, QPalette::ColorRole x7 = QPalette::NoRole) const { void* fun = LObjects::overrideFun(unique, 178); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4, &x5, &x6, &x7 }; callOverrideFun(fun, 178, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCleanlooksStyle::drawItemText(x1, x2, x3, x4, x5, x6, x7); }}
    void drawPrimitive(PrimitiveElement x1, const QStyleOption* x2, QPainter* x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 161); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; callOverrideFun(fun, 161, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCleanlooksStyle::drawPrimitive(x1, x2, x3, x4); }}
    QPixmap generatedIconPixmap(QIcon::Mode x1, const QPixmap& x2, const QStyleOption* x3) const { void* fun = LObjects::overrideFun(unique, 171); QPixmap ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QPixmap>(callOverrideFun(fun, 171, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCleanlooksStyle::generatedIconPixmap(x1, x2, x3); } return ret; }
    SubControl hitTestComplexControl(ComplexControl x1, const QStyleOptionComplex* x2, const QPoint& x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 172); SubControl ret = (SubControl)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = (SubControl)callOverrideFun(fun, 172, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCleanlooksStyle::hitTestComplexControl(x1, x2, x3, x4); } return ret; }
    QRect itemPixmapRect(const QRect& x1, int x2, const QPixmap& x3) const { void* fun = LObjects::overrideFun(unique, 179); QRect ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QRect>(callOverrideFun(fun, 179, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCleanlooksStyle::itemPixmapRect(x1, x2, x3); } return ret; }
    int pixelMetric(PixelMetric x1, const QStyleOption* x2 = 0, const QWidget* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 162); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 162, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCleanlooksStyle::pixelMetric(x1, x2, x3); } return ret; }
    void polish(QWidget* x1) { void* fun = LObjects::overrideFun(unique, 174); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 174, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCleanlooksStyle::polish(x1); }}
    QSize sizeFromContents(ContentsType x1, const QStyleOption* x2, const QSize& x3, const QWidget* x4) const { void* fun = LObjects::overrideFun(unique, 166); QSize ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = qVariantValue<QSize>(callOverrideFun(fun, 166, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCleanlooksStyle::sizeFromContents(x1, x2, x3, x4); } return ret; }
    QPalette standardPalette() const { void* fun = LObjects::overrideFun(unique, 163); QPalette ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QPalette>(callOverrideFun(fun, 163, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCleanlooksStyle::standardPalette(); } return ret; }
    QPixmap standardPixmap(StandardPixmap x1, const QStyleOption* x2, const QWidget* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 167); QPixmap ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QPixmap>(callOverrideFun(fun, 167, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCleanlooksStyle::standardPixmap(x1, x2, x3); } return ret; }
    int styleHint(StyleHint x1, const QStyleOption* x2 = 0, const QWidget* x3 = 0, QStyleHintReturn* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 168); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = callOverrideFun(fun, 168, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCleanlooksStyle::styleHint(x1, x2, x3, x4); } return ret; }
    QRect subControlRect(ComplexControl x1, const QStyleOptionComplex* x2, SubControl x3, const QWidget* x4) const { void* fun = LObjects::overrideFun(unique, 169); QRect ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = qVariantValue<QRect>(callOverrideFun(fun, 169, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCleanlooksStyle::subControlRect(x1, x2, x3, x4); } return ret; }
    QRect subElementRect(SubElement x1, const QStyleOption* x2, const QWidget* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 170); QRect ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QRect>(callOverrideFun(fun, 170, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCleanlooksStyle::subElementRect(x1, x2, x3); } return ret; }
    void unpolish(QWidget* x1) { void* fun = LObjects::overrideFun(unique, 175); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 175, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCleanlooksStyle::unpolish(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCleanlooksStyle::eventFilter(x1, x2); } return ret; }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCleanlooksStyle::timerEvent(x1); }}
    QRect itemTextRect(const QFontMetrics& x1, const QRect& x2, int x3, bool x4, const QString& x5) const { void* fun = LObjects::overrideFun(unique, 180); QRect ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; ret = qVariantValue<QRect>(callOverrideFun(fun, 180, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCleanlooksStyle::itemTextRect(x1, x2, x3, x4, x5); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCleanlooksStyle::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCleanlooksStyle::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCleanlooksStyle::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCleanlooksStyle::disconnectNotify(x1); }}
};

class LColorDialog : public QColorDialog {
    Q_OBJECT
    friend class Q30;
public:
    LColorDialog(uint u, QWidget* x1 = 0) : QColorDialog(x1), unique(u) {}
    LColorDialog(uint u, const QColor& x1, QWidget* x2 = 0) : QColorDialog(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void setVisible(bool x1) { void* fun = LObjects::overrideFun(unique, 99); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 99, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColorDialog::setVisible(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColorDialog::changeEvent(x1); }}
    void done(int x1) { void* fun = LObjects::overrideFun(unique, 182); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 182, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColorDialog::done(x1); }}
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QColorDialog::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QColorDialog::sizeHint(); } return ret; }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColorDialog::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColorDialog::contextMenuEvent(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QColorDialog::eventFilter(x1, x2); } return ret; }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColorDialog::keyPressEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColorDialog::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColorDialog::showEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QColorDialog::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QColorDialog::inputMethodQuery(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColorDialog::actionEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColorDialog::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColorDialog::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColorDialog::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColorDialog::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColorDialog::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColorDialog::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QColorDialog::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColorDialog::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColorDialog::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColorDialog::inputMethodEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColorDialog::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColorDialog::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColorDialog::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColorDialog::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColorDialog::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColorDialog::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColorDialog::moveEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColorDialog::paintEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColorDialog::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColorDialog::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QColorDialog::metric(x1); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColorDialog::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColorDialog::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColorDialog::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColorDialog::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColorDialog::timerEvent(x1); }}
};

class LColumnView : public QColumnView {
    Q_OBJECT
    friend class Q31;
public:
    LColumnView(uint u, QWidget* x1 = 0) : QColumnView(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QAbstractItemView* createColumn(const QModelIndex& x1) { void* fun = LObjects::overrideFun(unique, 183); QAbstractItemView* ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (QAbstractItemView*)qVariantValue<void*>(callOverrideFun(fun, 183, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QColumnView::createColumn(x1); } return ret; }
    QModelIndex indexAt(const QPoint& x1) const { void* fun = LObjects::overrideFun(unique, 77); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 77, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QColumnView::indexAt(x1); } return ret; }
    void scrollTo(const QModelIndex& x1, ScrollHint x2 = EnsureVisible) { void* fun = LObjects::overrideFun(unique, 79); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 79, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::scrollTo(x1, x2); }}
    void selectAll() { void* fun = LObjects::overrideFun(unique, 184); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 184, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::selectAll(); }}
    void setModel(QAbstractItemModel* x1) { void* fun = LObjects::overrideFun(unique, 80); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 80, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::setModel(x1); }}
    void setRootIndex(const QModelIndex& x1) { void* fun = LObjects::overrideFun(unique, 185); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 185, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::setRootIndex(x1); }}
    void setSelectionModel(QItemSelectionModel* x1) { void* fun = LObjects::overrideFun(unique, 81); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 81, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::setSelectionModel(x1); }}
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QColumnView::sizeHint(); } return ret; }
    QRect visualRect(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 84); QRect ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QRect>(callOverrideFun(fun, 84, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QColumnView::visualRect(x1); } return ret; }
    void currentChanged(const QModelIndex& x1, const QModelIndex& x2) { void* fun = LObjects::overrideFun(unique, 186); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 186, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::currentChanged(x1, x2); }}
    int horizontalOffset() const { void* fun = LObjects::overrideFun(unique, 86); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 86, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QColumnView::horizontalOffset(); } return ret; }
    bool isIndexHidden(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 87); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 87, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QColumnView::isIndexHidden(x1); } return ret; }
    QModelIndex moveCursor(CursorAction x1, Qt::KeyboardModifiers x2) { void* fun = LObjects::overrideFun(unique, 88); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 88, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QColumnView::moveCursor(x1, x2); } return ret; }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::resizeEvent(x1); }}
    void rowsInserted(const QModelIndex& x1, int x2, int x3) { void* fun = LObjects::overrideFun(unique, 187); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 187, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::rowsInserted(x1, x2, x3); }}
    void scrollContentsBy(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 97); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 97, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::scrollContentsBy(x1, x2); }}
    void setSelection(const QRect& x1, QItemSelectionModel::SelectionFlags x2) { void* fun = LObjects::overrideFun(unique, 91); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 91, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::setSelection(x1, x2); }}
    int verticalOffset() const { void* fun = LObjects::overrideFun(unique, 93); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 93, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QColumnView::verticalOffset(); } return ret; }
    QRegion visualRegionForSelection(const QItemSelection& x1) const { void* fun = LObjects::overrideFun(unique, 95); QRegion ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QRegion>(callOverrideFun(fun, 95, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QColumnView::visualRegionForSelection(x1); } return ret; }
    void keyboardSearch(const QString& x1) { void* fun = LObjects::overrideFun(unique, 78); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 78, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::keyboardSearch(x1); }}
    int sizeHintForColumn(int x1) const { void* fun = LObjects::overrideFun(unique, 82); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 82, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QColumnView::sizeHintForColumn(x1); } return ret; }
    int sizeHintForRow(int x1) const { void* fun = LObjects::overrideFun(unique, 83); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 83, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QColumnView::sizeHintForRow(x1); } return ret; }
    bool edit(const QModelIndex& x1, EditTrigger x2, QEvent* x3) { void* fun = LObjects::overrideFun(unique, 85); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 85, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QColumnView::edit(x1, x2, x3); } return ret; }
    QModelIndexList selectedIndexes() const { void* fun = LObjects::overrideFun(unique, 89); QModelIndexList ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QModelIndexList>(callOverrideFun(fun, 89, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QColumnView::selectedIndexes(); } return ret; }
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex& x1, const QEvent* x2 = 0) const { void* fun = LObjects::overrideFun(unique, 90); QItemSelectionModel::SelectionFlags ret = (QItemSelectionModel::SelectionFlags)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = (QItemSelectionModel::SelectionFlags)callOverrideFun(fun, 90, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QColumnView::selectionCommand(x1, x2); } return ret; }
    void startDrag(Qt::DropActions x1) { void* fun = LObjects::overrideFun(unique, 92); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 92, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::startDrag(x1); }}
    QStyleOptionViewItem viewOptions() const { void* fun = LObjects::overrideFun(unique, 94); QStyleOptionViewItem ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QStyleOptionViewItem>(callOverrideFun(fun, 94, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QColumnView::viewOptions(); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QColumnView::inputMethodQuery(x1); } return ret; }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::dropEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QColumnView::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::focusOutEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::inputMethodEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::keyPressEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::mouseReleaseEvent(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::timerEvent(x1); }}
    bool viewportEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 96); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 96, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QColumnView::viewportEvent(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QColumnView::minimumSizeHint(); } return ret; }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::contextMenuEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::paintEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::wheelEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::changeEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QColumnView::heightForWidth(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::closeEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::enterEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::hideEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::leaveEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::moveEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::tabletEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QColumnView::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QColumnView::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QColumnView::disconnectNotify(x1); }}
};

class LComboBox : public QComboBox {
    Q_OBJECT
    friend class Q32;
public:
    LComboBox(uint u, QWidget* x1 = 0) : QComboBox(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void hidePopup() { void* fun = LObjects::overrideFun(unique, 188); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 188, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QComboBox::hidePopup(); }}
    void showPopup() { void* fun = LObjects::overrideFun(unique, 189); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 189, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QComboBox::showPopup(); }}
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QComboBox::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QComboBox::sizeHint(); } return ret; }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QComboBox::changeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QComboBox::contextMenuEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QComboBox::focusInEvent(x1); }}
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QComboBox::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QComboBox::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QComboBox::inputMethodEvent(x1); }}
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QComboBox::inputMethodQuery(x1); } return ret; }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QComboBox::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QComboBox::keyReleaseEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QComboBox::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QComboBox::mouseReleaseEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QComboBox::paintEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QComboBox::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QComboBox::showEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QComboBox::wheelEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QComboBox::heightForWidth(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QComboBox::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QComboBox::closeEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QComboBox::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QComboBox::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QComboBox::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QComboBox::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QComboBox::enterEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QComboBox::focusNextPrevChild(x1); } return ret; }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QComboBox::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QComboBox::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QComboBox::mouseMoveEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QComboBox::moveEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QComboBox::tabletEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QComboBox::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QComboBox::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QComboBox::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QComboBox::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QComboBox::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QComboBox::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QComboBox::timerEvent(x1); }}
};

class LCommandLinkButton : public QCommandLinkButton {
    Q_OBJECT
    friend class Q33;
public:
    LCommandLinkButton(uint u, QWidget* x1 = 0) : QCommandLinkButton(x1), unique(u) {}
    LCommandLinkButton(uint u, const QString& x1, QWidget* x2 = 0) : QCommandLinkButton(x1, x2), unique(u) {}
    LCommandLinkButton(uint u, const QString& x1, const QString& x2, QWidget* x3 = 0) : QCommandLinkButton(x1, x2, x3), unique(u) {}

    static NumList overrideIds;
    uint unique;

    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCommandLinkButton::heightForWidth(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCommandLinkButton::minimumSizeHint(); } return ret; }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommandLinkButton::paintEvent(x1); }}
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCommandLinkButton::sizeHint(); } return ret; }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommandLinkButton::focusInEvent(x1); }}
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommandLinkButton::focusOutEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommandLinkButton::keyPressEvent(x1); }}
    void checkStateSet() { void* fun = LObjects::overrideFun(unique, 11); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 11, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommandLinkButton::checkStateSet(); }}
    bool hitButton(const QPoint& x1) const { void* fun = LObjects::overrideFun(unique, 12); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 12, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCommandLinkButton::hitButton(x1); } return ret; }
    void nextCheckState() { void* fun = LObjects::overrideFun(unique, 13); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 13, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommandLinkButton::nextCheckState(); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommandLinkButton::changeEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommandLinkButton::keyReleaseEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommandLinkButton::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommandLinkButton::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommandLinkButton::mouseReleaseEvent(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommandLinkButton::timerEvent(x1); }}
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCommandLinkButton::inputMethodQuery(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommandLinkButton::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommandLinkButton::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommandLinkButton::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommandLinkButton::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommandLinkButton::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommandLinkButton::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommandLinkButton::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommandLinkButton::enterEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCommandLinkButton::focusNextPrevChild(x1); } return ret; }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommandLinkButton::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommandLinkButton::inputMethodEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommandLinkButton::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommandLinkButton::mouseDoubleClickEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommandLinkButton::moveEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommandLinkButton::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommandLinkButton::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommandLinkButton::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommandLinkButton::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCommandLinkButton::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCommandLinkButton::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommandLinkButton::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommandLinkButton::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommandLinkButton::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommandLinkButton::disconnectNotify(x1); }}
};

class LCommonStyle : public QCommonStyle {
    Q_OBJECT
    friend class Q34;
public:
    LCommonStyle(uint u) : unique(u) {}

    static NumList overrideIds;
    uint unique;

    void drawComplexControl(ComplexControl x1, const QStyleOptionComplex* x2, QPainter* x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 164); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; callOverrideFun(fun, 164, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommonStyle::drawComplexControl(x1, x2, x3, x4); }}
    void drawControl(ControlElement x1, const QStyleOption* x2, QPainter* x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 160); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; callOverrideFun(fun, 160, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommonStyle::drawControl(x1, x2, x3, x4); }}
    void drawPrimitive(PrimitiveElement x1, const QStyleOption* x2, QPainter* x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 161); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; callOverrideFun(fun, 161, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommonStyle::drawPrimitive(x1, x2, x3, x4); }}
    QPixmap generatedIconPixmap(QIcon::Mode x1, const QPixmap& x2, const QStyleOption* x3) const { void* fun = LObjects::overrideFun(unique, 171); QPixmap ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QPixmap>(callOverrideFun(fun, 171, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCommonStyle::generatedIconPixmap(x1, x2, x3); } return ret; }
    SubControl hitTestComplexControl(ComplexControl x1, const QStyleOptionComplex* x2, const QPoint& x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 172); SubControl ret = (SubControl)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = (SubControl)callOverrideFun(fun, 172, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCommonStyle::hitTestComplexControl(x1, x2, x3, x4); } return ret; }
    int pixelMetric(PixelMetric x1, const QStyleOption* x2 = 0, const QWidget* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 162); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 162, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCommonStyle::pixelMetric(x1, x2, x3); } return ret; }
    void polish(QPalette& x1) { void* fun = LObjects::overrideFun(unique, 165); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 165, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommonStyle::polish(x1); }}
    QSize sizeFromContents(ContentsType x1, const QStyleOption* x2, const QSize& x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 166); QSize ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = qVariantValue<QSize>(callOverrideFun(fun, 166, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCommonStyle::sizeFromContents(x1, x2, x3, x4); } return ret; }
    QPixmap standardPixmap(StandardPixmap x1, const QStyleOption* x2 = 0, const QWidget* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 167); QPixmap ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QPixmap>(callOverrideFun(fun, 167, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCommonStyle::standardPixmap(x1, x2, x3); } return ret; }
    int styleHint(StyleHint x1, const QStyleOption* x2 = 0, const QWidget* x3 = 0, QStyleHintReturn* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 168); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = callOverrideFun(fun, 168, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCommonStyle::styleHint(x1, x2, x3, x4); } return ret; }
    QRect subControlRect(ComplexControl x1, const QStyleOptionComplex* x2, SubControl x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 169); QRect ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = qVariantValue<QRect>(callOverrideFun(fun, 169, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCommonStyle::subControlRect(x1, x2, x3, x4); } return ret; }
    QRect subElementRect(SubElement x1, const QStyleOption* x2, const QWidget* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 170); QRect ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QRect>(callOverrideFun(fun, 170, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCommonStyle::subElementRect(x1, x2, x3); } return ret; }
    void unpolish(QWidget* x1) { void* fun = LObjects::overrideFun(unique, 175); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 175, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommonStyle::unpolish(x1); }}
    void drawItemPixmap(QPainter* x1, const QRect& x2, int x3, const QPixmap& x4) const { void* fun = LObjects::overrideFun(unique, 177); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; callOverrideFun(fun, 177, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommonStyle::drawItemPixmap(x1, x2, x3, x4); }}
    void drawItemText(QPainter* x1, const QRect& x2, int x3, const QPalette& x4, bool x5, const QString& x6, QPalette::ColorRole x7 = QPalette::NoRole) const { void* fun = LObjects::overrideFun(unique, 178); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4, &x5, &x6, &x7 }; callOverrideFun(fun, 178, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommonStyle::drawItemText(x1, x2, x3, x4, x5, x6, x7); }}
    QRect itemPixmapRect(const QRect& x1, int x2, const QPixmap& x3) const { void* fun = LObjects::overrideFun(unique, 179); QRect ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QRect>(callOverrideFun(fun, 179, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCommonStyle::itemPixmapRect(x1, x2, x3); } return ret; }
    QRect itemTextRect(const QFontMetrics& x1, const QRect& x2, int x3, bool x4, const QString& x5) const { void* fun = LObjects::overrideFun(unique, 180); QRect ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; ret = qVariantValue<QRect>(callOverrideFun(fun, 180, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCommonStyle::itemTextRect(x1, x2, x3, x4, x5); } return ret; }
    QPalette standardPalette() const { void* fun = LObjects::overrideFun(unique, 163); QPalette ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QPalette>(callOverrideFun(fun, 163, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCommonStyle::standardPalette(); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCommonStyle::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommonStyle::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommonStyle::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommonStyle::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommonStyle::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCommonStyle::timerEvent(x1); }}
};

class LCompleter : public QCompleter {
    Q_OBJECT
    friend class Q35;
public:
    LCompleter(uint u, QObject* x1 = 0) : QCompleter(x1), unique(u) {}
    LCompleter(uint u, QAbstractItemModel* x1, QObject* x2 = 0) : QCompleter(x1, x2), unique(u) {}
    LCompleter(uint u, const QStringList& x1, QObject* x2 = 0) : QCompleter(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QString pathFromIndex(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 190); QString ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QString>(callOverrideFun(fun, 190, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCompleter::pathFromIndex(x1); } return ret; }
    QStringList splitPath(const QString& x1) const { void* fun = LObjects::overrideFun(unique, 191); QStringList ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QStringList>(callOverrideFun(fun, 191, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCompleter::splitPath(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCompleter::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCompleter::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCompleter::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCompleter::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCompleter::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCompleter::timerEvent(x1); }}
};

class LCoreApplication : public QCoreApplication {
    Q_OBJECT
    friend class Q36;
public:

    static NumList overrideIds;
    uint unique;

    bool notify(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 144); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 144, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCoreApplication::notify(x1, x2); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QCoreApplication::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCoreApplication::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCoreApplication::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCoreApplication::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCoreApplication::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QCoreApplication::timerEvent(x1); }}
};

class LDataWidgetMapper : public QDataWidgetMapper {
    Q_OBJECT
    friend class Q37;
public:
    LDataWidgetMapper(uint u, QObject* x1 = 0) : QDataWidgetMapper(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDataWidgetMapper::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDataWidgetMapper::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDataWidgetMapper::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDataWidgetMapper::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDataWidgetMapper::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDataWidgetMapper::timerEvent(x1); }}
};

class LDateEdit : public QDateEdit {
    Q_OBJECT
    friend class Q38;
public:
    LDateEdit(uint u, QWidget* x1 = 0) : QDateEdit(x1), unique(u) {}
    LDateEdit(uint u, const QDate& x1, QWidget* x2 = 0) : QDateEdit(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QDateTime dateTimeFromText(const QString& x1) const { void* fun = LObjects::overrideFun(unique, 192); QDateTime ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QDateTime>(callOverrideFun(fun, 192, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDateEdit::dateTimeFromText(x1); } return ret; }
    QString textFromDateTime(const QDateTime& x1) const { void* fun = LObjects::overrideFun(unique, 193); QString ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QString>(callOverrideFun(fun, 193, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDateEdit::textFromDateTime(x1); } return ret; }
    void clear() { void* fun = LObjects::overrideFun(unique, 194); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 194, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateEdit::clear(); }}
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDateEdit::sizeHint(); } return ret; }
    void stepBy(int x1) { void* fun = LObjects::overrideFun(unique, 125); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 125, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateEdit::stepBy(x1); }}
    void fixup(QString& x1) const { void* fun = LObjects::overrideFun(unique, 124); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 124, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateEdit::fixup(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateEdit::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDateEdit::focusNextPrevChild(x1); } return ret; }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateEdit::keyPressEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateEdit::mousePressEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateEdit::paintEvent(x1); }}
    StepEnabled stepEnabled() const { void* fun = LObjects::overrideFun(unique, 127); StepEnabled ret = (StepEnabled)0; if(fun && (LObjects::calling != unique)) { ret = (StepEnabled)callOverrideFun(fun, 127, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDateEdit::stepEnabled(); } return ret; }
    QValidator::State validate(QString& x1, int& x2) const { void* fun = LObjects::overrideFun(unique, 126); QValidator::State ret = (QValidator::State)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = (QValidator::State)callOverrideFun(fun, 126, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDateEdit::validate(x1, x2); } return ret; }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateEdit::wheelEvent(x1); }}
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDateEdit::inputMethodQuery(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDateEdit::minimumSizeHint(); } return ret; }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateEdit::changeEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateEdit::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateEdit::contextMenuEvent(x1); }}
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateEdit::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateEdit::hideEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateEdit::keyReleaseEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateEdit::mouseMoveEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateEdit::mouseReleaseEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateEdit::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateEdit::showEvent(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateEdit::timerEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDateEdit::heightForWidth(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateEdit::actionEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateEdit::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateEdit::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateEdit::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateEdit::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateEdit::enterEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateEdit::inputMethodEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateEdit::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateEdit::mouseDoubleClickEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateEdit::moveEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateEdit::tabletEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDateEdit::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDateEdit::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateEdit::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateEdit::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateEdit::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateEdit::disconnectNotify(x1); }}
};

class LDateTimeEdit : public QDateTimeEdit {
    Q_OBJECT
    friend class Q39;
public:
    LDateTimeEdit(uint u, QWidget* x1 = 0) : QDateTimeEdit(x1), unique(u) {}
    LDateTimeEdit(uint u, const QDateTime& x1, QWidget* x2 = 0) : QDateTimeEdit(x1, x2), unique(u) {}
    LDateTimeEdit(uint u, const QDate& x1, QWidget* x2 = 0) : QDateTimeEdit(x1, x2), unique(u) {}
    LDateTimeEdit(uint u, const QTime& x1, QWidget* x2 = 0) : QDateTimeEdit(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QDateTime dateTimeFromText(const QString& x1) const { void* fun = LObjects::overrideFun(unique, 192); QDateTime ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QDateTime>(callOverrideFun(fun, 192, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDateTimeEdit::dateTimeFromText(x1); } return ret; }
    QString textFromDateTime(const QDateTime& x1) const { void* fun = LObjects::overrideFun(unique, 193); QString ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QString>(callOverrideFun(fun, 193, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDateTimeEdit::textFromDateTime(x1); } return ret; }
    void clear() { void* fun = LObjects::overrideFun(unique, 194); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 194, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateTimeEdit::clear(); }}
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDateTimeEdit::sizeHint(); } return ret; }
    void stepBy(int x1) { void* fun = LObjects::overrideFun(unique, 125); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 125, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateTimeEdit::stepBy(x1); }}
    void fixup(QString& x1) const { void* fun = LObjects::overrideFun(unique, 124); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 124, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateTimeEdit::fixup(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateTimeEdit::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDateTimeEdit::focusNextPrevChild(x1); } return ret; }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateTimeEdit::keyPressEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateTimeEdit::mousePressEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateTimeEdit::paintEvent(x1); }}
    StepEnabled stepEnabled() const { void* fun = LObjects::overrideFun(unique, 127); StepEnabled ret = (StepEnabled)0; if(fun && (LObjects::calling != unique)) { ret = (StepEnabled)callOverrideFun(fun, 127, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDateTimeEdit::stepEnabled(); } return ret; }
    QValidator::State validate(QString& x1, int& x2) const { void* fun = LObjects::overrideFun(unique, 126); QValidator::State ret = (QValidator::State)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = (QValidator::State)callOverrideFun(fun, 126, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDateTimeEdit::validate(x1, x2); } return ret; }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateTimeEdit::wheelEvent(x1); }}
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDateTimeEdit::inputMethodQuery(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDateTimeEdit::minimumSizeHint(); } return ret; }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateTimeEdit::changeEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateTimeEdit::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateTimeEdit::contextMenuEvent(x1); }}
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateTimeEdit::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateTimeEdit::hideEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateTimeEdit::keyReleaseEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateTimeEdit::mouseMoveEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateTimeEdit::mouseReleaseEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateTimeEdit::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateTimeEdit::showEvent(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateTimeEdit::timerEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDateTimeEdit::heightForWidth(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateTimeEdit::actionEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateTimeEdit::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateTimeEdit::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateTimeEdit::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateTimeEdit::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateTimeEdit::enterEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateTimeEdit::inputMethodEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateTimeEdit::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateTimeEdit::mouseDoubleClickEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateTimeEdit::moveEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateTimeEdit::tabletEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDateTimeEdit::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDateTimeEdit::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateTimeEdit::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateTimeEdit::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateTimeEdit::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDateTimeEdit::disconnectNotify(x1); }}
};

class LDesktopWidget : public QDesktopWidget {
    Q_OBJECT
    friend class Q40;
public:

    static NumList overrideIds;
    uint unique;

    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDesktopWidget::resizeEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDesktopWidget::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDesktopWidget::inputMethodQuery(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDesktopWidget::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDesktopWidget::sizeHint(); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDesktopWidget::actionEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDesktopWidget::changeEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDesktopWidget::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDesktopWidget::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDesktopWidget::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDesktopWidget::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDesktopWidget::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDesktopWidget::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDesktopWidget::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDesktopWidget::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDesktopWidget::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDesktopWidget::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDesktopWidget::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDesktopWidget::inputMethodEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDesktopWidget::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDesktopWidget::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDesktopWidget::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDesktopWidget::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDesktopWidget::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDesktopWidget::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDesktopWidget::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDesktopWidget::moveEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDesktopWidget::paintEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDesktopWidget::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDesktopWidget::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDesktopWidget::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDesktopWidget::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDesktopWidget::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDesktopWidget::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDesktopWidget::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDesktopWidget::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDesktopWidget::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDesktopWidget::timerEvent(x1); }}
};

class LDial : public QDial {
    Q_OBJECT
    friend class Q41;
public:
    LDial(uint u, QWidget* x1 = 0) : QDial(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDial::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDial::sizeHint(); } return ret; }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDial::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDial::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDial::mouseReleaseEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDial::paintEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDial::resizeEvent(x1); }}
    void sliderChange(SliderChange x1) { void* fun = LObjects::overrideFun(unique, 107); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 107, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDial::sliderChange(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDial::changeEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDial::keyPressEvent(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDial::timerEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDial::wheelEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDial::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDial::inputMethodQuery(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDial::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDial::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDial::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDial::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDial::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDial::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDial::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDial::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDial::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDial::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDial::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDial::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDial::inputMethodEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDial::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDial::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDial::mouseDoubleClickEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDial::moveEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDial::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDial::tabletEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDial::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDial::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDial::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDial::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDial::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDial::disconnectNotify(x1); }}
};

class LDialog : public QDialog {
    Q_OBJECT
    friend class Q42;
public:
    LDialog(uint u, QWidget* x1 = 0, Qt::WindowFlags x2 = 0) : QDialog(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDialog::minimumSizeHint(); } return ret; }
    void setVisible(bool x1) { void* fun = LObjects::overrideFun(unique, 99); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 99, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialog::setVisible(x1); }}
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDialog::sizeHint(); } return ret; }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialog::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialog::contextMenuEvent(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDialog::eventFilter(x1, x2); } return ret; }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialog::keyPressEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialog::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialog::showEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDialog::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDialog::inputMethodQuery(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialog::actionEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialog::changeEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialog::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialog::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialog::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialog::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialog::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialog::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDialog::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialog::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialog::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialog::inputMethodEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialog::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialog::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialog::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialog::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialog::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialog::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialog::moveEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialog::paintEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialog::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialog::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDialog::metric(x1); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialog::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialog::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialog::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialog::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialog::timerEvent(x1); }}
};

class LDialogButtonBox : public QDialogButtonBox {
    Q_OBJECT
    friend class Q43;
public:
    LDialogButtonBox(uint u, QWidget* x1 = 0) : QDialogButtonBox(x1), unique(u) {}
    LDialogButtonBox(uint u, Qt::Orientation x1, QWidget* x2 = 0) : QDialogButtonBox(x1, x2), unique(u) {}
    LDialogButtonBox(uint u, StandardButtons x1, Qt::Orientation x2 = Qt::Horizontal, QWidget* x3 = 0) : QDialogButtonBox(x1, x2, x3), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialogButtonBox::changeEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDialogButtonBox::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDialogButtonBox::inputMethodQuery(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDialogButtonBox::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDialogButtonBox::sizeHint(); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialogButtonBox::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialogButtonBox::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialogButtonBox::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialogButtonBox::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialogButtonBox::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialogButtonBox::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialogButtonBox::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialogButtonBox::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialogButtonBox::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDialogButtonBox::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialogButtonBox::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialogButtonBox::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialogButtonBox::inputMethodEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialogButtonBox::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialogButtonBox::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialogButtonBox::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialogButtonBox::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialogButtonBox::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialogButtonBox::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialogButtonBox::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialogButtonBox::moveEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialogButtonBox::paintEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialogButtonBox::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialogButtonBox::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialogButtonBox::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialogButtonBox::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDialogButtonBox::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDialogButtonBox::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialogButtonBox::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialogButtonBox::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialogButtonBox::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialogButtonBox::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDialogButtonBox::timerEvent(x1); }}
};

class LDirModel : public QDirModel {
    Q_OBJECT
    friend class Q44;
public:
    LDirModel(uint u, const QStringList& x1, QDir::Filters x2, QDir::SortFlags x3, QObject* x4 = 0) : QDirModel(x1, x2, x3, x4), unique(u) {}
    LDirModel(uint u, QObject* x1 = 0) : QDirModel(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    int columnCount(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 55); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 55, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDirModel::columnCount(x1); } return ret; }
    QVariant data(const QModelIndex& x1, int x2 = Qt::DisplayRole) const { void* fun = LObjects::overrideFun(unique, 56); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 56, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDirModel::data(x1, x2); } return ret; }
    bool dropMimeData(const QMimeData* x1, Qt::DropAction x2, int x3, int x4, const QModelIndex& x5) { void* fun = LObjects::overrideFun(unique, 57); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; ret = callOverrideFun(fun, 57, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDirModel::dropMimeData(x1, x2, x3, x4, x5); } return ret; }
    Qt::ItemFlags flags(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 59); Qt::ItemFlags ret = (Qt::ItemFlags)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (Qt::ItemFlags)callOverrideFun(fun, 59, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDirModel::flags(x1); } return ret; }
    bool hasChildren(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 60); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 60, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDirModel::hasChildren(x1); } return ret; }
    QVariant headerData(int x1, Qt::Orientation x2, int x3 = Qt::DisplayRole) const { void* fun = LObjects::overrideFun(unique, 61); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 61, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDirModel::headerData(x1, x2, x3); } return ret; }
    QModelIndex index(int x1, int x2, const QModelIndex& x3 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 62); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 62, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDirModel::index(x1, x2, x3); } return ret; }
    QMimeData* mimeData(const QModelIndexList& x1) const { void* fun = LObjects::overrideFun(unique, 66); QMimeData* ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (QMimeData*)qVariantValue<void*>(callOverrideFun(fun, 66, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDirModel::mimeData(x1); } return ret; }
    QStringList mimeTypes() const { void* fun = LObjects::overrideFun(unique, 67); QStringList ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QStringList>(callOverrideFun(fun, 67, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDirModel::mimeTypes(); } return ret; }
    QModelIndex parent(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 68); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 68, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDirModel::parent(x1); } return ret; }
    int rowCount(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 71); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 71, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDirModel::rowCount(x1); } return ret; }
    bool setData(const QModelIndex& x1, const QVariant& x2, int x3 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 72); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 72, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDirModel::setData(x1, x2, x3); } return ret; }
    void sort(int x1, Qt::SortOrder x2 = Qt::AscendingOrder) { void* fun = LObjects::overrideFun(unique, 74); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 74, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDirModel::sort(x1, x2); }}
    Qt::DropActions supportedDropActions() const { void* fun = LObjects::overrideFun(unique, 76); Qt::DropActions ret = (Qt::DropActions)0; if(fun && (LObjects::calling != unique)) { ret = (Qt::DropActions)callOverrideFun(fun, 76, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDirModel::supportedDropActions(); } return ret; }
    QModelIndex buddy(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 53); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 53, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDirModel::buddy(x1); } return ret; }
    bool canFetchMore(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 54); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 54, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDirModel::canFetchMore(x1); } return ret; }
    void fetchMore(const QModelIndex& x1) { void* fun = LObjects::overrideFun(unique, 58); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 58, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDirModel::fetchMore(x1); }}
    bool insertColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 63); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 63, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDirModel::insertColumns(x1, x2, x3); } return ret; }
    bool insertRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 64); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 64, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDirModel::insertRows(x1, x2, x3); } return ret; }
    QModelIndexList match(const QModelIndex& x1, int x2, const QVariant& x3, int x4 = 1, Qt::MatchFlags x5 = Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap)) const { void* fun = LObjects::overrideFun(unique, 65); QModelIndexList ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; ret = qVariantValue<QModelIndexList>(callOverrideFun(fun, 65, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDirModel::match(x1, x2, x3, x4, x5); } return ret; }
    bool removeColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 69); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 69, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDirModel::removeColumns(x1, x2, x3); } return ret; }
    bool removeRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 70); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 70, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDirModel::removeRows(x1, x2, x3); } return ret; }
    bool setHeaderData(int x1, Qt::Orientation x2, const QVariant& x3, int x4 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 73); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = callOverrideFun(fun, 73, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDirModel::setHeaderData(x1, x2, x3, x4); } return ret; }
    QSize span(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 75); QSize ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QSize>(callOverrideFun(fun, 75, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDirModel::span(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDirModel::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDirModel::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDirModel::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDirModel::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDirModel::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDirModel::timerEvent(x1); }}
};

class LDockWidget : public QDockWidget {
    Q_OBJECT
    friend class Q45;
public:
    LDockWidget(uint u, const QString& x1, QWidget* x2 = 0, Qt::WindowFlags x3 = 0) : QDockWidget(x1, x2, x3), unique(u) {}
    LDockWidget(uint u, QWidget* x1 = 0, Qt::WindowFlags x2 = 0) : QDockWidget(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDockWidget::changeEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDockWidget::closeEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDockWidget::paintEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDockWidget::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDockWidget::inputMethodQuery(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDockWidget::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDockWidget::sizeHint(); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDockWidget::actionEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDockWidget::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDockWidget::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDockWidget::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDockWidget::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDockWidget::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDockWidget::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDockWidget::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDockWidget::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDockWidget::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDockWidget::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDockWidget::inputMethodEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDockWidget::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDockWidget::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDockWidget::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDockWidget::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDockWidget::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDockWidget::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDockWidget::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDockWidget::moveEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDockWidget::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDockWidget::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDockWidget::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDockWidget::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDockWidget::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDockWidget::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDockWidget::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDockWidget::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDockWidget::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDockWidget::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDockWidget::timerEvent(x1); }}
};

class LDoubleSpinBox : public QDoubleSpinBox {
    Q_OBJECT
    friend class Q46;
public:
    LDoubleSpinBox(uint u, QWidget* x1 = 0) : QDoubleSpinBox(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QString textFromValue(double x1) const { void* fun = LObjects::overrideFun(unique, 195); QString ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QString>(callOverrideFun(fun, 195, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDoubleSpinBox::textFromValue(x1); } return ret; }
    double valueFromText(const QString& x1) const { void* fun = LObjects::overrideFun(unique, 196); double ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 196, args, unique).toDouble(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDoubleSpinBox::valueFromText(x1); } return ret; }
    void fixup(QString& x1) const { void* fun = LObjects::overrideFun(unique, 124); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 124, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleSpinBox::fixup(x1); }}
    QValidator::State validate(QString& x1, int& x2) const { void* fun = LObjects::overrideFun(unique, 126); QValidator::State ret = (QValidator::State)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = (QValidator::State)callOverrideFun(fun, 126, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDoubleSpinBox::validate(x1, x2); } return ret; }
    void stepBy(int x1) { void* fun = LObjects::overrideFun(unique, 125); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 125, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleSpinBox::stepBy(x1); }}
    StepEnabled stepEnabled() const { void* fun = LObjects::overrideFun(unique, 127); StepEnabled ret = (StepEnabled)0; if(fun && (LObjects::calling != unique)) { ret = (StepEnabled)callOverrideFun(fun, 127, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDoubleSpinBox::stepEnabled(); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDoubleSpinBox::inputMethodQuery(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDoubleSpinBox::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDoubleSpinBox::sizeHint(); } return ret; }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleSpinBox::changeEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleSpinBox::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleSpinBox::contextMenuEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleSpinBox::focusInEvent(x1); }}
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleSpinBox::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleSpinBox::hideEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleSpinBox::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleSpinBox::keyReleaseEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleSpinBox::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleSpinBox::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleSpinBox::mouseReleaseEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleSpinBox::paintEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleSpinBox::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleSpinBox::showEvent(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleSpinBox::timerEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleSpinBox::wheelEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDoubleSpinBox::heightForWidth(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleSpinBox::actionEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleSpinBox::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleSpinBox::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleSpinBox::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleSpinBox::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleSpinBox::enterEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDoubleSpinBox::focusNextPrevChild(x1); } return ret; }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleSpinBox::inputMethodEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleSpinBox::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleSpinBox::mouseDoubleClickEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleSpinBox::moveEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleSpinBox::tabletEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDoubleSpinBox::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDoubleSpinBox::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleSpinBox::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleSpinBox::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleSpinBox::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleSpinBox::disconnectNotify(x1); }}
};

class LDoubleValidator : public QDoubleValidator {
    Q_OBJECT
    friend class Q47;
public:
    LDoubleValidator(uint u, QObject* x1) : QDoubleValidator(x1), unique(u) {}
    LDoubleValidator(uint u, double x1, double x2, int x3, QObject* x4) : QDoubleValidator(x1, x2, x3, x4), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void setRange(double x1, double x2, int x3 = 0) { void* fun = LObjects::overrideFun(unique, 197); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 197, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleValidator::setRange(x1, x2, x3); }}
    QValidator::State validate(QString& x1, int& x2) const { void* fun = LObjects::overrideFun(unique, 126); QValidator::State ret = (QValidator::State)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = (QValidator::State)callOverrideFun(fun, 126, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDoubleValidator::validate(x1, x2); } return ret; }
    void fixup(QString& x1) const { void* fun = LObjects::overrideFun(unique, 124); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 124, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleValidator::fixup(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDoubleValidator::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleValidator::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleValidator::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleValidator::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleValidator::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDoubleValidator::timerEvent(x1); }}
};

class LDrag : public QDrag {
    Q_OBJECT
    friend class Q48;
public:
    LDrag(uint u, QWidget* x1) : QDrag(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QDrag::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDrag::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDrag::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDrag::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDrag::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QDrag::timerEvent(x1); }}
};

class LErrorMessage : public QErrorMessage {
    Q_OBJECT
    friend class Q49;
public:
    LErrorMessage(uint u, QWidget* x1 = 0) : QErrorMessage(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QErrorMessage::changeEvent(x1); }}
    void done(int x1) { void* fun = LObjects::overrideFun(unique, 182); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 182, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QErrorMessage::done(x1); }}
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QErrorMessage::minimumSizeHint(); } return ret; }
    void setVisible(bool x1) { void* fun = LObjects::overrideFun(unique, 99); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 99, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QErrorMessage::setVisible(x1); }}
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QErrorMessage::sizeHint(); } return ret; }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QErrorMessage::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QErrorMessage::contextMenuEvent(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QErrorMessage::eventFilter(x1, x2); } return ret; }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QErrorMessage::keyPressEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QErrorMessage::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QErrorMessage::showEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QErrorMessage::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QErrorMessage::inputMethodQuery(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QErrorMessage::actionEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QErrorMessage::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QErrorMessage::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QErrorMessage::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QErrorMessage::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QErrorMessage::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QErrorMessage::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QErrorMessage::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QErrorMessage::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QErrorMessage::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QErrorMessage::inputMethodEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QErrorMessage::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QErrorMessage::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QErrorMessage::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QErrorMessage::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QErrorMessage::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QErrorMessage::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QErrorMessage::moveEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QErrorMessage::paintEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QErrorMessage::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QErrorMessage::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QErrorMessage::metric(x1); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QErrorMessage::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QErrorMessage::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QErrorMessage::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QErrorMessage::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QErrorMessage::timerEvent(x1); }}
};

class LEventLoop : public QEventLoop {
    Q_OBJECT
    friend class Q50;
public:
    LEventLoop(uint u, QObject* x1 = 0) : QEventLoop(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QEventLoop::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QEventLoop::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QEventLoop::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QEventLoop::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QEventLoop::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QEventLoop::timerEvent(x1); }}
};

class LEventTransition : public QEventTransition {
    Q_OBJECT
    friend class Q51;
public:
    LEventTransition(uint u, QState* x1 = 0) : QEventTransition(x1), unique(u) {}
    LEventTransition(uint u, QObject* x1, QEvent::Type x2, QState* x3 = 0) : QEventTransition(x1, x2, x3), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool eventTest(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 140); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 140, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QEventTransition::eventTest(x1); } return ret; }
    void onTransition(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 141); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 141, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QEventTransition::onTransition(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QEventTransition::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QEventTransition::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QEventTransition::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QEventTransition::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QEventTransition::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QEventTransition::timerEvent(x1); }}
};

class LFile : public QFile {
    Q_OBJECT
    friend class Q52;
public:
    LFile(uint u, const QString& x1) : QFile(x1), unique(u) {}
    LFile(uint u, QObject* x1) : QFile(x1), unique(u) {}
    LFile(uint u, const QString& x1, QObject* x2) : QFile(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool atEnd() const { void* fun = LObjects::overrideFun(unique, 108); bool ret = false; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 108, 0, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFile::atEnd(); } return ret; }
    void close() { void* fun = LObjects::overrideFun(unique, 112); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 112, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFile::close(); }}
    bool isSequential() const { void* fun = LObjects::overrideFun(unique, 113); bool ret = false; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 113, 0, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFile::isSequential(); } return ret; }
    bool open(OpenMode x1) { void* fun = LObjects::overrideFun(unique, 119); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 119, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFile::open(x1); } return ret; }
    qlonglong pos() const { void* fun = LObjects::overrideFun(unique, 120); qlonglong ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 120, 0, unique).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFile::pos(); } return ret; }
    bool seek(qint64 x1) { void* fun = LObjects::overrideFun(unique, 122); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 122, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFile::seek(x1); } return ret; }
    qlonglong size() const { void* fun = LObjects::overrideFun(unique, 123); qlonglong ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 123, 0, unique).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFile::size(); } return ret; }
    qlonglong readData(char* x1, qint64 x2) { void* fun = LObjects::overrideFun(unique, 116); qlonglong ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 116, args, unique).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFile::readData(x1, x2); } return ret; }
    qlonglong readLineData(char* x1, qint64 x2) { void* fun = LObjects::overrideFun(unique, 117); qlonglong ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 117, args, unique).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFile::readLineData(x1, x2); } return ret; }
    qlonglong writeData(const char* x1, qint64 x2) { void* fun = LObjects::overrideFun(unique, 118); qlonglong ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 118, args, unique).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFile::writeData(x1, x2); } return ret; }
    qlonglong bytesAvailable() const { void* fun = LObjects::overrideFun(unique, 109); qlonglong ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 109, 0, unique).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFile::bytesAvailable(); } return ret; }
    qlonglong bytesToWrite() const { void* fun = LObjects::overrideFun(unique, 110); qlonglong ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 110, 0, unique).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFile::bytesToWrite(); } return ret; }
    bool canReadLine() const { void* fun = LObjects::overrideFun(unique, 111); bool ret = false; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 111, 0, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFile::canReadLine(); } return ret; }
    bool reset() { void* fun = LObjects::overrideFun(unique, 121); bool ret = false; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 121, 0, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFile::reset(); } return ret; }
    bool waitForBytesWritten(int x1) { void* fun = LObjects::overrideFun(unique, 114); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 114, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFile::waitForBytesWritten(x1); } return ret; }
    bool waitForReadyRead(int x1) { void* fun = LObjects::overrideFun(unique, 115); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 115, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFile::waitForReadyRead(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFile::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFile::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFile::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFile::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFile::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFile::timerEvent(x1); }}
};

class LFileDialog : public QFileDialog {
    Q_OBJECT
    friend class Q53;
public:
    LFileDialog(uint u, QWidget* x1, Qt::WindowFlags x2) : QFileDialog(x1, x2), unique(u) {}
    LFileDialog(uint u, QWidget* x1 = 0, const QString& x2 = QString(), const QString& x3 = QString(), const QString& x4 = QString()) : QFileDialog(x1, x2, x3, x4), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void setVisible(bool x1) { void* fun = LObjects::overrideFun(unique, 99); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 99, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileDialog::setVisible(x1); }}
    void accept() { void* fun = LObjects::overrideFun(unique, 198); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 198, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileDialog::accept(); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileDialog::changeEvent(x1); }}
    void done(int x1) { void* fun = LObjects::overrideFun(unique, 182); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 182, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileDialog::done(x1); }}
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFileDialog::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFileDialog::sizeHint(); } return ret; }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileDialog::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileDialog::contextMenuEvent(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFileDialog::eventFilter(x1, x2); } return ret; }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileDialog::keyPressEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileDialog::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileDialog::showEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFileDialog::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFileDialog::inputMethodQuery(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileDialog::actionEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileDialog::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileDialog::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileDialog::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileDialog::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileDialog::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileDialog::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFileDialog::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileDialog::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileDialog::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileDialog::inputMethodEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileDialog::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileDialog::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileDialog::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileDialog::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileDialog::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileDialog::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileDialog::moveEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileDialog::paintEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileDialog::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileDialog::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFileDialog::metric(x1); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileDialog::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileDialog::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileDialog::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileDialog::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileDialog::timerEvent(x1); }}
};

class LFileSystemModel : public QFileSystemModel {
    Q_OBJECT
    friend class Q54;
public:
    LFileSystemModel(uint u, QObject* x1 = 0) : QFileSystemModel(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool canFetchMore(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 54); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 54, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFileSystemModel::canFetchMore(x1); } return ret; }
    int columnCount(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 55); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 55, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFileSystemModel::columnCount(x1); } return ret; }
    QVariant data(const QModelIndex& x1, int x2 = Qt::DisplayRole) const { void* fun = LObjects::overrideFun(unique, 56); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 56, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFileSystemModel::data(x1, x2); } return ret; }
    bool dropMimeData(const QMimeData* x1, Qt::DropAction x2, int x3, int x4, const QModelIndex& x5) { void* fun = LObjects::overrideFun(unique, 57); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; ret = callOverrideFun(fun, 57, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFileSystemModel::dropMimeData(x1, x2, x3, x4, x5); } return ret; }
    void fetchMore(const QModelIndex& x1) { void* fun = LObjects::overrideFun(unique, 58); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 58, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileSystemModel::fetchMore(x1); }}
    Qt::ItemFlags flags(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 59); Qt::ItemFlags ret = (Qt::ItemFlags)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (Qt::ItemFlags)callOverrideFun(fun, 59, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFileSystemModel::flags(x1); } return ret; }
    bool hasChildren(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 60); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 60, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFileSystemModel::hasChildren(x1); } return ret; }
    QVariant headerData(int x1, Qt::Orientation x2, int x3 = Qt::DisplayRole) const { void* fun = LObjects::overrideFun(unique, 61); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 61, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFileSystemModel::headerData(x1, x2, x3); } return ret; }
    QModelIndex index(int x1, int x2, const QModelIndex& x3 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 62); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 62, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFileSystemModel::index(x1, x2, x3); } return ret; }
    QMimeData* mimeData(const QModelIndexList& x1) const { void* fun = LObjects::overrideFun(unique, 66); QMimeData* ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (QMimeData*)qVariantValue<void*>(callOverrideFun(fun, 66, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFileSystemModel::mimeData(x1); } return ret; }
    QStringList mimeTypes() const { void* fun = LObjects::overrideFun(unique, 67); QStringList ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QStringList>(callOverrideFun(fun, 67, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFileSystemModel::mimeTypes(); } return ret; }
    QModelIndex parent(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 68); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 68, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFileSystemModel::parent(x1); } return ret; }
    int rowCount(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 71); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 71, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFileSystemModel::rowCount(x1); } return ret; }
    bool setData(const QModelIndex& x1, const QVariant& x2, int x3 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 72); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 72, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFileSystemModel::setData(x1, x2, x3); } return ret; }
    void sort(int x1, Qt::SortOrder x2 = Qt::AscendingOrder) { void* fun = LObjects::overrideFun(unique, 74); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 74, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileSystemModel::sort(x1, x2); }}
    Qt::DropActions supportedDropActions() const { void* fun = LObjects::overrideFun(unique, 76); Qt::DropActions ret = (Qt::DropActions)0; if(fun && (LObjects::calling != unique)) { ret = (Qt::DropActions)callOverrideFun(fun, 76, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFileSystemModel::supportedDropActions(); } return ret; }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileSystemModel::timerEvent(x1); }}
    QModelIndex buddy(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 53); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 53, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFileSystemModel::buddy(x1); } return ret; }
    bool insertColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 63); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 63, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFileSystemModel::insertColumns(x1, x2, x3); } return ret; }
    bool insertRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 64); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 64, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFileSystemModel::insertRows(x1, x2, x3); } return ret; }
    QModelIndexList match(const QModelIndex& x1, int x2, const QVariant& x3, int x4 = 1, Qt::MatchFlags x5 = Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap)) const { void* fun = LObjects::overrideFun(unique, 65); QModelIndexList ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; ret = qVariantValue<QModelIndexList>(callOverrideFun(fun, 65, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFileSystemModel::match(x1, x2, x3, x4, x5); } return ret; }
    bool removeColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 69); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 69, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFileSystemModel::removeColumns(x1, x2, x3); } return ret; }
    bool removeRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 70); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 70, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFileSystemModel::removeRows(x1, x2, x3); } return ret; }
    bool setHeaderData(int x1, Qt::Orientation x2, const QVariant& x3, int x4 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 73); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = callOverrideFun(fun, 73, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFileSystemModel::setHeaderData(x1, x2, x3, x4); } return ret; }
    QSize span(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 75); QSize ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QSize>(callOverrideFun(fun, 75, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFileSystemModel::span(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFileSystemModel::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileSystemModel::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileSystemModel::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileSystemModel::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileSystemModel::disconnectNotify(x1); }}
};

class LFileSystemWatcher : public QFileSystemWatcher {
    Q_OBJECT
    friend class Q55;
public:
    LFileSystemWatcher(uint u, QObject* x1 = 0) : QFileSystemWatcher(x1), unique(u) {}
    LFileSystemWatcher(uint u, const QStringList& x1, QObject* x2 = 0) : QFileSystemWatcher(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFileSystemWatcher::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileSystemWatcher::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileSystemWatcher::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileSystemWatcher::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileSystemWatcher::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFileSystemWatcher::timerEvent(x1); }}
};

class LFinalState : public QFinalState {
    Q_OBJECT
    friend class Q56;
public:
    LFinalState(uint u, QState* x1 = 0) : QFinalState(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void onEntry(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 128); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 128, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFinalState::onEntry(x1); }}
    void onExit(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 129); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 129, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFinalState::onExit(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFinalState::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFinalState::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFinalState::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFinalState::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFinalState::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFinalState::timerEvent(x1); }}
};

class LFocusFrame : public QFocusFrame {
    Q_OBJECT
    friend class Q57;
public:
    LFocusFrame(uint u, QWidget* x1 = 0) : QFocusFrame(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFocusFrame::eventFilter(x1, x2); } return ret; }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFocusFrame::paintEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFocusFrame::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFocusFrame::inputMethodQuery(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFocusFrame::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFocusFrame::sizeHint(); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFocusFrame::actionEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFocusFrame::changeEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFocusFrame::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFocusFrame::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFocusFrame::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFocusFrame::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFocusFrame::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFocusFrame::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFocusFrame::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFocusFrame::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFocusFrame::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFocusFrame::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFocusFrame::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFocusFrame::inputMethodEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFocusFrame::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFocusFrame::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFocusFrame::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFocusFrame::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFocusFrame::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFocusFrame::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFocusFrame::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFocusFrame::moveEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFocusFrame::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFocusFrame::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFocusFrame::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFocusFrame::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFocusFrame::metric(x1); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFocusFrame::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFocusFrame::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFocusFrame::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFocusFrame::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFocusFrame::timerEvent(x1); }}
};

class LFontComboBox : public QFontComboBox {
    Q_OBJECT
    friend class Q58;
public:
    LFontComboBox(uint u, QWidget* x1 = 0) : QFontComboBox(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFontComboBox::sizeHint(); } return ret; }
    void hidePopup() { void* fun = LObjects::overrideFun(unique, 188); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 188, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontComboBox::hidePopup(); }}
    void showPopup() { void* fun = LObjects::overrideFun(unique, 189); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 189, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontComboBox::showPopup(); }}
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFontComboBox::minimumSizeHint(); } return ret; }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontComboBox::changeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontComboBox::contextMenuEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontComboBox::focusInEvent(x1); }}
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontComboBox::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontComboBox::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontComboBox::inputMethodEvent(x1); }}
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFontComboBox::inputMethodQuery(x1); } return ret; }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontComboBox::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontComboBox::keyReleaseEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontComboBox::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontComboBox::mouseReleaseEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontComboBox::paintEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontComboBox::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontComboBox::showEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontComboBox::wheelEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFontComboBox::heightForWidth(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontComboBox::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontComboBox::closeEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontComboBox::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontComboBox::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontComboBox::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontComboBox::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontComboBox::enterEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFontComboBox::focusNextPrevChild(x1); } return ret; }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontComboBox::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontComboBox::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontComboBox::mouseMoveEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontComboBox::moveEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontComboBox::tabletEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFontComboBox::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFontComboBox::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontComboBox::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontComboBox::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontComboBox::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontComboBox::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontComboBox::timerEvent(x1); }}
};

class LFontDialog : public QFontDialog {
    Q_OBJECT
    friend class Q59;
public:
    LFontDialog(uint u, QWidget* x1 = 0) : QFontDialog(x1), unique(u) {}
    LFontDialog(uint u, const QFont& x1, QWidget* x2 = 0) : QFontDialog(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void setVisible(bool x1) { void* fun = LObjects::overrideFun(unique, 99); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 99, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontDialog::setVisible(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontDialog::changeEvent(x1); }}
    void done(int x1) { void* fun = LObjects::overrideFun(unique, 182); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 182, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontDialog::done(x1); }}
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFontDialog::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFontDialog::sizeHint(); } return ret; }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontDialog::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontDialog::contextMenuEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontDialog::keyPressEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontDialog::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontDialog::showEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFontDialog::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFontDialog::inputMethodQuery(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontDialog::actionEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontDialog::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontDialog::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontDialog::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontDialog::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontDialog::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontDialog::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFontDialog::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontDialog::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontDialog::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontDialog::inputMethodEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontDialog::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontDialog::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontDialog::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontDialog::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontDialog::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontDialog::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontDialog::moveEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontDialog::paintEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontDialog::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontDialog::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFontDialog::metric(x1); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontDialog::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontDialog::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontDialog::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontDialog::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFontDialog::timerEvent(x1); }}
};

class LFormLayout : public QFormLayout {
    Q_OBJECT
    friend class Q60;
public:
    LFormLayout(uint u, QWidget* x1 = 0) : QFormLayout(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void addItem(QLayoutItem* x1) { void* fun = LObjects::overrideFun(unique, 145); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 145, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFormLayout::addItem(x1); }}
    int count() const { void* fun = LObjects::overrideFun(unique, 146); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 146, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFormLayout::count(); } return ret; }
    Qt::Orientations expandingDirections() const { void* fun = LObjects::overrideFun(unique, 147); Qt::Orientations ret = (Qt::Orientations)0; if(fun && (LObjects::calling != unique)) { ret = (Qt::Orientations)callOverrideFun(fun, 147, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFormLayout::expandingDirections(); } return ret; }
    bool hasHeightForWidth() const { void* fun = LObjects::overrideFun(unique, 148); bool ret = false; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 148, 0, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFormLayout::hasHeightForWidth(); } return ret; }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFormLayout::heightForWidth(x1); } return ret; }
    void invalidate() { void* fun = LObjects::overrideFun(unique, 149); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 149, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFormLayout::invalidate(); }}
    QLayoutItem* itemAt(int x1) const { void* fun = LObjects::overrideFun(unique, 150); QLayoutItem* ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (QLayoutItem*)qVariantValue<void*>(callOverrideFun(fun, 150, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFormLayout::itemAt(x1); } return ret; }
    QSize minimumSize() const { void* fun = LObjects::overrideFun(unique, 153); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 153, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFormLayout::minimumSize(); } return ret; }
    void setGeometry(const QRect& x1) { void* fun = LObjects::overrideFun(unique, 154); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 154, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFormLayout::setGeometry(x1); }}
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFormLayout::sizeHint(); } return ret; }
    QLayoutItem* takeAt(int x1) { void* fun = LObjects::overrideFun(unique, 155); QLayoutItem* ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (QLayoutItem*)qVariantValue<void*>(callOverrideFun(fun, 155, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFormLayout::takeAt(x1); } return ret; }
    int indexOf(QWidget* x1) const { void* fun = LObjects::overrideFun(unique, 156); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 156, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFormLayout::indexOf(x1); } return ret; }
    QRect geometry() const { void* fun = LObjects::overrideFun(unique, 157); QRect ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QRect>(callOverrideFun(fun, 157, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFormLayout::geometry(); } return ret; }
    bool isEmpty() const { void* fun = LObjects::overrideFun(unique, 158); bool ret = false; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 158, 0, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFormLayout::isEmpty(); } return ret; }
    QLayout* layout() { void* fun = LObjects::overrideFun(unique, 159); QLayout* ret = 0; if(fun && (LObjects::calling != unique)) { ret = (QLayout*)qVariantValue<void*>(callOverrideFun(fun, 159, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFormLayout::layout(); } return ret; }
    QSize maximumSize() const { void* fun = LObjects::overrideFun(unique, 151); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 151, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFormLayout::maximumSize(); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFormLayout::childEvent(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFormLayout::eventFilter(x1, x2); } return ret; }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFormLayout::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFormLayout::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFormLayout::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFormLayout::timerEvent(x1); }}
};

class LFrame : public QFrame {
    Q_OBJECT
    friend class Q61;
public:
    LFrame(uint u, QWidget* x1 = 0, Qt::WindowFlags x2 = 0) : QFrame(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFrame::sizeHint(); } return ret; }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFrame::changeEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFrame::paintEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFrame::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFrame::inputMethodQuery(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFrame::minimumSizeHint(); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFrame::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFrame::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFrame::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFrame::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFrame::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFrame::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFrame::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFrame::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFrame::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFrame::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFrame::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFrame::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFrame::inputMethodEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFrame::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFrame::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFrame::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFrame::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFrame::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFrame::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFrame::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFrame::moveEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFrame::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFrame::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFrame::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFrame::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFrame::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QFrame::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFrame::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFrame::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFrame::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFrame::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QFrame::timerEvent(x1); }}
};

class LGesture : public QGesture {
    Q_OBJECT
    friend class Q66;
public:
    LGesture(uint u, QObject* x1 = 0) : QGesture(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGesture::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGesture::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGesture::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGesture::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGesture::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGesture::timerEvent(x1); }}
};

class LGraphicsAnchor : public QGraphicsAnchor {
    Q_OBJECT
    friend class Q67;
public:

    static NumList overrideIds;
    uint unique;

    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsAnchor::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsAnchor::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsAnchor::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsAnchor::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsAnchor::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsAnchor::timerEvent(x1); }}
};

class LGraphicsBlurEffect : public QGraphicsBlurEffect {
    Q_OBJECT
    friend class Q68;
public:
    LGraphicsBlurEffect(uint u, QObject* x1 = 0) : QGraphicsBlurEffect(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QRectF boundingRectFor(const QRectF& x1) const { void* fun = LObjects::overrideFun(unique, 208); QRectF ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QRectF>(callOverrideFun(fun, 208, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsBlurEffect::boundingRectFor(x1); } return ret; }
    void draw(QPainter* x1) { void* fun = LObjects::overrideFun(unique, 209); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 209, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsBlurEffect::draw(x1); }}
    void sourceChanged(ChangeFlags x1) { void* fun = LObjects::overrideFun(unique, 210); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 210, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsBlurEffect::sourceChanged(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsBlurEffect::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsBlurEffect::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsBlurEffect::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsBlurEffect::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsBlurEffect::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsBlurEffect::timerEvent(x1); }}
};

class LGraphicsColorizeEffect : public QGraphicsColorizeEffect {
    Q_OBJECT
    friend class Q69;
public:
    LGraphicsColorizeEffect(uint u, QObject* x1 = 0) : QGraphicsColorizeEffect(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void draw(QPainter* x1) { void* fun = LObjects::overrideFun(unique, 209); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 209, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsColorizeEffect::draw(x1); }}
    QRectF boundingRectFor(const QRectF& x1) const { void* fun = LObjects::overrideFun(unique, 208); QRectF ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QRectF>(callOverrideFun(fun, 208, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsColorizeEffect::boundingRectFor(x1); } return ret; }
    void sourceChanged(ChangeFlags x1) { void* fun = LObjects::overrideFun(unique, 210); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 210, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsColorizeEffect::sourceChanged(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsColorizeEffect::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsColorizeEffect::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsColorizeEffect::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsColorizeEffect::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsColorizeEffect::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsColorizeEffect::timerEvent(x1); }}
};

class LGraphicsDropShadowEffect : public QGraphicsDropShadowEffect {
    Q_OBJECT
    friend class Q70;
public:
    LGraphicsDropShadowEffect(uint u, QObject* x1 = 0) : QGraphicsDropShadowEffect(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QRectF boundingRectFor(const QRectF& x1) const { void* fun = LObjects::overrideFun(unique, 208); QRectF ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QRectF>(callOverrideFun(fun, 208, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsDropShadowEffect::boundingRectFor(x1); } return ret; }
    void draw(QPainter* x1) { void* fun = LObjects::overrideFun(unique, 209); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 209, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsDropShadowEffect::draw(x1); }}
    void sourceChanged(ChangeFlags x1) { void* fun = LObjects::overrideFun(unique, 210); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 210, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsDropShadowEffect::sourceChanged(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsDropShadowEffect::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsDropShadowEffect::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsDropShadowEffect::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsDropShadowEffect::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsDropShadowEffect::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsDropShadowEffect::timerEvent(x1); }}
};

class LGraphicsEffect : public QGraphicsEffect {
    Q_OBJECT
    friend class Q71;
public:
    LGraphicsEffect(uint u, QObject* x1 = 0) : QGraphicsEffect(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QRectF boundingRectFor(const QRectF& x1) const { void* fun = LObjects::overrideFun(unique, 208); QRectF ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QRectF>(callOverrideFun(fun, 208, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsEffect::boundingRectFor(x1); } return ret; }
    void draw(QPainter* x1) { void* fun = LObjects::overrideFun(unique, 209); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 209, args, unique); }}
    void sourceChanged(ChangeFlags x1) { void* fun = LObjects::overrideFun(unique, 210); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 210, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsEffect::sourceChanged(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsEffect::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsEffect::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsEffect::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsEffect::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsEffect::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsEffect::timerEvent(x1); }}
};

class LGraphicsOpacityEffect : public QGraphicsOpacityEffect {
    Q_OBJECT
    friend class Q73;
public:
    LGraphicsOpacityEffect(uint u, QObject* x1 = 0) : QGraphicsOpacityEffect(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void draw(QPainter* x1) { void* fun = LObjects::overrideFun(unique, 209); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 209, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsOpacityEffect::draw(x1); }}
    QRectF boundingRectFor(const QRectF& x1) const { void* fun = LObjects::overrideFun(unique, 208); QRectF ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QRectF>(callOverrideFun(fun, 208, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsOpacityEffect::boundingRectFor(x1); } return ret; }
    void sourceChanged(ChangeFlags x1) { void* fun = LObjects::overrideFun(unique, 210); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 210, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsOpacityEffect::sourceChanged(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsOpacityEffect::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsOpacityEffect::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsOpacityEffect::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsOpacityEffect::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsOpacityEffect::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsOpacityEffect::timerEvent(x1); }}
};

class LGraphicsProxyWidget : public QGraphicsProxyWidget {
    Q_OBJECT
    friend class Q74;
public:
    LGraphicsProxyWidget(uint u, QGraphicsItem* x1 = 0, Qt::WindowFlags x2 = 0) : QGraphicsProxyWidget(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void paint(QPainter* x1, const QStyleOptionGraphicsItem* x2, QWidget* x3) { void* fun = LObjects::overrideFun(unique, 211); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 211, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::paint(x1, x2, x3); }}
    void setGeometry(const QRectF& x1) { void* fun = LObjects::overrideFun(unique, 212); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 212, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::setGeometry(x1); }}
    int type() const { void* fun = LObjects::overrideFun(unique, 213); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 213, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsProxyWidget::type(); } return ret; }
    void contextMenuEvent(QGraphicsSceneContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 214); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 214, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::contextMenuEvent(x1); }}
    void dragEnterEvent(QGraphicsSceneDragDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 215); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 215, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::dragEnterEvent(x1); }}
    void dragLeaveEvent(QGraphicsSceneDragDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 216); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 216, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::dragLeaveEvent(x1); }}
    void dragMoveEvent(QGraphicsSceneDragDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 217); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 217, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::dragMoveEvent(x1); }}
    void dropEvent(QGraphicsSceneDragDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 218); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 218, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::dropEvent(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsProxyWidget::eventFilter(x1, x2); } return ret; }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsProxyWidget::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::focusOutEvent(x1); }}
    void grabMouseEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 219); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 219, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::grabMouseEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::hideEvent(x1); }}
    void hoverEnterEvent(QGraphicsSceneHoverEvent* x1) { void* fun = LObjects::overrideFun(unique, 220); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 220, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::hoverEnterEvent(x1); }}
    void hoverLeaveEvent(QGraphicsSceneHoverEvent* x1) { void* fun = LObjects::overrideFun(unique, 221); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 221, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::hoverLeaveEvent(x1); }}
    void hoverMoveEvent(QGraphicsSceneHoverEvent* x1) { void* fun = LObjects::overrideFun(unique, 222); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 222, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::hoverMoveEvent(x1); }}
    QVariant itemChange(GraphicsItemChange x1, const QVariant& x2) { void* fun = LObjects::overrideFun(unique, 223); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 223, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsProxyWidget::itemChange(x1, x2); } return ret; }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::keyReleaseEvent(x1); }}
    void mouseDoubleClickEvent(QGraphicsSceneMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 224); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 224, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QGraphicsSceneMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 225); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 225, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::mouseMoveEvent(x1); }}
    void mousePressEvent(QGraphicsSceneMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 226); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 226, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::mousePressEvent(x1); }}
    void mouseReleaseEvent(QGraphicsSceneMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 227); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 227, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::mouseReleaseEvent(x1); }}
    void resizeEvent(QGraphicsSceneResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 228); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 228, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::showEvent(x1); }}
    QSizeF sizeHint(Qt::SizeHint x1, const QSizeF& x2 = QSizeF()) const { void* fun = LObjects::overrideFun(unique, 229); QSizeF ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QSizeF>(callOverrideFun(fun, 229, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsProxyWidget::sizeHint(x1, x2); } return ret; }
    void ungrabMouseEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 230); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 230, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::ungrabMouseEvent(x1); }}
    void wheelEvent(QGraphicsSceneWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 231); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 231, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::wheelEvent(x1); }}
    void paintWindowFrame(QPainter* x1, const QStyleOptionGraphicsItem* x2, QWidget* x3 = 0) { void* fun = LObjects::overrideFun(unique, 232); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 232, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::paintWindowFrame(x1, x2, x3); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::changeEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::closeEvent(x1); }}
    void grabKeyboardEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 233); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 233, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::grabKeyboardEvent(x1); }}
    void initStyleOption(QStyleOption* x1) const { void* fun = LObjects::overrideFun(unique, 234); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 234, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::initStyleOption(x1); }}
    void moveEvent(QGraphicsSceneMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 235); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 235, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::moveEvent(x1); }}
    void polishEvent() { void* fun = LObjects::overrideFun(unique, 236); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 236, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::polishEvent(); }}
    void ungrabKeyboardEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 237); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 237, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::ungrabKeyboardEvent(x1); }}
    bool windowFrameEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 238); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 238, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsProxyWidget::windowFrameEvent(x1); } return ret; }
    Qt::WindowFrameSection windowFrameSectionAt(const QPointF& x1) const { void* fun = LObjects::overrideFun(unique, 239); Qt::WindowFrameSection ret = (Qt::WindowFrameSection)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (Qt::WindowFrameSection)callOverrideFun(fun, 239, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsProxyWidget::windowFrameSectionAt(x1); } return ret; }
    QRectF boundingRect() const { void* fun = LObjects::overrideFun(unique, 240); QRectF ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QRectF>(callOverrideFun(fun, 240, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsProxyWidget::boundingRect(); } return ret; }
    QPainterPath shape() const { void* fun = LObjects::overrideFun(unique, 241); QPainterPath ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QPainterPath>(callOverrideFun(fun, 241, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsProxyWidget::shape(); } return ret; }
    bool sceneEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 242); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 242, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsProxyWidget::sceneEvent(x1); } return ret; }
    void updateGeometry() { void* fun = LObjects::overrideFun(unique, 243); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 243, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::updateGeometry(); }}
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsProxyWidget::timerEvent(x1); }}
};

class LGraphicsRotation : public QGraphicsRotation {
    Q_OBJECT
    friend class Q75;
public:
    LGraphicsRotation(uint u, QObject* x1 = 0) : QGraphicsRotation(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void applyTo(QMatrix4x4* x1) const { void* fun = LObjects::overrideFun(unique, 244); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 244, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsRotation::applyTo(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsRotation::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsRotation::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsRotation::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsRotation::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsRotation::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsRotation::timerEvent(x1); }}
};

class LGraphicsScale : public QGraphicsScale {
    Q_OBJECT
    friend class Q76;
public:
    LGraphicsScale(uint u, QObject* x1 = 0) : QGraphicsScale(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void applyTo(QMatrix4x4* x1) const { void* fun = LObjects::overrideFun(unique, 244); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 244, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsScale::applyTo(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsScale::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsScale::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsScale::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsScale::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsScale::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsScale::timerEvent(x1); }}
};

class LGraphicsScene : public QGraphicsScene {
    Q_OBJECT
    friend class Q77;
public:
    LGraphicsScene(uint u, QObject* x1 = 0) : QGraphicsScene(x1), unique(u) {}
    LGraphicsScene(uint u, const QRectF& x1, QObject* x2 = 0) : QGraphicsScene(x1, x2), unique(u) {}
    LGraphicsScene(uint u, qreal x1, qreal x2, qreal x3, qreal x4, QObject* x5 = 0) : QGraphicsScene(x1, x2, x3, x4, x5), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsScene::inputMethodQuery(x1); } return ret; }
    void contextMenuEvent(QGraphicsSceneContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 214); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 214, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsScene::contextMenuEvent(x1); }}
    void dragEnterEvent(QGraphicsSceneDragDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 215); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 215, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsScene::dragEnterEvent(x1); }}
    void dragLeaveEvent(QGraphicsSceneDragDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 216); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 216, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsScene::dragLeaveEvent(x1); }}
    void dragMoveEvent(QGraphicsSceneDragDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 217); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 217, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsScene::dragMoveEvent(x1); }}
    void drawBackground(QPainter* x1, const QRectF& x2) { void* fun = LObjects::overrideFun(unique, 245); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 245, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsScene::drawBackground(x1, x2); }}
    void drawForeground(QPainter* x1, const QRectF& x2) { void* fun = LObjects::overrideFun(unique, 246); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 246, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsScene::drawForeground(x1, x2); }}
    void dropEvent(QGraphicsSceneDragDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 218); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 218, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsScene::dropEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsScene::focusInEvent(x1); }}
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsScene::focusOutEvent(x1); }}
    void helpEvent(QGraphicsSceneHelpEvent* x1) { void* fun = LObjects::overrideFun(unique, 247); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 247, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsScene::helpEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsScene::inputMethodEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsScene::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsScene::keyReleaseEvent(x1); }}
    void mouseDoubleClickEvent(QGraphicsSceneMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 224); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 224, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsScene::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QGraphicsSceneMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 225); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 225, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsScene::mouseMoveEvent(x1); }}
    void mousePressEvent(QGraphicsSceneMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 226); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 226, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsScene::mousePressEvent(x1); }}
    void mouseReleaseEvent(QGraphicsSceneMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 227); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 227, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsScene::mouseReleaseEvent(x1); }}
    void wheelEvent(QGraphicsSceneWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 231); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 231, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsScene::wheelEvent(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsScene::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsScene::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsScene::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsScene::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsScene::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsScene::timerEvent(x1); }}
};

class LGraphicsTextItem : public QGraphicsTextItem {
    Q_OBJECT
    friend class Q79;
public:
    LGraphicsTextItem(uint u, QGraphicsItem* x1 = 0) : QGraphicsTextItem(x1), unique(u) {}
    LGraphicsTextItem(uint u, const QString& x1, QGraphicsItem* x2 = 0) : QGraphicsTextItem(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QRectF boundingRect() const { void* fun = LObjects::overrideFun(unique, 240); QRectF ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QRectF>(callOverrideFun(fun, 240, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsTextItem::boundingRect(); } return ret; }
    bool contains(const QPointF& x1) const { void* fun = LObjects::overrideFun(unique, 248); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 248, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsTextItem::contains(x1); } return ret; }
    bool isObscuredBy(const QGraphicsItem* x1) const { void* fun = LObjects::overrideFun(unique, 249); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 249, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsTextItem::isObscuredBy(x1); } return ret; }
    QPainterPath opaqueArea() const { void* fun = LObjects::overrideFun(unique, 250); QPainterPath ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QPainterPath>(callOverrideFun(fun, 250, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsTextItem::opaqueArea(); } return ret; }
    void paint(QPainter* x1, const QStyleOptionGraphicsItem* x2, QWidget* x3) { void* fun = LObjects::overrideFun(unique, 211); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 211, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsTextItem::paint(x1, x2, x3); }}
    QPainterPath shape() const { void* fun = LObjects::overrideFun(unique, 241); QPainterPath ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QPainterPath>(callOverrideFun(fun, 241, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsTextItem::shape(); } return ret; }
    int type() const { void* fun = LObjects::overrideFun(unique, 213); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 213, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsTextItem::type(); } return ret; }
    void contextMenuEvent(QGraphicsSceneContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 214); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 214, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsTextItem::contextMenuEvent(x1); }}
    void dragEnterEvent(QGraphicsSceneDragDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 215); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 215, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsTextItem::dragEnterEvent(x1); }}
    void dragLeaveEvent(QGraphicsSceneDragDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 216); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 216, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsTextItem::dragLeaveEvent(x1); }}
    void dragMoveEvent(QGraphicsSceneDragDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 217); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 217, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsTextItem::dragMoveEvent(x1); }}
    void dropEvent(QGraphicsSceneDragDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 218); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 218, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsTextItem::dropEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsTextItem::focusInEvent(x1); }}
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsTextItem::focusOutEvent(x1); }}
    void hoverEnterEvent(QGraphicsSceneHoverEvent* x1) { void* fun = LObjects::overrideFun(unique, 220); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 220, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsTextItem::hoverEnterEvent(x1); }}
    void hoverLeaveEvent(QGraphicsSceneHoverEvent* x1) { void* fun = LObjects::overrideFun(unique, 221); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 221, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsTextItem::hoverLeaveEvent(x1); }}
    void hoverMoveEvent(QGraphicsSceneHoverEvent* x1) { void* fun = LObjects::overrideFun(unique, 222); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 222, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsTextItem::hoverMoveEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsTextItem::inputMethodEvent(x1); }}
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsTextItem::inputMethodQuery(x1); } return ret; }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsTextItem::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsTextItem::keyReleaseEvent(x1); }}
    void mouseDoubleClickEvent(QGraphicsSceneMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 224); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 224, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsTextItem::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QGraphicsSceneMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 225); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 225, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsTextItem::mouseMoveEvent(x1); }}
    void mousePressEvent(QGraphicsSceneMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 226); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 226, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsTextItem::mousePressEvent(x1); }}
    void mouseReleaseEvent(QGraphicsSceneMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 227); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 227, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsTextItem::mouseReleaseEvent(x1); }}
    bool sceneEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 242); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 242, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsTextItem::sceneEvent(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsTextItem::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsTextItem::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsTextItem::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsTextItem::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsTextItem::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsTextItem::timerEvent(x1); }}
};

class LGraphicsTransform : public QGraphicsTransform {
    Q_OBJECT
    friend class Q80;
public:
    LGraphicsTransform(uint u, QObject* x1 = 0) : QGraphicsTransform(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void applyTo(QMatrix4x4* x1) const { void* fun = LObjects::overrideFun(unique, 244); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 244, args, unique); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsTransform::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsTransform::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsTransform::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsTransform::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsTransform::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsTransform::timerEvent(x1); }}
};

class LGraphicsView : public QGraphicsView {
    Q_OBJECT
    friend class Q81;
public:
    LGraphicsView(uint u, QWidget* x1 = 0) : QGraphicsView(x1), unique(u) {}
    LGraphicsView(uint u, QGraphicsScene* x1, QWidget* x2 = 0) : QGraphicsView(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void drawBackground(QPainter* x1, const QRectF& x2) { void* fun = LObjects::overrideFun(unique, 245); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 245, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsView::drawBackground(x1, x2); }}
    void drawForeground(QPainter* x1, const QRectF& x2) { void* fun = LObjects::overrideFun(unique, 246); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 246, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsView::drawForeground(x1, x2); }}
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsView::inputMethodQuery(x1); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsView::sizeHint(); } return ret; }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsView::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsView::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsView::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsView::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsView::dropEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsView::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsView::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsView::focusOutEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsView::inputMethodEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsView::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsView::keyReleaseEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsView::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsView::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsView::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsView::mouseReleaseEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsView::paintEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsView::resizeEvent(x1); }}
    void scrollContentsBy(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 97); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 97, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsView::scrollContentsBy(x1, x2); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsView::showEvent(x1); }}
    bool viewportEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 96); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 96, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsView::viewportEvent(x1); } return ret; }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsView::wheelEvent(x1); }}
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsView::minimumSizeHint(); } return ret; }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsView::changeEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsView::heightForWidth(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsView::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsView::closeEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsView::enterEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsView::hideEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsView::leaveEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsView::moveEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsView::tabletEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsView::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsView::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsView::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsView::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsView::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsView::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsView::timerEvent(x1); }}
};

class LGraphicsWidget : public QGraphicsWidget {
    Q_OBJECT
    friend class Q83;
public:
    LGraphicsWidget(uint u, QGraphicsItem* x1 = 0, Qt::WindowFlags x2 = 0) : QGraphicsWidget(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void paintWindowFrame(QPainter* x1, const QStyleOptionGraphicsItem* x2, QWidget* x3 = 0) { void* fun = LObjects::overrideFun(unique, 232); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 232, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsWidget::paintWindowFrame(x1, x2, x3); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsWidget::changeEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsWidget::closeEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsWidget::focusNextPrevChild(x1); } return ret; }
    void grabKeyboardEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 233); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 233, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsWidget::grabKeyboardEvent(x1); }}
    void grabMouseEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 219); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 219, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsWidget::grabMouseEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsWidget::hideEvent(x1); }}
    void initStyleOption(QStyleOption* x1) const { void* fun = LObjects::overrideFun(unique, 234); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 234, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsWidget::initStyleOption(x1); }}
    void moveEvent(QGraphicsSceneMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 235); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 235, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsWidget::moveEvent(x1); }}
    void polishEvent() { void* fun = LObjects::overrideFun(unique, 236); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 236, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsWidget::polishEvent(); }}
    void resizeEvent(QGraphicsSceneResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 228); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 228, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsWidget::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsWidget::showEvent(x1); }}
    void ungrabKeyboardEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 237); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 237, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsWidget::ungrabKeyboardEvent(x1); }}
    void ungrabMouseEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 230); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 230, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsWidget::ungrabMouseEvent(x1); }}
    bool windowFrameEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 238); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 238, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsWidget::windowFrameEvent(x1); } return ret; }
    Qt::WindowFrameSection windowFrameSectionAt(const QPointF& x1) const { void* fun = LObjects::overrideFun(unique, 239); Qt::WindowFrameSection ret = (Qt::WindowFrameSection)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (Qt::WindowFrameSection)callOverrideFun(fun, 239, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsWidget::windowFrameSectionAt(x1); } return ret; }
    QRectF boundingRect() const { void* fun = LObjects::overrideFun(unique, 240); QRectF ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QRectF>(callOverrideFun(fun, 240, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsWidget::boundingRect(); } return ret; }
    void paint(QPainter* x1, const QStyleOptionGraphicsItem* x2, QWidget* x3 = 0) { void* fun = LObjects::overrideFun(unique, 211); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 211, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsWidget::paint(x1, x2, x3); }}
    void setGeometry(const QRectF& x1) { void* fun = LObjects::overrideFun(unique, 212); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 212, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsWidget::setGeometry(x1); }}
    QPainterPath shape() const { void* fun = LObjects::overrideFun(unique, 241); QPainterPath ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QPainterPath>(callOverrideFun(fun, 241, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsWidget::shape(); } return ret; }
    int type() const { void* fun = LObjects::overrideFun(unique, 213); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 213, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsWidget::type(); } return ret; }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsWidget::focusInEvent(x1); }}
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsWidget::focusOutEvent(x1); }}
    void hoverLeaveEvent(QGraphicsSceneHoverEvent* x1) { void* fun = LObjects::overrideFun(unique, 221); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 221, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsWidget::hoverLeaveEvent(x1); }}
    void hoverMoveEvent(QGraphicsSceneHoverEvent* x1) { void* fun = LObjects::overrideFun(unique, 222); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 222, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsWidget::hoverMoveEvent(x1); }}
    QVariant itemChange(GraphicsItemChange x1, const QVariant& x2) { void* fun = LObjects::overrideFun(unique, 223); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 223, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsWidget::itemChange(x1, x2); } return ret; }
    bool sceneEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 242); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 242, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsWidget::sceneEvent(x1); } return ret; }
    QSizeF sizeHint(Qt::SizeHint x1, const QSizeF& x2 = QSizeF()) const { void* fun = LObjects::overrideFun(unique, 229); QSizeF ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QSizeF>(callOverrideFun(fun, 229, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsWidget::sizeHint(x1, x2); } return ret; }
    void updateGeometry() { void* fun = LObjects::overrideFun(unique, 243); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 243, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsWidget::updateGeometry(); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGraphicsWidget::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsWidget::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsWidget::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsWidget::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsWidget::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGraphicsWidget::timerEvent(x1); }}
};

class LGridLayout : public QGridLayout {
    Q_OBJECT
    friend class Q84;
public:
    LGridLayout(uint u, QWidget* x1) : QGridLayout(x1), unique(u) {}
    LGridLayout(uint u) : unique(u) {}

    static NumList overrideIds;
    uint unique;

    int count() const { void* fun = LObjects::overrideFun(unique, 146); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 146, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGridLayout::count(); } return ret; }
    Qt::Orientations expandingDirections() const { void* fun = LObjects::overrideFun(unique, 147); Qt::Orientations ret = (Qt::Orientations)0; if(fun && (LObjects::calling != unique)) { ret = (Qt::Orientations)callOverrideFun(fun, 147, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGridLayout::expandingDirections(); } return ret; }
    bool hasHeightForWidth() const { void* fun = LObjects::overrideFun(unique, 148); bool ret = false; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 148, 0, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGridLayout::hasHeightForWidth(); } return ret; }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGridLayout::heightForWidth(x1); } return ret; }
    void invalidate() { void* fun = LObjects::overrideFun(unique, 149); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 149, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGridLayout::invalidate(); }}
    QLayoutItem* itemAt(int x1) const { void* fun = LObjects::overrideFun(unique, 150); QLayoutItem* ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (QLayoutItem*)qVariantValue<void*>(callOverrideFun(fun, 150, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGridLayout::itemAt(x1); } return ret; }
    QSize maximumSize() const { void* fun = LObjects::overrideFun(unique, 151); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 151, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGridLayout::maximumSize(); } return ret; }
    int minimumHeightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 152); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 152, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGridLayout::minimumHeightForWidth(x1); } return ret; }
    QSize minimumSize() const { void* fun = LObjects::overrideFun(unique, 153); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 153, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGridLayout::minimumSize(); } return ret; }
    void setGeometry(const QRect& x1) { void* fun = LObjects::overrideFun(unique, 154); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 154, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGridLayout::setGeometry(x1); }}
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGridLayout::sizeHint(); } return ret; }
    QLayoutItem* takeAt(int x1) { void* fun = LObjects::overrideFun(unique, 155); QLayoutItem* ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (QLayoutItem*)qVariantValue<void*>(callOverrideFun(fun, 155, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGridLayout::takeAt(x1); } return ret; }
    void addItem(QLayoutItem* x1) { void* fun = LObjects::overrideFun(unique, 145); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 145, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGridLayout::addItem(x1); }}
    int indexOf(QWidget* x1) const { void* fun = LObjects::overrideFun(unique, 156); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 156, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGridLayout::indexOf(x1); } return ret; }
    QRect geometry() const { void* fun = LObjects::overrideFun(unique, 157); QRect ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QRect>(callOverrideFun(fun, 157, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGridLayout::geometry(); } return ret; }
    bool isEmpty() const { void* fun = LObjects::overrideFun(unique, 158); bool ret = false; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 158, 0, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGridLayout::isEmpty(); } return ret; }
    QLayout* layout() { void* fun = LObjects::overrideFun(unique, 159); QLayout* ret = 0; if(fun && (LObjects::calling != unique)) { ret = (QLayout*)qVariantValue<void*>(callOverrideFun(fun, 159, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGridLayout::layout(); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGridLayout::childEvent(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGridLayout::eventFilter(x1, x2); } return ret; }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGridLayout::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGridLayout::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGridLayout::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGridLayout::timerEvent(x1); }}
};

class LGroupBox : public QGroupBox {
    Q_OBJECT
    friend class Q85;
public:
    LGroupBox(uint u, QWidget* x1 = 0) : QGroupBox(x1), unique(u) {}
    LGroupBox(uint u, const QString& x1, QWidget* x2 = 0) : QGroupBox(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGroupBox::minimumSizeHint(); } return ret; }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGroupBox::changeEvent(x1); }}
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGroupBox::childEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGroupBox::focusInEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGroupBox::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGroupBox::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGroupBox::mouseReleaseEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGroupBox::paintEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGroupBox::resizeEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGroupBox::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGroupBox::inputMethodQuery(x1); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGroupBox::sizeHint(); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGroupBox::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGroupBox::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGroupBox::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGroupBox::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGroupBox::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGroupBox::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGroupBox::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGroupBox::enterEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGroupBox::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGroupBox::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGroupBox::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGroupBox::inputMethodEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGroupBox::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGroupBox::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGroupBox::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGroupBox::mouseDoubleClickEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGroupBox::moveEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGroupBox::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGroupBox::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGroupBox::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGroupBox::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QGroupBox::eventFilter(x1, x2); } return ret; }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGroupBox::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGroupBox::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGroupBox::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QGroupBox::timerEvent(x1); }}
};

class LHBoxLayout : public QHBoxLayout {
    Q_OBJECT
    friend class Q86;
public:
    LHBoxLayout(uint u) : unique(u) {}
    LHBoxLayout(uint u, QWidget* x1) : QHBoxLayout(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void addItem(QLayoutItem* x1) { void* fun = LObjects::overrideFun(unique, 145); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 145, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHBoxLayout::addItem(x1); }}
    int count() const { void* fun = LObjects::overrideFun(unique, 146); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 146, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHBoxLayout::count(); } return ret; }
    Qt::Orientations expandingDirections() const { void* fun = LObjects::overrideFun(unique, 147); Qt::Orientations ret = (Qt::Orientations)0; if(fun && (LObjects::calling != unique)) { ret = (Qt::Orientations)callOverrideFun(fun, 147, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHBoxLayout::expandingDirections(); } return ret; }
    bool hasHeightForWidth() const { void* fun = LObjects::overrideFun(unique, 148); bool ret = false; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 148, 0, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHBoxLayout::hasHeightForWidth(); } return ret; }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHBoxLayout::heightForWidth(x1); } return ret; }
    void invalidate() { void* fun = LObjects::overrideFun(unique, 149); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 149, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHBoxLayout::invalidate(); }}
    QLayoutItem* itemAt(int x1) const { void* fun = LObjects::overrideFun(unique, 150); QLayoutItem* ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (QLayoutItem*)qVariantValue<void*>(callOverrideFun(fun, 150, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHBoxLayout::itemAt(x1); } return ret; }
    QSize maximumSize() const { void* fun = LObjects::overrideFun(unique, 151); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 151, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHBoxLayout::maximumSize(); } return ret; }
    int minimumHeightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 152); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 152, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHBoxLayout::minimumHeightForWidth(x1); } return ret; }
    QSize minimumSize() const { void* fun = LObjects::overrideFun(unique, 153); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 153, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHBoxLayout::minimumSize(); } return ret; }
    void setGeometry(const QRect& x1) { void* fun = LObjects::overrideFun(unique, 154); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 154, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHBoxLayout::setGeometry(x1); }}
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHBoxLayout::sizeHint(); } return ret; }
    QLayoutItem* takeAt(int x1) { void* fun = LObjects::overrideFun(unique, 155); QLayoutItem* ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (QLayoutItem*)qVariantValue<void*>(callOverrideFun(fun, 155, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHBoxLayout::takeAt(x1); } return ret; }
    int indexOf(QWidget* x1) const { void* fun = LObjects::overrideFun(unique, 156); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 156, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHBoxLayout::indexOf(x1); } return ret; }
    QRect geometry() const { void* fun = LObjects::overrideFun(unique, 157); QRect ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QRect>(callOverrideFun(fun, 157, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHBoxLayout::geometry(); } return ret; }
    bool isEmpty() const { void* fun = LObjects::overrideFun(unique, 158); bool ret = false; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 158, 0, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHBoxLayout::isEmpty(); } return ret; }
    QLayout* layout() { void* fun = LObjects::overrideFun(unique, 159); QLayout* ret = 0; if(fun && (LObjects::calling != unique)) { ret = (QLayout*)qVariantValue<void*>(callOverrideFun(fun, 159, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHBoxLayout::layout(); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHBoxLayout::childEvent(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHBoxLayout::eventFilter(x1, x2); } return ret; }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHBoxLayout::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHBoxLayout::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHBoxLayout::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHBoxLayout::timerEvent(x1); }}
};

class LHeaderView : public QHeaderView {
    Q_OBJECT
    friend class Q87;
public:
    LHeaderView(uint u, Qt::Orientation x1, QWidget* x2 = 0) : QHeaderView(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void paintSection(QPainter* x1, const QRect& x2, int x3) const { void* fun = LObjects::overrideFun(unique, 251); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 251, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::paintSection(x1, x2, x3); }}
    QSize sectionSizeFromContents(int x1) const { void* fun = LObjects::overrideFun(unique, 252); QSize ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QSize>(callOverrideFun(fun, 252, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHeaderView::sectionSizeFromContents(x1); } return ret; }
    void reset() { void* fun = LObjects::overrideFun(unique, 121); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 121, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::reset(); }}
    void setModel(QAbstractItemModel* x1) { void* fun = LObjects::overrideFun(unique, 80); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 80, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::setModel(x1); }}
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHeaderView::sizeHint(); } return ret; }
    void currentChanged(const QModelIndex& x1, const QModelIndex& x2) { void* fun = LObjects::overrideFun(unique, 186); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 186, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::currentChanged(x1, x2); }}
    int horizontalOffset() const { void* fun = LObjects::overrideFun(unique, 86); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 86, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHeaderView::horizontalOffset(); } return ret; }
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::mouseReleaseEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::paintEvent(x1); }}
    void setSelection(const QRect& x1, QItemSelectionModel::SelectionFlags x2) { void* fun = LObjects::overrideFun(unique, 91); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 91, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::setSelection(x1, x2); }}
    int verticalOffset() const { void* fun = LObjects::overrideFun(unique, 93); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 93, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHeaderView::verticalOffset(); } return ret; }
    bool viewportEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 96); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 96, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHeaderView::viewportEvent(x1); } return ret; }
    QModelIndex indexAt(const QPoint& x1) const { void* fun = LObjects::overrideFun(unique, 77); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 77, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHeaderView::indexAt(x1); } return ret; }
    void keyboardSearch(const QString& x1) { void* fun = LObjects::overrideFun(unique, 78); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 78, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::keyboardSearch(x1); }}
    void scrollTo(const QModelIndex& x1, ScrollHint x2 = EnsureVisible) { void* fun = LObjects::overrideFun(unique, 79); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 79, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::scrollTo(x1, x2); }}
    void setSelectionModel(QItemSelectionModel* x1) { void* fun = LObjects::overrideFun(unique, 81); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 81, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::setSelectionModel(x1); }}
    int sizeHintForColumn(int x1) const { void* fun = LObjects::overrideFun(unique, 82); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 82, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHeaderView::sizeHintForColumn(x1); } return ret; }
    int sizeHintForRow(int x1) const { void* fun = LObjects::overrideFun(unique, 83); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 83, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHeaderView::sizeHintForRow(x1); } return ret; }
    QRect visualRect(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 84); QRect ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QRect>(callOverrideFun(fun, 84, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHeaderView::visualRect(x1); } return ret; }
    bool edit(const QModelIndex& x1, EditTrigger x2, QEvent* x3) { void* fun = LObjects::overrideFun(unique, 85); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 85, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHeaderView::edit(x1, x2, x3); } return ret; }
    bool isIndexHidden(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 87); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 87, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHeaderView::isIndexHidden(x1); } return ret; }
    QModelIndex moveCursor(CursorAction x1, Qt::KeyboardModifiers x2) { void* fun = LObjects::overrideFun(unique, 88); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 88, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHeaderView::moveCursor(x1, x2); } return ret; }
    QModelIndexList selectedIndexes() const { void* fun = LObjects::overrideFun(unique, 89); QModelIndexList ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QModelIndexList>(callOverrideFun(fun, 89, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHeaderView::selectedIndexes(); } return ret; }
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex& x1, const QEvent* x2 = 0) const { void* fun = LObjects::overrideFun(unique, 90); QItemSelectionModel::SelectionFlags ret = (QItemSelectionModel::SelectionFlags)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = (QItemSelectionModel::SelectionFlags)callOverrideFun(fun, 90, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHeaderView::selectionCommand(x1, x2); } return ret; }
    void startDrag(Qt::DropActions x1) { void* fun = LObjects::overrideFun(unique, 92); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 92, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::startDrag(x1); }}
    QStyleOptionViewItem viewOptions() const { void* fun = LObjects::overrideFun(unique, 94); QStyleOptionViewItem ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QStyleOptionViewItem>(callOverrideFun(fun, 94, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHeaderView::viewOptions(); } return ret; }
    QRegion visualRegionForSelection(const QItemSelection& x1) const { void* fun = LObjects::overrideFun(unique, 95); QRegion ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QRegion>(callOverrideFun(fun, 95, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHeaderView::visualRegionForSelection(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHeaderView::inputMethodQuery(x1); } return ret; }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::dropEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHeaderView::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::focusOutEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::inputMethodEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::keyPressEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::resizeEvent(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::timerEvent(x1); }}
    void scrollContentsBy(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 97); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 97, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::scrollContentsBy(x1, x2); }}
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHeaderView::minimumSizeHint(); } return ret; }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::contextMenuEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::wheelEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::changeEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHeaderView::heightForWidth(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::closeEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::enterEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::hideEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::leaveEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::moveEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::tabletEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHeaderView::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHeaderView::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHeaderView::disconnectNotify(x1); }}
};

class LHistoryState : public QHistoryState {
    Q_OBJECT
    friend class Q96;
public:
    LHistoryState(uint u, QState* x1 = 0) : QHistoryState(x1), unique(u) {}
    LHistoryState(uint u, HistoryType x1, QState* x2 = 0) : QHistoryState(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void onEntry(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 128); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 128, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHistoryState::onEntry(x1); }}
    void onExit(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 129); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 129, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHistoryState::onExit(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QHistoryState::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHistoryState::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHistoryState::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHistoryState::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHistoryState::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QHistoryState::timerEvent(x1); }}
};

class LIODevice : public QIODevice {
    Q_OBJECT
    friend class Q97;
public:

    static NumList overrideIds;
    uint unique;

    bool atEnd() const { void* fun = LObjects::overrideFun(unique, 108); bool ret = false; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 108, 0, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QIODevice::atEnd(); } return ret; }
    qlonglong bytesAvailable() const { void* fun = LObjects::overrideFun(unique, 109); qlonglong ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 109, 0, unique).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QIODevice::bytesAvailable(); } return ret; }
    qlonglong bytesToWrite() const { void* fun = LObjects::overrideFun(unique, 110); qlonglong ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 110, 0, unique).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QIODevice::bytesToWrite(); } return ret; }
    bool canReadLine() const { void* fun = LObjects::overrideFun(unique, 111); bool ret = false; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 111, 0, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QIODevice::canReadLine(); } return ret; }
    void close() { void* fun = LObjects::overrideFun(unique, 112); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 112, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QIODevice::close(); }}
    bool isSequential() const { void* fun = LObjects::overrideFun(unique, 113); bool ret = false; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 113, 0, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QIODevice::isSequential(); } return ret; }
    bool open(OpenMode x1) { void* fun = LObjects::overrideFun(unique, 119); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 119, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QIODevice::open(x1); } return ret; }
    qlonglong pos() const { void* fun = LObjects::overrideFun(unique, 120); qlonglong ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 120, 0, unique).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QIODevice::pos(); } return ret; }
    bool reset() { void* fun = LObjects::overrideFun(unique, 121); bool ret = false; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 121, 0, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QIODevice::reset(); } return ret; }
    bool seek(qint64 x1) { void* fun = LObjects::overrideFun(unique, 122); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 122, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QIODevice::seek(x1); } return ret; }
    qlonglong size() const { void* fun = LObjects::overrideFun(unique, 123); qlonglong ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 123, 0, unique).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QIODevice::size(); } return ret; }
    bool waitForBytesWritten(int x1) { void* fun = LObjects::overrideFun(unique, 114); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 114, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QIODevice::waitForBytesWritten(x1); } return ret; }
    bool waitForReadyRead(int x1) { void* fun = LObjects::overrideFun(unique, 115); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 115, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QIODevice::waitForReadyRead(x1); } return ret; }
    qlonglong readData(char* x1, qint64 x2) { void* fun = LObjects::overrideFun(unique, 116); qlonglong ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 116, args, unique).toLongLong(); } return ret; }
    qlonglong readLineData(char* x1, qint64 x2) { void* fun = LObjects::overrideFun(unique, 117); qlonglong ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 117, args, unique).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QIODevice::readLineData(x1, x2); } return ret; }
    qlonglong writeData(const char* x1, qint64 x2) { void* fun = LObjects::overrideFun(unique, 118); qlonglong ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 118, args, unique).toLongLong(); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QIODevice::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QIODevice::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QIODevice::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QIODevice::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QIODevice::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QIODevice::timerEvent(x1); }}
};

class LInputContext : public QInputContext {
    Q_OBJECT
    friend class Q98;
public:
    LInputContext(uint u, QObject* x1 = 0) : QInputContext(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QList<QAction*> actions() { void* fun = LObjects::overrideFun(unique, 259); QList<QAction*> ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QList<QAction*> >(callOverrideFun(fun, 259, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QInputContext::actions(); } return ret; }
    bool filterEvent(const QEvent* x1) { void* fun = LObjects::overrideFun(unique, 260); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 260, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QInputContext::filterEvent(x1); } return ret; }
    QFont font() const { void* fun = LObjects::overrideFun(unique, 261); QFont ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QFont>(callOverrideFun(fun, 261, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QInputContext::font(); } return ret; }
    QString identifierName() { void* fun = LObjects::overrideFun(unique, 262); QString ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QString>(callOverrideFun(fun, 262, 0, unique)); } return ret; }
    bool isComposing() const { void* fun = LObjects::overrideFun(unique, 263); bool ret = false; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 263, 0, unique).toBool(); } return ret; }
    QString language() { void* fun = LObjects::overrideFun(unique, 264); QString ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QString>(callOverrideFun(fun, 264, 0, unique)); } return ret; }
    void reset() { void* fun = LObjects::overrideFun(unique, 121); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 121, 0, unique); }}
    void setFocusWidget(QWidget* x1) { void* fun = LObjects::overrideFun(unique, 265); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 265, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputContext::setFocusWidget(x1); }}
    void update() { void* fun = LObjects::overrideFun(unique, 266); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 266, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputContext::update(); }}
    void widgetDestroyed(QWidget* x1) { void* fun = LObjects::overrideFun(unique, 267); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 267, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputContext::widgetDestroyed(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QInputContext::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputContext::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputContext::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputContext::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputContext::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputContext::timerEvent(x1); }}
};

class LInputDialog : public QInputDialog {
    Q_OBJECT
    friend class Q99;
public:
    LInputDialog(uint u, QWidget* x1 = 0, Qt::WindowFlags x2 = 0) : QInputDialog(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void done(int x1) { void* fun = LObjects::overrideFun(unique, 182); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 182, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputDialog::done(x1); }}
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QInputDialog::minimumSizeHint(); } return ret; }
    void setVisible(bool x1) { void* fun = LObjects::overrideFun(unique, 99); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 99, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputDialog::setVisible(x1); }}
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QInputDialog::sizeHint(); } return ret; }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputDialog::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputDialog::contextMenuEvent(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QInputDialog::eventFilter(x1, x2); } return ret; }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputDialog::keyPressEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputDialog::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputDialog::showEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QInputDialog::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QInputDialog::inputMethodQuery(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputDialog::actionEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputDialog::changeEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputDialog::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputDialog::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputDialog::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputDialog::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputDialog::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputDialog::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QInputDialog::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputDialog::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputDialog::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputDialog::inputMethodEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputDialog::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputDialog::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputDialog::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputDialog::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputDialog::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputDialog::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputDialog::moveEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputDialog::paintEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputDialog::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputDialog::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QInputDialog::metric(x1); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputDialog::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputDialog::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputDialog::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputDialog::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QInputDialog::timerEvent(x1); }}
};

class LIntValidator : public QIntValidator {
    Q_OBJECT
    friend class Q100;
public:
    LIntValidator(uint u, QObject* x1 = 0) : QIntValidator(x1), unique(u) {}
    LIntValidator(uint u, int x1, int x2, QObject* x3) : QIntValidator(x1, x2, x3), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void setRange(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 268); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 268, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QIntValidator::setRange(x1, x2); }}
    QValidator::State validate(QString& x1, int& x2) const { void* fun = LObjects::overrideFun(unique, 126); QValidator::State ret = (QValidator::State)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = (QValidator::State)callOverrideFun(fun, 126, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QIntValidator::validate(x1, x2); } return ret; }
    void fixup(QString& x1) const { void* fun = LObjects::overrideFun(unique, 124); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 124, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QIntValidator::fixup(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QIntValidator::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QIntValidator::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QIntValidator::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QIntValidator::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QIntValidator::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QIntValidator::timerEvent(x1); }}
};

class LItemDelegate : public QItemDelegate {
    Q_OBJECT
    friend class Q101;
public:
    LItemDelegate(uint u, QObject* x1 = 0) : QItemDelegate(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void drawCheck(QPainter* x1, const QStyleOptionViewItem& x2, const QRect& x3, Qt::CheckState x4) const { void* fun = LObjects::overrideFun(unique, 269); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; callOverrideFun(fun, 269, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QItemDelegate::drawCheck(x1, x2, x3, x4); }}
    void drawDecoration(QPainter* x1, const QStyleOptionViewItem& x2, const QRect& x3, const QPixmap& x4) const { void* fun = LObjects::overrideFun(unique, 270); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; callOverrideFun(fun, 270, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QItemDelegate::drawDecoration(x1, x2, x3, x4); }}
    void drawDisplay(QPainter* x1, const QStyleOptionViewItem& x2, const QRect& x3, const QString& x4) const { void* fun = LObjects::overrideFun(unique, 271); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; callOverrideFun(fun, 271, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QItemDelegate::drawDisplay(x1, x2, x3, x4); }}
    void drawFocus(QPainter* x1, const QStyleOptionViewItem& x2, const QRect& x3) const { void* fun = LObjects::overrideFun(unique, 272); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 272, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QItemDelegate::drawFocus(x1, x2, x3); }}
    QWidget* createEditor(QWidget* x1, const QStyleOptionViewItem& x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 46); QWidget* ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = (QWidget*)qVariantValue<void*>(callOverrideFun(fun, 46, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QItemDelegate::createEditor(x1, x2, x3); } return ret; }
    void paint(QPainter* x1, const QStyleOptionViewItem& x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 48); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 48, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QItemDelegate::paint(x1, x2, x3); }}
    void setEditorData(QWidget* x1, const QModelIndex& x2) const { void* fun = LObjects::overrideFun(unique, 49); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 49, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QItemDelegate::setEditorData(x1, x2); }}
    void setModelData(QWidget* x1, QAbstractItemModel* x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 50); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 50, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QItemDelegate::setModelData(x1, x2, x3); }}
    QSize sizeHint(const QStyleOptionViewItem& x1, const QModelIndex& x2) const { void* fun = LObjects::overrideFun(unique, 51); QSize ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QSize>(callOverrideFun(fun, 51, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QItemDelegate::sizeHint(x1, x2); } return ret; }
    void updateEditorGeometry(QWidget* x1, const QStyleOptionViewItem& x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 52); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 52, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QItemDelegate::updateEditorGeometry(x1, x2, x3); }}
    bool editorEvent(QEvent* x1, QAbstractItemModel* x2, const QStyleOptionViewItem& x3, const QModelIndex& x4) { void* fun = LObjects::overrideFun(unique, 47); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = callOverrideFun(fun, 47, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QItemDelegate::editorEvent(x1, x2, x3, x4); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QItemDelegate::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QItemDelegate::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QItemDelegate::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QItemDelegate::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QItemDelegate::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QItemDelegate::timerEvent(x1); }}
};

class LItemSelectionModel : public QItemSelectionModel {
    Q_OBJECT
    friend class Q102;
public:
    LItemSelectionModel(uint u, QAbstractItemModel* x1) : QItemSelectionModel(x1), unique(u) {}
    LItemSelectionModel(uint u, QAbstractItemModel* x1, QObject* x2) : QItemSelectionModel(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QItemSelectionModel::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QItemSelectionModel::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QItemSelectionModel::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QItemSelectionModel::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QItemSelectionModel::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QItemSelectionModel::timerEvent(x1); }}
};

class LKeyEventTransition : public QKeyEventTransition {
    Q_OBJECT
    friend class Q103;
public:
    LKeyEventTransition(uint u, QState* x1 = 0) : QKeyEventTransition(x1), unique(u) {}
    LKeyEventTransition(uint u, QObject* x1, QEvent::Type x2, int x3, QState* x4 = 0) : QKeyEventTransition(x1, x2, x3, x4), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool eventTest(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 140); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 140, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QKeyEventTransition::eventTest(x1); } return ret; }
    void onTransition(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 141); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 141, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QKeyEventTransition::onTransition(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QKeyEventTransition::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QKeyEventTransition::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QKeyEventTransition::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QKeyEventTransition::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QKeyEventTransition::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QKeyEventTransition::timerEvent(x1); }}
};

class LLCDNumber : public QLCDNumber {
    Q_OBJECT
    friend class Q104;
public:
    LLCDNumber(uint u, QWidget* x1 = 0) : QLCDNumber(x1), unique(u) {}
    LLCDNumber(uint u, uint x1, QWidget* x2 = 0) : QLCDNumber(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QLCDNumber::sizeHint(); } return ret; }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLCDNumber::paintEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLCDNumber::changeEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QLCDNumber::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QLCDNumber::inputMethodQuery(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QLCDNumber::minimumSizeHint(); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLCDNumber::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLCDNumber::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLCDNumber::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLCDNumber::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLCDNumber::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLCDNumber::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLCDNumber::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLCDNumber::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLCDNumber::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QLCDNumber::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLCDNumber::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLCDNumber::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLCDNumber::inputMethodEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLCDNumber::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLCDNumber::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLCDNumber::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLCDNumber::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLCDNumber::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLCDNumber::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLCDNumber::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLCDNumber::moveEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLCDNumber::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLCDNumber::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLCDNumber::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLCDNumber::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QLCDNumber::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QLCDNumber::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLCDNumber::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLCDNumber::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLCDNumber::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLCDNumber::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLCDNumber::timerEvent(x1); }}
};

class LLabel : public QLabel {
    Q_OBJECT
    friend class Q105;
public:
    LLabel(uint u, QWidget* x1 = 0, Qt::WindowFlags x2 = 0) : QLabel(x1, x2), unique(u) {}
    LLabel(uint u, const QString& x1, QWidget* x2 = 0, Qt::WindowFlags x3 = 0) : QLabel(x1, x2, x3), unique(u) {}

    static NumList overrideIds;
    uint unique;

    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QLabel::heightForWidth(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QLabel::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QLabel::sizeHint(); } return ret; }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLabel::changeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLabel::contextMenuEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLabel::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QLabel::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLabel::focusOutEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLabel::keyPressEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLabel::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLabel::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLabel::mouseReleaseEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLabel::paintEvent(x1); }}
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QLabel::inputMethodQuery(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLabel::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLabel::closeEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLabel::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLabel::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLabel::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLabel::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLabel::enterEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLabel::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLabel::inputMethodEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLabel::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLabel::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLabel::mouseDoubleClickEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLabel::moveEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLabel::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLabel::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLabel::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLabel::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QLabel::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QLabel::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLabel::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLabel::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLabel::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLabel::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLabel::timerEvent(x1); }}
};

class LLibrary : public QLibrary {
    Q_OBJECT
    friend class Q107;
public:
    LLibrary(uint u, QObject* x1 = 0) : QLibrary(x1), unique(u) {}
    LLibrary(uint u, const QString& x1, QObject* x2 = 0) : QLibrary(x1, x2), unique(u) {}
    LLibrary(uint u, const QString& x1, int x2, QObject* x3 = 0) : QLibrary(x1, x2, x3), unique(u) {}
    LLibrary(uint u, const QString& x1, const QString& x2, QObject* x3 = 0) : QLibrary(x1, x2, x3), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QLibrary::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLibrary::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLibrary::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLibrary::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLibrary::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLibrary::timerEvent(x1); }}
};

class LLineEdit : public QLineEdit {
    Q_OBJECT
    friend class Q108;
public:
    LLineEdit(uint u, QWidget* x1 = 0) : QLineEdit(x1), unique(u) {}
    LLineEdit(uint u, const QString& x1, QWidget* x2 = 0) : QLineEdit(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QLineEdit::inputMethodQuery(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QLineEdit::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QLineEdit::sizeHint(); } return ret; }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLineEdit::changeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLineEdit::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLineEdit::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLineEdit::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLineEdit::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLineEdit::dropEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLineEdit::focusInEvent(x1); }}
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLineEdit::focusOutEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLineEdit::inputMethodEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLineEdit::keyPressEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLineEdit::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLineEdit::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLineEdit::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLineEdit::mouseReleaseEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLineEdit::paintEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QLineEdit::heightForWidth(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLineEdit::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLineEdit::closeEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLineEdit::enterEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QLineEdit::focusNextPrevChild(x1); } return ret; }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLineEdit::hideEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLineEdit::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLineEdit::leaveEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLineEdit::moveEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLineEdit::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLineEdit::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLineEdit::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLineEdit::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QLineEdit::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QLineEdit::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLineEdit::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLineEdit::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLineEdit::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLineEdit::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QLineEdit::timerEvent(x1); }}
};

class LListView : public QListView {
    Q_OBJECT
    friend class Q109;
public:
    LListView(uint u, QWidget* x1 = 0) : QListView(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QModelIndex indexAt(const QPoint& x1) const { void* fun = LObjects::overrideFun(unique, 77); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 77, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListView::indexAt(x1); } return ret; }
    void scrollTo(const QModelIndex& x1, ScrollHint x2 = EnsureVisible) { void* fun = LObjects::overrideFun(unique, 79); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 79, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::scrollTo(x1, x2); }}
    QRect visualRect(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 84); QRect ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QRect>(callOverrideFun(fun, 84, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListView::visualRect(x1); } return ret; }
    void currentChanged(const QModelIndex& x1, const QModelIndex& x2) { void* fun = LObjects::overrideFun(unique, 186); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 186, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::currentChanged(x1, x2); }}
    void dataChanged(const QModelIndex& x1, const QModelIndex& x2) { void* fun = LObjects::overrideFun(unique, 255); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 255, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::dataChanged(x1, x2); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::dropEvent(x1); }}
    int horizontalOffset() const { void* fun = LObjects::overrideFun(unique, 86); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 86, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListView::horizontalOffset(); } return ret; }
    bool isIndexHidden(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 87); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 87, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListView::isIndexHidden(x1); } return ret; }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::mouseMoveEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::mouseReleaseEvent(x1); }}
    QModelIndex moveCursor(CursorAction x1, Qt::KeyboardModifiers x2) { void* fun = LObjects::overrideFun(unique, 88); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 88, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListView::moveCursor(x1, x2); } return ret; }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::paintEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::resizeEvent(x1); }}
    void rowsAboutToBeRemoved(const QModelIndex& x1, int x2, int x3) { void* fun = LObjects::overrideFun(unique, 256); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 256, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::rowsAboutToBeRemoved(x1, x2, x3); }}
    void rowsInserted(const QModelIndex& x1, int x2, int x3) { void* fun = LObjects::overrideFun(unique, 187); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 187, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::rowsInserted(x1, x2, x3); }}
    QModelIndexList selectedIndexes() const { void* fun = LObjects::overrideFun(unique, 89); QModelIndexList ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QModelIndexList>(callOverrideFun(fun, 89, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListView::selectedIndexes(); } return ret; }
    void selectionChanged(const QItemSelection& x1, const QItemSelection& x2) { void* fun = LObjects::overrideFun(unique, 257); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 257, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::selectionChanged(x1, x2); }}
    void setSelection(const QRect& x1, QItemSelectionModel::SelectionFlags x2) { void* fun = LObjects::overrideFun(unique, 91); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 91, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::setSelection(x1, x2); }}
    void startDrag(Qt::DropActions x1) { void* fun = LObjects::overrideFun(unique, 92); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 92, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::startDrag(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::timerEvent(x1); }}
    void updateGeometries() { void* fun = LObjects::overrideFun(unique, 258); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 258, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::updateGeometries(); }}
    int verticalOffset() const { void* fun = LObjects::overrideFun(unique, 93); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 93, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListView::verticalOffset(); } return ret; }
    QStyleOptionViewItem viewOptions() const { void* fun = LObjects::overrideFun(unique, 94); QStyleOptionViewItem ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QStyleOptionViewItem>(callOverrideFun(fun, 94, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListView::viewOptions(); } return ret; }
    QRegion visualRegionForSelection(const QItemSelection& x1) const { void* fun = LObjects::overrideFun(unique, 95); QRegion ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QRegion>(callOverrideFun(fun, 95, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListView::visualRegionForSelection(x1); } return ret; }
    void keyboardSearch(const QString& x1) { void* fun = LObjects::overrideFun(unique, 78); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 78, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::keyboardSearch(x1); }}
    void setModel(QAbstractItemModel* x1) { void* fun = LObjects::overrideFun(unique, 80); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 80, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::setModel(x1); }}
    void setSelectionModel(QItemSelectionModel* x1) { void* fun = LObjects::overrideFun(unique, 81); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 81, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::setSelectionModel(x1); }}
    int sizeHintForColumn(int x1) const { void* fun = LObjects::overrideFun(unique, 82); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 82, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListView::sizeHintForColumn(x1); } return ret; }
    int sizeHintForRow(int x1) const { void* fun = LObjects::overrideFun(unique, 83); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 83, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListView::sizeHintForRow(x1); } return ret; }
    bool edit(const QModelIndex& x1, EditTrigger x2, QEvent* x3) { void* fun = LObjects::overrideFun(unique, 85); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 85, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListView::edit(x1, x2, x3); } return ret; }
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex& x1, const QEvent* x2 = 0) const { void* fun = LObjects::overrideFun(unique, 90); QItemSelectionModel::SelectionFlags ret = (QItemSelectionModel::SelectionFlags)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = (QItemSelectionModel::SelectionFlags)callOverrideFun(fun, 90, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListView::selectionCommand(x1, x2); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListView::inputMethodQuery(x1); } return ret; }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::dragEnterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListView::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::focusOutEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::inputMethodEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::keyPressEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::mouseDoubleClickEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::mousePressEvent(x1); }}
    bool viewportEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 96); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 96, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListView::viewportEvent(x1); } return ret; }
    void scrollContentsBy(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 97); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 97, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::scrollContentsBy(x1, x2); }}
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListView::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListView::sizeHint(); } return ret; }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::contextMenuEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::wheelEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::changeEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListView::heightForWidth(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::closeEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::enterEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::hideEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::leaveEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::moveEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::tabletEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListView::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListView::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListView::disconnectNotify(x1); }}
};

class LListWidget : public QListWidget {
    Q_OBJECT
    friend class Q110;
public:
    LListWidget(uint u, QWidget* x1 = 0) : QListWidget(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool dropMimeData(int x1, const QMimeData* x2, Qt::DropAction x3) { void* fun = LObjects::overrideFun(unique, 273); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 273, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListWidget::dropMimeData(x1, x2, x3); } return ret; }
    QMimeData* mimeData(const QList<QListWidgetItem*> x1) const { void* fun = LObjects::overrideFun(unique, 274); QMimeData* ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (QMimeData*)qVariantValue<void*>(callOverrideFun(fun, 274, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListWidget::mimeData(x1); } return ret; }
    QStringList mimeTypes() const { void* fun = LObjects::overrideFun(unique, 67); QStringList ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QStringList>(callOverrideFun(fun, 67, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListWidget::mimeTypes(); } return ret; }
    Qt::DropActions supportedDropActions() const { void* fun = LObjects::overrideFun(unique, 76); Qt::DropActions ret = (Qt::DropActions)0; if(fun && (LObjects::calling != unique)) { ret = (Qt::DropActions)callOverrideFun(fun, 76, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListWidget::supportedDropActions(); } return ret; }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::dropEvent(x1); }}
    QModelIndex indexAt(const QPoint& x1) const { void* fun = LObjects::overrideFun(unique, 77); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 77, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListWidget::indexAt(x1); } return ret; }
    void scrollTo(const QModelIndex& x1, ScrollHint x2 = EnsureVisible) { void* fun = LObjects::overrideFun(unique, 79); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 79, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::scrollTo(x1, x2); }}
    QRect visualRect(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 84); QRect ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QRect>(callOverrideFun(fun, 84, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListWidget::visualRect(x1); } return ret; }
    void currentChanged(const QModelIndex& x1, const QModelIndex& x2) { void* fun = LObjects::overrideFun(unique, 186); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 186, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::currentChanged(x1, x2); }}
    void dataChanged(const QModelIndex& x1, const QModelIndex& x2) { void* fun = LObjects::overrideFun(unique, 255); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 255, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::dataChanged(x1, x2); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::dragMoveEvent(x1); }}
    int horizontalOffset() const { void* fun = LObjects::overrideFun(unique, 86); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 86, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListWidget::horizontalOffset(); } return ret; }
    bool isIndexHidden(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 87); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 87, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListWidget::isIndexHidden(x1); } return ret; }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::mouseMoveEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::mouseReleaseEvent(x1); }}
    QModelIndex moveCursor(CursorAction x1, Qt::KeyboardModifiers x2) { void* fun = LObjects::overrideFun(unique, 88); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 88, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListWidget::moveCursor(x1, x2); } return ret; }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::paintEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::resizeEvent(x1); }}
    void rowsAboutToBeRemoved(const QModelIndex& x1, int x2, int x3) { void* fun = LObjects::overrideFun(unique, 256); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 256, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::rowsAboutToBeRemoved(x1, x2, x3); }}
    void rowsInserted(const QModelIndex& x1, int x2, int x3) { void* fun = LObjects::overrideFun(unique, 187); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 187, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::rowsInserted(x1, x2, x3); }}
    QModelIndexList selectedIndexes() const { void* fun = LObjects::overrideFun(unique, 89); QModelIndexList ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QModelIndexList>(callOverrideFun(fun, 89, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListWidget::selectedIndexes(); } return ret; }
    void selectionChanged(const QItemSelection& x1, const QItemSelection& x2) { void* fun = LObjects::overrideFun(unique, 257); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 257, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::selectionChanged(x1, x2); }}
    void setSelection(const QRect& x1, QItemSelectionModel::SelectionFlags x2) { void* fun = LObjects::overrideFun(unique, 91); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 91, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::setSelection(x1, x2); }}
    void startDrag(Qt::DropActions x1) { void* fun = LObjects::overrideFun(unique, 92); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 92, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::startDrag(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::timerEvent(x1); }}
    void updateGeometries() { void* fun = LObjects::overrideFun(unique, 258); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 258, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::updateGeometries(); }}
    int verticalOffset() const { void* fun = LObjects::overrideFun(unique, 93); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 93, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListWidget::verticalOffset(); } return ret; }
    QStyleOptionViewItem viewOptions() const { void* fun = LObjects::overrideFun(unique, 94); QStyleOptionViewItem ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QStyleOptionViewItem>(callOverrideFun(fun, 94, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListWidget::viewOptions(); } return ret; }
    QRegion visualRegionForSelection(const QItemSelection& x1) const { void* fun = LObjects::overrideFun(unique, 95); QRegion ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QRegion>(callOverrideFun(fun, 95, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListWidget::visualRegionForSelection(x1); } return ret; }
    void keyboardSearch(const QString& x1) { void* fun = LObjects::overrideFun(unique, 78); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 78, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::keyboardSearch(x1); }}
    void setSelectionModel(QItemSelectionModel* x1) { void* fun = LObjects::overrideFun(unique, 81); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 81, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::setSelectionModel(x1); }}
    int sizeHintForColumn(int x1) const { void* fun = LObjects::overrideFun(unique, 82); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 82, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListWidget::sizeHintForColumn(x1); } return ret; }
    int sizeHintForRow(int x1) const { void* fun = LObjects::overrideFun(unique, 83); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 83, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListWidget::sizeHintForRow(x1); } return ret; }
    bool edit(const QModelIndex& x1, EditTrigger x2, QEvent* x3) { void* fun = LObjects::overrideFun(unique, 85); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 85, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListWidget::edit(x1, x2, x3); } return ret; }
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex& x1, const QEvent* x2 = 0) const { void* fun = LObjects::overrideFun(unique, 90); QItemSelectionModel::SelectionFlags ret = (QItemSelectionModel::SelectionFlags)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = (QItemSelectionModel::SelectionFlags)callOverrideFun(fun, 90, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListWidget::selectionCommand(x1, x2); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListWidget::inputMethodQuery(x1); } return ret; }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::dragEnterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListWidget::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::focusOutEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::inputMethodEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::keyPressEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::mouseDoubleClickEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::mousePressEvent(x1); }}
    bool viewportEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 96); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 96, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListWidget::viewportEvent(x1); } return ret; }
    void scrollContentsBy(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 97); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 97, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::scrollContentsBy(x1, x2); }}
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListWidget::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListWidget::sizeHint(); } return ret; }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::contextMenuEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::wheelEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::changeEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListWidget::heightForWidth(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::closeEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::enterEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::hideEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::leaveEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::moveEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::tabletEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListWidget::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QListWidget::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QListWidget::disconnectNotify(x1); }}
};

class LMainWindow : public QMainWindow {
    Q_OBJECT
    friend class Q113;
public:
    LMainWindow(uint u, QWidget* x1 = 0, Qt::WindowFlags x2 = 0) : QMainWindow(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QMenu* createPopupMenu() { void* fun = LObjects::overrideFun(unique, 278); QMenu* ret = 0; if(fun && (LObjects::calling != unique)) { ret = (QMenu*)qVariantValue<void*>(callOverrideFun(fun, 278, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMainWindow::createPopupMenu(); } return ret; }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMainWindow::contextMenuEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMainWindow::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMainWindow::inputMethodQuery(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMainWindow::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMainWindow::sizeHint(); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMainWindow::actionEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMainWindow::changeEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMainWindow::closeEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMainWindow::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMainWindow::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMainWindow::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMainWindow::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMainWindow::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMainWindow::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMainWindow::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMainWindow::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMainWindow::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMainWindow::inputMethodEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMainWindow::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMainWindow::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMainWindow::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMainWindow::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMainWindow::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMainWindow::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMainWindow::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMainWindow::moveEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMainWindow::paintEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMainWindow::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMainWindow::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMainWindow::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMainWindow::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMainWindow::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMainWindow::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMainWindow::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMainWindow::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMainWindow::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMainWindow::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMainWindow::timerEvent(x1); }}
};

class LMdiArea : public QMdiArea {
    Q_OBJECT
    friend class Q114;
public:
    LMdiArea(uint u, QWidget* x1 = 0) : QMdiArea(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMdiArea::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMdiArea::sizeHint(); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiArea::childEvent(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMdiArea::eventFilter(x1, x2); } return ret; }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiArea::paintEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiArea::resizeEvent(x1); }}
    void scrollContentsBy(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 97); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 97, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiArea::scrollContentsBy(x1, x2); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiArea::showEvent(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiArea::timerEvent(x1); }}
    bool viewportEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 96); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 96, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMdiArea::viewportEvent(x1); } return ret; }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiArea::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiArea::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiArea::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiArea::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiArea::dropEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiArea::keyPressEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiArea::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiArea::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiArea::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiArea::mouseReleaseEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiArea::wheelEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiArea::changeEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMdiArea::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMdiArea::inputMethodQuery(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiArea::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiArea::closeEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiArea::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiArea::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMdiArea::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiArea::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiArea::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiArea::inputMethodEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiArea::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiArea::leaveEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiArea::moveEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiArea::tabletEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMdiArea::metric(x1); } return ret; }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiArea::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiArea::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiArea::disconnectNotify(x1); }}
};

class LMdiSubWindow : public QMdiSubWindow {
    Q_OBJECT
    friend class Q115;
public:
    LMdiSubWindow(uint u, QWidget* x1 = 0, Qt::WindowFlags x2 = 0) : QMdiSubWindow(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMdiSubWindow::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMdiSubWindow::sizeHint(); } return ret; }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiSubWindow::changeEvent(x1); }}
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiSubWindow::childEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiSubWindow::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiSubWindow::contextMenuEvent(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMdiSubWindow::eventFilter(x1, x2); } return ret; }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiSubWindow::focusInEvent(x1); }}
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiSubWindow::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiSubWindow::hideEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiSubWindow::keyPressEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiSubWindow::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiSubWindow::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiSubWindow::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiSubWindow::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiSubWindow::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiSubWindow::moveEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiSubWindow::paintEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiSubWindow::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiSubWindow::showEvent(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiSubWindow::timerEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMdiSubWindow::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMdiSubWindow::inputMethodQuery(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiSubWindow::actionEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiSubWindow::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiSubWindow::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiSubWindow::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiSubWindow::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiSubWindow::enterEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMdiSubWindow::focusNextPrevChild(x1); } return ret; }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiSubWindow::inputMethodEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiSubWindow::keyReleaseEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiSubWindow::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiSubWindow::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMdiSubWindow::metric(x1); } return ret; }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiSubWindow::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiSubWindow::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMdiSubWindow::disconnectNotify(x1); }}
};

class LMenu : public QMenu {
    Q_OBJECT
    friend class Q116;
public:
    LMenu(uint u, QWidget* x1 = 0) : QMenu(x1), unique(u) {}
    LMenu(uint u, const QString& x1, QWidget* x2 = 0) : QMenu(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMenu::sizeHint(); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenu::actionEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenu::changeEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenu::enterEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMenu::focusNextPrevChild(x1); } return ret; }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenu::hideEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenu::keyPressEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenu::leaveEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenu::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenu::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenu::mouseReleaseEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenu::paintEvent(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenu::timerEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenu::wheelEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMenu::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMenu::inputMethodQuery(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMenu::minimumSizeHint(); } return ret; }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenu::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenu::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenu::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenu::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenu::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenu::dropEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenu::focusInEvent(x1); }}
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenu::focusOutEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenu::inputMethodEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenu::keyReleaseEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenu::mouseDoubleClickEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenu::moveEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenu::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenu::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenu::tabletEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMenu::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMenu::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenu::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenu::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenu::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenu::disconnectNotify(x1); }}
};

class LMenuBar : public QMenuBar {
    Q_OBJECT
    friend class Q117;
public:
    LMenuBar(uint u, QWidget* x1 = 0) : QMenuBar(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMenuBar::heightForWidth(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMenuBar::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMenuBar::sizeHint(); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenuBar::actionEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenuBar::changeEvent(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMenuBar::eventFilter(x1, x2); } return ret; }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenuBar::focusInEvent(x1); }}
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenuBar::focusOutEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenuBar::keyPressEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenuBar::leaveEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenuBar::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenuBar::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenuBar::mouseReleaseEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenuBar::paintEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenuBar::resizeEvent(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenuBar::timerEvent(x1); }}
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMenuBar::inputMethodQuery(x1); } return ret; }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenuBar::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenuBar::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenuBar::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenuBar::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenuBar::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenuBar::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenuBar::enterEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMenuBar::focusNextPrevChild(x1); } return ret; }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenuBar::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenuBar::inputMethodEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenuBar::keyReleaseEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenuBar::mouseDoubleClickEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenuBar::moveEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenuBar::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenuBar::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenuBar::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMenuBar::metric(x1); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenuBar::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenuBar::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenuBar::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMenuBar::disconnectNotify(x1); }}
};

class LMessageBox : public QMessageBox {
    Q_OBJECT
    friend class Q118;
public:
    LMessageBox(uint u, QWidget* x1 = 0) : QMessageBox(x1), unique(u) {}
    LMessageBox(uint u, Icon x1, const QString& x2, const QString& x3, StandardButtons x4 = NoButton, QWidget* x5 = 0, Qt::WindowFlags x6 = Qt::Dialog|Qt::MSWindowsFixedSizeDialogHint) : QMessageBox(x1, x2, x3, x4, x5, x6), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void setVisible(bool x1) { void* fun = LObjects::overrideFun(unique, 99); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 99, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMessageBox::setVisible(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMessageBox::changeEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMessageBox::closeEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMessageBox::keyPressEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMessageBox::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMessageBox::showEvent(x1); }}
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMessageBox::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMessageBox::sizeHint(); } return ret; }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMessageBox::contextMenuEvent(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMessageBox::eventFilter(x1, x2); } return ret; }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMessageBox::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMessageBox::inputMethodQuery(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMessageBox::actionEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMessageBox::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMessageBox::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMessageBox::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMessageBox::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMessageBox::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMessageBox::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMessageBox::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMessageBox::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMessageBox::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMessageBox::inputMethodEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMessageBox::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMessageBox::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMessageBox::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMessageBox::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMessageBox::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMessageBox::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMessageBox::moveEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMessageBox::paintEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMessageBox::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMessageBox::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMessageBox::metric(x1); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMessageBox::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMessageBox::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMessageBox::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMessageBox::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMessageBox::timerEvent(x1); }}
};

class LMimeData : public QMimeData {
    Q_OBJECT
    friend class Q119;
public:
    LMimeData(uint u) : unique(u) {}

    static NumList overrideIds;
    uint unique;

    QStringList formats() const { void* fun = LObjects::overrideFun(unique, 279); QStringList ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QStringList>(callOverrideFun(fun, 279, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMimeData::formats(); } return ret; }
    bool hasFormat(const QString& x1) const { void* fun = LObjects::overrideFun(unique, 280); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 280, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMimeData::hasFormat(x1); } return ret; }
    QVariant retrieveData(const QString& x1, QVariant::Type x2) const { void* fun = LObjects::overrideFun(unique, 281); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 281, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMimeData::retrieveData(x1, x2); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMimeData::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMimeData::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMimeData::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMimeData::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMimeData::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMimeData::timerEvent(x1); }}
};

class LMotifStyle : public QMotifStyle {
    Q_OBJECT
    friend class Q120;
public:
    LMotifStyle(uint u, bool x1 = false) : QMotifStyle(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void drawComplexControl(ComplexControl x1, const QStyleOptionComplex* x2, QPainter* x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 164); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; callOverrideFun(fun, 164, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMotifStyle::drawComplexControl(x1, x2, x3, x4); }}
    void drawControl(ControlElement x1, const QStyleOption* x2, QPainter* x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 160); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; callOverrideFun(fun, 160, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMotifStyle::drawControl(x1, x2, x3, x4); }}
    void drawPrimitive(PrimitiveElement x1, const QStyleOption* x2, QPainter* x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 161); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; callOverrideFun(fun, 161, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMotifStyle::drawPrimitive(x1, x2, x3, x4); }}
    int pixelMetric(PixelMetric x1, const QStyleOption* x2 = 0, const QWidget* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 162); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 162, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMotifStyle::pixelMetric(x1, x2, x3); } return ret; }
    void polish(QPalette& x1) { void* fun = LObjects::overrideFun(unique, 165); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 165, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMotifStyle::polish(x1); }}
    QSize sizeFromContents(ContentsType x1, const QStyleOption* x2, const QSize& x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 166); QSize ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = qVariantValue<QSize>(callOverrideFun(fun, 166, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMotifStyle::sizeFromContents(x1, x2, x3, x4); } return ret; }
    QPalette standardPalette() const { void* fun = LObjects::overrideFun(unique, 163); QPalette ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QPalette>(callOverrideFun(fun, 163, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMotifStyle::standardPalette(); } return ret; }
    QPixmap standardPixmap(StandardPixmap x1, const QStyleOption* x2, const QWidget* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 167); QPixmap ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QPixmap>(callOverrideFun(fun, 167, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMotifStyle::standardPixmap(x1, x2, x3); } return ret; }
    int styleHint(StyleHint x1, const QStyleOption* x2 = 0, const QWidget* x3 = 0, QStyleHintReturn* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 168); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = callOverrideFun(fun, 168, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMotifStyle::styleHint(x1, x2, x3, x4); } return ret; }
    QRect subControlRect(ComplexControl x1, const QStyleOptionComplex* x2, SubControl x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 169); QRect ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = qVariantValue<QRect>(callOverrideFun(fun, 169, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMotifStyle::subControlRect(x1, x2, x3, x4); } return ret; }
    QRect subElementRect(SubElement x1, const QStyleOption* x2, const QWidget* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 170); QRect ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QRect>(callOverrideFun(fun, 170, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMotifStyle::subElementRect(x1, x2, x3); } return ret; }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMotifStyle::timerEvent(x1); }}
    QPixmap generatedIconPixmap(QIcon::Mode x1, const QPixmap& x2, const QStyleOption* x3) const { void* fun = LObjects::overrideFun(unique, 171); QPixmap ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QPixmap>(callOverrideFun(fun, 171, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMotifStyle::generatedIconPixmap(x1, x2, x3); } return ret; }
    SubControl hitTestComplexControl(ComplexControl x1, const QStyleOptionComplex* x2, const QPoint& x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 172); SubControl ret = (SubControl)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = (SubControl)callOverrideFun(fun, 172, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMotifStyle::hitTestComplexControl(x1, x2, x3, x4); } return ret; }
    void unpolish(QWidget* x1) { void* fun = LObjects::overrideFun(unique, 175); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 175, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMotifStyle::unpolish(x1); }}
    void drawItemPixmap(QPainter* x1, const QRect& x2, int x3, const QPixmap& x4) const { void* fun = LObjects::overrideFun(unique, 177); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; callOverrideFun(fun, 177, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMotifStyle::drawItemPixmap(x1, x2, x3, x4); }}
    void drawItemText(QPainter* x1, const QRect& x2, int x3, const QPalette& x4, bool x5, const QString& x6, QPalette::ColorRole x7 = QPalette::NoRole) const { void* fun = LObjects::overrideFun(unique, 178); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4, &x5, &x6, &x7 }; callOverrideFun(fun, 178, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMotifStyle::drawItemText(x1, x2, x3, x4, x5, x6, x7); }}
    QRect itemPixmapRect(const QRect& x1, int x2, const QPixmap& x3) const { void* fun = LObjects::overrideFun(unique, 179); QRect ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QRect>(callOverrideFun(fun, 179, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMotifStyle::itemPixmapRect(x1, x2, x3); } return ret; }
    QRect itemTextRect(const QFontMetrics& x1, const QRect& x2, int x3, bool x4, const QString& x5) const { void* fun = LObjects::overrideFun(unique, 180); QRect ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; ret = qVariantValue<QRect>(callOverrideFun(fun, 180, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMotifStyle::itemTextRect(x1, x2, x3, x4, x5); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMotifStyle::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMotifStyle::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMotifStyle::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMotifStyle::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMotifStyle::disconnectNotify(x1); }}
};

class LMouseEventTransition : public QMouseEventTransition {
    Q_OBJECT
    friend class Q121;
public:
    LMouseEventTransition(uint u, QState* x1 = 0) : QMouseEventTransition(x1), unique(u) {}
    LMouseEventTransition(uint u, QObject* x1, QEvent::Type x2, Qt::MouseButton x3, QState* x4 = 0) : QMouseEventTransition(x1, x2, x3, x4), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool eventTest(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 140); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 140, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMouseEventTransition::eventTest(x1); } return ret; }
    void onTransition(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 141); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 141, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMouseEventTransition::onTransition(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMouseEventTransition::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMouseEventTransition::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMouseEventTransition::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMouseEventTransition::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMouseEventTransition::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMouseEventTransition::timerEvent(x1); }}
};

class LMovie : public QMovie {
    Q_OBJECT
    friend class Q122;
public:
    LMovie(uint u, QObject* x1 = 0) : QMovie(x1), unique(u) {}
    LMovie(uint u, const QString& x1, const QByteArray& x2 = QByteArray(), QObject* x3 = 0) : QMovie(x1, x2, x3), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QMovie::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMovie::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMovie::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMovie::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMovie::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QMovie::timerEvent(x1); }}
};

class LObject : public QObject {
    Q_OBJECT
    friend class Q127;
public:
    LObject(uint u, QObject* x1 = 0) : QObject(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QObject::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QObject::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QObject::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QObject::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QObject::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QObject::timerEvent(x1); }}
};

class LPageSetupDialog : public QPageSetupDialog {
    Q_OBJECT
    friend class Q128;
public:
    LPageSetupDialog(uint u, QPrinter* x1, QWidget* x2 = 0) : QPageSetupDialog(x1, x2), unique(u) {}
    LPageSetupDialog(uint u, QWidget* x1 = 0) : QPageSetupDialog(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void setVisible(bool x1) { void* fun = LObjects::overrideFun(unique, 99); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 99, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPageSetupDialog::setVisible(x1); }}
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPageSetupDialog::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPageSetupDialog::sizeHint(); } return ret; }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPageSetupDialog::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPageSetupDialog::contextMenuEvent(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPageSetupDialog::eventFilter(x1, x2); } return ret; }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPageSetupDialog::keyPressEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPageSetupDialog::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPageSetupDialog::showEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPageSetupDialog::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPageSetupDialog::inputMethodQuery(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPageSetupDialog::actionEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPageSetupDialog::changeEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPageSetupDialog::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPageSetupDialog::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPageSetupDialog::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPageSetupDialog::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPageSetupDialog::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPageSetupDialog::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPageSetupDialog::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPageSetupDialog::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPageSetupDialog::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPageSetupDialog::inputMethodEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPageSetupDialog::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPageSetupDialog::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPageSetupDialog::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPageSetupDialog::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPageSetupDialog::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPageSetupDialog::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPageSetupDialog::moveEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPageSetupDialog::paintEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPageSetupDialog::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPageSetupDialog::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPageSetupDialog::metric(x1); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPageSetupDialog::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPageSetupDialog::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPageSetupDialog::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPageSetupDialog::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPageSetupDialog::timerEvent(x1); }}
};

class LPanGesture : public QPanGesture {
    Q_OBJECT
    friend class Q129;
public:

    static NumList overrideIds;
    uint unique;

    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPanGesture::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPanGesture::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPanGesture::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPanGesture::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPanGesture::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPanGesture::timerEvent(x1); }}
};

class LParallelAnimationGroup : public QParallelAnimationGroup {
    Q_OBJECT
    friend class Q130;
public:
    LParallelAnimationGroup(uint u, QObject* x1 = 0) : QParallelAnimationGroup(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    int duration() const { void* fun = LObjects::overrideFun(unique, 1); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 1, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QParallelAnimationGroup::duration(); } return ret; }
    void updateCurrentTime(int x1) { void* fun = LObjects::overrideFun(unique, 2); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 2, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QParallelAnimationGroup::updateCurrentTime(x1); }}
    void updateDirection(QAbstractAnimation::Direction x1) { void* fun = LObjects::overrideFun(unique, 3); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 3, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QParallelAnimationGroup::updateDirection(x1); }}
    void updateState(QAbstractAnimation::State x1, QAbstractAnimation::State x2) { void* fun = LObjects::overrideFun(unique, 4); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 4, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QParallelAnimationGroup::updateState(x1, x2); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QParallelAnimationGroup::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QParallelAnimationGroup::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QParallelAnimationGroup::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QParallelAnimationGroup::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QParallelAnimationGroup::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QParallelAnimationGroup::timerEvent(x1); }}
};

class LPauseAnimation : public QPauseAnimation {
    Q_OBJECT
    friend class Q131;
public:
    LPauseAnimation(uint u, QObject* x1 = 0) : QPauseAnimation(x1), unique(u) {}
    LPauseAnimation(uint u, int x1, QObject* x2 = 0) : QPauseAnimation(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    int duration() const { void* fun = LObjects::overrideFun(unique, 1); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 1, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPauseAnimation::duration(); } return ret; }
    void updateCurrentTime(int x1) { void* fun = LObjects::overrideFun(unique, 2); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 2, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPauseAnimation::updateCurrentTime(x1); }}
    void updateDirection(QAbstractAnimation::Direction x1) { void* fun = LObjects::overrideFun(unique, 3); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 3, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPauseAnimation::updateDirection(x1); }}
    void updateState(QAbstractAnimation::State x1, QAbstractAnimation::State x2) { void* fun = LObjects::overrideFun(unique, 4); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 4, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPauseAnimation::updateState(x1, x2); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPauseAnimation::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPauseAnimation::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPauseAnimation::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPauseAnimation::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPauseAnimation::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPauseAnimation::timerEvent(x1); }}
};

class LPinchGesture : public QPinchGesture {
    Q_OBJECT
    friend class Q132;
public:

    static NumList overrideIds;
    uint unique;

    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPinchGesture::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPinchGesture::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPinchGesture::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPinchGesture::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPinchGesture::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPinchGesture::timerEvent(x1); }}
};

class LPlainTextDocumentLayout : public QPlainTextDocumentLayout {
    Q_OBJECT
    friend class Q133;
public:
    LPlainTextDocumentLayout(uint u, QTextDocument* x1) : QPlainTextDocumentLayout(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QRectF blockBoundingRect(const QTextBlock& x1) const { void* fun = LObjects::overrideFun(unique, 130); QRectF ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QRectF>(callOverrideFun(fun, 130, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPlainTextDocumentLayout::blockBoundingRect(x1); } return ret; }
    QSizeF documentSize() const { void* fun = LObjects::overrideFun(unique, 131); QSizeF ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSizeF>(callOverrideFun(fun, 131, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPlainTextDocumentLayout::documentSize(); } return ret; }
    void draw(QPainter* x1, const PaintContext& x2) { void* fun = LObjects::overrideFun(unique, 132); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 132, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextDocumentLayout::draw(x1, x2); }}
    QRectF frameBoundingRect(QTextFrame* x1) const { void* fun = LObjects::overrideFun(unique, 133); QRectF ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QRectF>(callOverrideFun(fun, 133, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPlainTextDocumentLayout::frameBoundingRect(x1); } return ret; }
    int hitTest(const QPointF& x1, Qt::HitTestAccuracy x2) const { void* fun = LObjects::overrideFun(unique, 134); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 134, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPlainTextDocumentLayout::hitTest(x1, x2); } return ret; }
    int pageCount() const { void* fun = LObjects::overrideFun(unique, 135); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 135, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPlainTextDocumentLayout::pageCount(); } return ret; }
    void documentChanged(int x1, int x2, int x3) { void* fun = LObjects::overrideFun(unique, 136); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 136, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextDocumentLayout::documentChanged(x1, x2, x3); }}
    void drawInlineObject(QPainter* x1, const QRectF& x2, QTextInlineObject x3, int x4, const QTextFormat& x5) { void* fun = LObjects::overrideFun(unique, 137); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; callOverrideFun(fun, 137, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextDocumentLayout::drawInlineObject(x1, x2, x3, x4, x5); }}
    void positionInlineObject(QTextInlineObject x1, int x2, const QTextFormat& x3) { void* fun = LObjects::overrideFun(unique, 138); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 138, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextDocumentLayout::positionInlineObject(x1, x2, x3); }}
    void resizeInlineObject(QTextInlineObject x1, int x2, const QTextFormat& x3) { void* fun = LObjects::overrideFun(unique, 139); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 139, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextDocumentLayout::resizeInlineObject(x1, x2, x3); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPlainTextDocumentLayout::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextDocumentLayout::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextDocumentLayout::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextDocumentLayout::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextDocumentLayout::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextDocumentLayout::timerEvent(x1); }}
};

class LPlainTextEdit : public QPlainTextEdit {
    Q_OBJECT
    friend class Q134;
public:
    LPlainTextEdit(uint u, QWidget* x1 = 0) : QPlainTextEdit(x1), unique(u) {}
    LPlainTextEdit(uint u, const QString& x1, QWidget* x2 = 0) : QPlainTextEdit(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QVariant loadResource(int x1, const QUrl& x2) { void* fun = LObjects::overrideFun(unique, 289); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 289, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPlainTextEdit::loadResource(x1, x2); } return ret; }
    bool canInsertFromMimeData(const QMimeData* x1) const { void* fun = LObjects::overrideFun(unique, 290); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 290, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPlainTextEdit::canInsertFromMimeData(x1); } return ret; }
    QMimeData* createMimeDataFromSelection() const { void* fun = LObjects::overrideFun(unique, 291); QMimeData* ret = 0; if(fun && (LObjects::calling != unique)) { ret = (QMimeData*)qVariantValue<void*>(callOverrideFun(fun, 291, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPlainTextEdit::createMimeDataFromSelection(); } return ret; }
    void insertFromMimeData(const QMimeData* x1) { void* fun = LObjects::overrideFun(unique, 292); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 292, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextEdit::insertFromMimeData(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextEdit::changeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextEdit::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextEdit::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextEdit::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextEdit::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextEdit::dropEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextEdit::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPlainTextEdit::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextEdit::focusOutEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextEdit::inputMethodEvent(x1); }}
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPlainTextEdit::inputMethodQuery(x1); } return ret; }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextEdit::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextEdit::keyReleaseEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextEdit::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextEdit::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextEdit::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextEdit::mouseReleaseEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextEdit::paintEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextEdit::resizeEvent(x1); }}
    void scrollContentsBy(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 97); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 97, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextEdit::scrollContentsBy(x1, x2); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextEdit::showEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextEdit::wheelEvent(x1); }}
    bool viewportEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 96); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 96, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPlainTextEdit::viewportEvent(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPlainTextEdit::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPlainTextEdit::sizeHint(); } return ret; }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPlainTextEdit::heightForWidth(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextEdit::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextEdit::closeEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextEdit::enterEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextEdit::hideEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextEdit::leaveEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextEdit::moveEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextEdit::tabletEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPlainTextEdit::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPlainTextEdit::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextEdit::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextEdit::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextEdit::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextEdit::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlainTextEdit::timerEvent(x1); }}
};

class LPlastiqueStyle : public QPlastiqueStyle {
    Q_OBJECT
    friend class Q135;
public:
    LPlastiqueStyle(uint u) : unique(u) {}

    static NumList overrideIds;
    uint unique;

    void drawComplexControl(ComplexControl x1, const QStyleOptionComplex* x2, QPainter* x3, const QWidget* x4) const { void* fun = LObjects::overrideFun(unique, 164); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; callOverrideFun(fun, 164, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlastiqueStyle::drawComplexControl(x1, x2, x3, x4); }}
    void drawControl(ControlElement x1, const QStyleOption* x2, QPainter* x3, const QWidget* x4) const { void* fun = LObjects::overrideFun(unique, 160); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; callOverrideFun(fun, 160, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlastiqueStyle::drawControl(x1, x2, x3, x4); }}
    void drawPrimitive(PrimitiveElement x1, const QStyleOption* x2, QPainter* x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 161); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; callOverrideFun(fun, 161, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlastiqueStyle::drawPrimitive(x1, x2, x3, x4); }}
    SubControl hitTestComplexControl(ComplexControl x1, const QStyleOptionComplex* x2, const QPoint& x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 172); SubControl ret = (SubControl)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = (SubControl)callOverrideFun(fun, 172, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPlastiqueStyle::hitTestComplexControl(x1, x2, x3, x4); } return ret; }
    int pixelMetric(PixelMetric x1, const QStyleOption* x2 = 0, const QWidget* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 162); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 162, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPlastiqueStyle::pixelMetric(x1, x2, x3); } return ret; }
    void polish(QWidget* x1) { void* fun = LObjects::overrideFun(unique, 174); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 174, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlastiqueStyle::polish(x1); }}
    QSize sizeFromContents(ContentsType x1, const QStyleOption* x2, const QSize& x3, const QWidget* x4) const { void* fun = LObjects::overrideFun(unique, 166); QSize ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = qVariantValue<QSize>(callOverrideFun(fun, 166, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPlastiqueStyle::sizeFromContents(x1, x2, x3, x4); } return ret; }
    QPalette standardPalette() const { void* fun = LObjects::overrideFun(unique, 163); QPalette ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QPalette>(callOverrideFun(fun, 163, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPlastiqueStyle::standardPalette(); } return ret; }
    QPixmap standardPixmap(StandardPixmap x1, const QStyleOption* x2, const QWidget* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 167); QPixmap ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QPixmap>(callOverrideFun(fun, 167, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPlastiqueStyle::standardPixmap(x1, x2, x3); } return ret; }
    int styleHint(StyleHint x1, const QStyleOption* x2 = 0, const QWidget* x3 = 0, QStyleHintReturn* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 168); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = callOverrideFun(fun, 168, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPlastiqueStyle::styleHint(x1, x2, x3, x4); } return ret; }
    QRect subControlRect(ComplexControl x1, const QStyleOptionComplex* x2, SubControl x3, const QWidget* x4) const { void* fun = LObjects::overrideFun(unique, 169); QRect ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = qVariantValue<QRect>(callOverrideFun(fun, 169, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPlastiqueStyle::subControlRect(x1, x2, x3, x4); } return ret; }
    QRect subElementRect(SubElement x1, const QStyleOption* x2, const QWidget* x3) const { void* fun = LObjects::overrideFun(unique, 170); QRect ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QRect>(callOverrideFun(fun, 170, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPlastiqueStyle::subElementRect(x1, x2, x3); } return ret; }
    void unpolish(QWidget* x1) { void* fun = LObjects::overrideFun(unique, 175); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 175, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlastiqueStyle::unpolish(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPlastiqueStyle::eventFilter(x1, x2); } return ret; }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlastiqueStyle::timerEvent(x1); }}
    QPixmap generatedIconPixmap(QIcon::Mode x1, const QPixmap& x2, const QStyleOption* x3) const { void* fun = LObjects::overrideFun(unique, 171); QPixmap ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QPixmap>(callOverrideFun(fun, 171, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPlastiqueStyle::generatedIconPixmap(x1, x2, x3); } return ret; }
    void drawItemPixmap(QPainter* x1, const QRect& x2, int x3, const QPixmap& x4) const { void* fun = LObjects::overrideFun(unique, 177); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; callOverrideFun(fun, 177, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlastiqueStyle::drawItemPixmap(x1, x2, x3, x4); }}
    void drawItemText(QPainter* x1, const QRect& x2, int x3, const QPalette& x4, bool x5, const QString& x6, QPalette::ColorRole x7 = QPalette::NoRole) const { void* fun = LObjects::overrideFun(unique, 178); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4, &x5, &x6, &x7 }; callOverrideFun(fun, 178, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlastiqueStyle::drawItemText(x1, x2, x3, x4, x5, x6, x7); }}
    QRect itemPixmapRect(const QRect& x1, int x2, const QPixmap& x3) const { void* fun = LObjects::overrideFun(unique, 179); QRect ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QRect>(callOverrideFun(fun, 179, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPlastiqueStyle::itemPixmapRect(x1, x2, x3); } return ret; }
    QRect itemTextRect(const QFontMetrics& x1, const QRect& x2, int x3, bool x4, const QString& x5) const { void* fun = LObjects::overrideFun(unique, 180); QRect ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; ret = qVariantValue<QRect>(callOverrideFun(fun, 180, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPlastiqueStyle::itemTextRect(x1, x2, x3, x4, x5); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlastiqueStyle::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlastiqueStyle::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlastiqueStyle::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPlastiqueStyle::disconnectNotify(x1); }}
};

class LPluginLoader : public QPluginLoader {
    Q_OBJECT
    friend class Q136;
public:
    LPluginLoader(uint u, QObject* x1 = 0) : QPluginLoader(x1), unique(u) {}
    LPluginLoader(uint u, const QString& x1, QObject* x2 = 0) : QPluginLoader(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPluginLoader::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPluginLoader::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPluginLoader::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPluginLoader::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPluginLoader::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPluginLoader::timerEvent(x1); }}
};

class LPrintDialog : public QPrintDialog {
    Q_OBJECT
    friend class Q137;
public:
    LPrintDialog(uint u, QPrinter* x1, QWidget* x2 = 0) : QPrintDialog(x1, x2), unique(u) {}
    LPrintDialog(uint u, QWidget* x1 = 0) : QPrintDialog(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void done(int x1) { void* fun = LObjects::overrideFun(unique, 182); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 182, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintDialog::done(x1); }}
    int exec() { void* fun = LObjects::overrideFun(unique, 98); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 98, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPrintDialog::exec(); } return ret; }
    void setVisible(bool x1) { void* fun = LObjects::overrideFun(unique, 99); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 99, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintDialog::setVisible(x1); }}
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPrintDialog::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPrintDialog::sizeHint(); } return ret; }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintDialog::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintDialog::contextMenuEvent(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPrintDialog::eventFilter(x1, x2); } return ret; }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintDialog::keyPressEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintDialog::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintDialog::showEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPrintDialog::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPrintDialog::inputMethodQuery(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintDialog::actionEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintDialog::changeEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintDialog::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintDialog::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintDialog::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintDialog::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintDialog::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintDialog::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPrintDialog::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintDialog::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintDialog::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintDialog::inputMethodEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintDialog::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintDialog::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintDialog::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintDialog::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintDialog::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintDialog::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintDialog::moveEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintDialog::paintEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintDialog::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintDialog::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPrintDialog::metric(x1); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintDialog::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintDialog::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintDialog::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintDialog::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintDialog::timerEvent(x1); }}
};

class LPrintPreviewDialog : public QPrintPreviewDialog {
    Q_OBJECT
    friend class Q138;
public:
    LPrintPreviewDialog(uint u, QPrinter* x1, QWidget* x2 = 0, Qt::WindowFlags x3 = 0) : QPrintPreviewDialog(x1, x2, x3), unique(u) {}
    LPrintPreviewDialog(uint u, QWidget* x1 = 0, Qt::WindowFlags x2 = 0) : QPrintPreviewDialog(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void done(int x1) { void* fun = LObjects::overrideFun(unique, 182); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 182, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewDialog::done(x1); }}
    void setVisible(bool x1) { void* fun = LObjects::overrideFun(unique, 99); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 99, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewDialog::setVisible(x1); }}
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPrintPreviewDialog::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPrintPreviewDialog::sizeHint(); } return ret; }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewDialog::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewDialog::contextMenuEvent(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPrintPreviewDialog::eventFilter(x1, x2); } return ret; }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewDialog::keyPressEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewDialog::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewDialog::showEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPrintPreviewDialog::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPrintPreviewDialog::inputMethodQuery(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewDialog::actionEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewDialog::changeEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewDialog::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewDialog::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewDialog::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewDialog::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewDialog::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewDialog::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPrintPreviewDialog::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewDialog::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewDialog::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewDialog::inputMethodEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewDialog::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewDialog::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewDialog::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewDialog::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewDialog::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewDialog::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewDialog::moveEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewDialog::paintEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewDialog::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewDialog::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPrintPreviewDialog::metric(x1); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewDialog::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewDialog::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewDialog::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewDialog::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewDialog::timerEvent(x1); }}
};

class LPrintPreviewWidget : public QPrintPreviewWidget {
    Q_OBJECT
    friend class Q139;
public:
    LPrintPreviewWidget(uint u, QPrinter* x1, QWidget* x2 = 0, Qt::WindowFlags x3 = 0) : QPrintPreviewWidget(x1, x2, x3), unique(u) {}
    LPrintPreviewWidget(uint u, QWidget* x1 = 0, Qt::WindowFlags x2 = 0) : QPrintPreviewWidget(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void setVisible(bool x1) { void* fun = LObjects::overrideFun(unique, 99); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 99, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewWidget::setVisible(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPrintPreviewWidget::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPrintPreviewWidget::inputMethodQuery(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPrintPreviewWidget::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPrintPreviewWidget::sizeHint(); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewWidget::actionEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewWidget::changeEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewWidget::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewWidget::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewWidget::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewWidget::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewWidget::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewWidget::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewWidget::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewWidget::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPrintPreviewWidget::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewWidget::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewWidget::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewWidget::inputMethodEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewWidget::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewWidget::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewWidget::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewWidget::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewWidget::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewWidget::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewWidget::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewWidget::moveEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewWidget::paintEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewWidget::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewWidget::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewWidget::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewWidget::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPrintPreviewWidget::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPrintPreviewWidget::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewWidget::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewWidget::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewWidget::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewWidget::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPrintPreviewWidget::timerEvent(x1); }}
};

class LProcess : public QProcess {
    Q_OBJECT
    friend class Q140;
public:
    LProcess(uint u, QObject* x1 = 0) : QProcess(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void setupChildProcess() { void* fun = LObjects::overrideFun(unique, 293); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 293, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProcess::setupChildProcess(); }}
    bool atEnd() const { void* fun = LObjects::overrideFun(unique, 108); bool ret = false; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 108, 0, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QProcess::atEnd(); } return ret; }
    qlonglong bytesAvailable() const { void* fun = LObjects::overrideFun(unique, 109); qlonglong ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 109, 0, unique).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QProcess::bytesAvailable(); } return ret; }
    qlonglong bytesToWrite() const { void* fun = LObjects::overrideFun(unique, 110); qlonglong ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 110, 0, unique).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QProcess::bytesToWrite(); } return ret; }
    bool canReadLine() const { void* fun = LObjects::overrideFun(unique, 111); bool ret = false; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 111, 0, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QProcess::canReadLine(); } return ret; }
    void close() { void* fun = LObjects::overrideFun(unique, 112); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 112, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProcess::close(); }}
    bool isSequential() const { void* fun = LObjects::overrideFun(unique, 113); bool ret = false; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 113, 0, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QProcess::isSequential(); } return ret; }
    bool waitForBytesWritten(int x1 = 30000) { void* fun = LObjects::overrideFun(unique, 114); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 114, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QProcess::waitForBytesWritten(x1); } return ret; }
    bool waitForReadyRead(int x1 = 30000) { void* fun = LObjects::overrideFun(unique, 115); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 115, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QProcess::waitForReadyRead(x1); } return ret; }
    qlonglong readData(char* x1, qint64 x2) { void* fun = LObjects::overrideFun(unique, 116); qlonglong ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 116, args, unique).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QProcess::readData(x1, x2); } return ret; }
    qlonglong writeData(const char* x1, qint64 x2) { void* fun = LObjects::overrideFun(unique, 118); qlonglong ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 118, args, unique).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QProcess::writeData(x1, x2); } return ret; }
    bool open(OpenMode x1) { void* fun = LObjects::overrideFun(unique, 119); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 119, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QProcess::open(x1); } return ret; }
    qlonglong pos() const { void* fun = LObjects::overrideFun(unique, 120); qlonglong ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 120, 0, unique).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QProcess::pos(); } return ret; }
    bool reset() { void* fun = LObjects::overrideFun(unique, 121); bool ret = false; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 121, 0, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QProcess::reset(); } return ret; }
    bool seek(qint64 x1) { void* fun = LObjects::overrideFun(unique, 122); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 122, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QProcess::seek(x1); } return ret; }
    qlonglong size() const { void* fun = LObjects::overrideFun(unique, 123); qlonglong ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 123, 0, unique).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QProcess::size(); } return ret; }
    qlonglong readLineData(char* x1, qint64 x2) { void* fun = LObjects::overrideFun(unique, 117); qlonglong ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 117, args, unique).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QProcess::readLineData(x1, x2); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QProcess::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProcess::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProcess::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProcess::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProcess::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProcess::timerEvent(x1); }}
};

class LProgressBar : public QProgressBar {
    Q_OBJECT
    friend class Q141;
public:
    LProgressBar(uint u, QWidget* x1 = 0) : QProgressBar(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QString text() const { void* fun = LObjects::overrideFun(unique, 294); QString ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QString>(callOverrideFun(fun, 294, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QProgressBar::text(); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QProgressBar::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QProgressBar::sizeHint(); } return ret; }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressBar::paintEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QProgressBar::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QProgressBar::inputMethodQuery(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressBar::actionEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressBar::changeEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressBar::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressBar::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressBar::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressBar::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressBar::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressBar::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressBar::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressBar::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QProgressBar::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressBar::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressBar::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressBar::inputMethodEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressBar::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressBar::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressBar::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressBar::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressBar::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressBar::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressBar::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressBar::moveEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressBar::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressBar::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressBar::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressBar::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QProgressBar::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QProgressBar::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressBar::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressBar::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressBar::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressBar::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressBar::timerEvent(x1); }}
};

class LProgressDialog : public QProgressDialog {
    Q_OBJECT
    friend class Q142;
public:
    LProgressDialog(uint u, QWidget* x1 = 0, Qt::WindowFlags x2 = 0) : QProgressDialog(x1, x2), unique(u) {}
    LProgressDialog(uint u, const QString& x1, const QString& x2, int x3, int x4, QWidget* x5 = 0, Qt::WindowFlags x6 = 0) : QProgressDialog(x1, x2, x3, x4, x5, x6), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QProgressDialog::sizeHint(); } return ret; }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressDialog::changeEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressDialog::closeEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressDialog::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressDialog::showEvent(x1); }}
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QProgressDialog::minimumSizeHint(); } return ret; }
    void setVisible(bool x1) { void* fun = LObjects::overrideFun(unique, 99); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 99, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressDialog::setVisible(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressDialog::contextMenuEvent(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QProgressDialog::eventFilter(x1, x2); } return ret; }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressDialog::keyPressEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QProgressDialog::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QProgressDialog::inputMethodQuery(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressDialog::actionEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressDialog::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressDialog::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressDialog::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressDialog::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressDialog::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressDialog::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QProgressDialog::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressDialog::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressDialog::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressDialog::inputMethodEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressDialog::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressDialog::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressDialog::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressDialog::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressDialog::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressDialog::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressDialog::moveEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressDialog::paintEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressDialog::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressDialog::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QProgressDialog::metric(x1); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressDialog::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressDialog::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressDialog::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressDialog::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QProgressDialog::timerEvent(x1); }}
};

class LPropertyAnimation : public QPropertyAnimation {
    Q_OBJECT
    friend class Q143;
public:
    LPropertyAnimation(uint u, QObject* x1 = 0) : QPropertyAnimation(x1), unique(u) {}
    LPropertyAnimation(uint u, QObject* x1, const QByteArray& x2, QObject* x3 = 0) : QPropertyAnimation(x1, x2, x3), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void updateCurrentValue(const QVariant& x1) { void* fun = LObjects::overrideFun(unique, 295); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 295, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPropertyAnimation::updateCurrentValue(x1); }}
    void updateState(QAbstractAnimation::State x1, QAbstractAnimation::State x2) { void* fun = LObjects::overrideFun(unique, 4); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 4, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPropertyAnimation::updateState(x1, x2); }}
    QVariant interpolated(const QVariant& x1, const QVariant& x2, qreal x3) const { void* fun = LObjects::overrideFun(unique, 296); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 296, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPropertyAnimation::interpolated(x1, x2, x3); } return ret; }
    int duration() const { void* fun = LObjects::overrideFun(unique, 1); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 1, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPropertyAnimation::duration(); } return ret; }
    void updateCurrentTime(int x1) { void* fun = LObjects::overrideFun(unique, 2); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 2, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPropertyAnimation::updateCurrentTime(x1); }}
    void updateDirection(QAbstractAnimation::Direction x1) { void* fun = LObjects::overrideFun(unique, 3); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 3, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPropertyAnimation::updateDirection(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPropertyAnimation::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPropertyAnimation::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPropertyAnimation::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPropertyAnimation::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPropertyAnimation::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPropertyAnimation::timerEvent(x1); }}
};

class LPushButton : public QPushButton {
    Q_OBJECT
    friend class Q144;
public:
    LPushButton(uint u, QWidget* x1 = 0) : QPushButton(x1), unique(u) {}
    LPushButton(uint u, const QString& x1, QWidget* x2 = 0) : QPushButton(x1, x2), unique(u) {}
    LPushButton(uint u, const QIcon& x1, const QString& x2, QWidget* x3 = 0) : QPushButton(x1, x2, x3), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPushButton::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPushButton::sizeHint(); } return ret; }
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPushButton::focusInEvent(x1); }}
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPushButton::focusOutEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPushButton::keyPressEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPushButton::paintEvent(x1); }}
    void checkStateSet() { void* fun = LObjects::overrideFun(unique, 11); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 11, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPushButton::checkStateSet(); }}
    bool hitButton(const QPoint& x1) const { void* fun = LObjects::overrideFun(unique, 12); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 12, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPushButton::hitButton(x1); } return ret; }
    void nextCheckState() { void* fun = LObjects::overrideFun(unique, 13); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 13, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPushButton::nextCheckState(); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPushButton::changeEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPushButton::keyReleaseEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPushButton::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPushButton::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPushButton::mouseReleaseEvent(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPushButton::timerEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPushButton::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPushButton::inputMethodQuery(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPushButton::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPushButton::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPushButton::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPushButton::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPushButton::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPushButton::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPushButton::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPushButton::enterEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPushButton::focusNextPrevChild(x1); } return ret; }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPushButton::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPushButton::inputMethodEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPushButton::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPushButton::mouseDoubleClickEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPushButton::moveEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPushButton::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPushButton::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPushButton::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPushButton::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPushButton::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QPushButton::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPushButton::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPushButton::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPushButton::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QPushButton::disconnectNotify(x1); }}
};

class LRadioButton : public QRadioButton {
    Q_OBJECT
    friend class Q145;
public:
    LRadioButton(uint u, QWidget* x1 = 0) : QRadioButton(x1), unique(u) {}
    LRadioButton(uint u, const QString& x1, QWidget* x2 = 0) : QRadioButton(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QRadioButton::sizeHint(); } return ret; }
    bool hitButton(const QPoint& x1) const { void* fun = LObjects::overrideFun(unique, 12); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 12, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QRadioButton::hitButton(x1); } return ret; }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRadioButton::mouseMoveEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRadioButton::paintEvent(x1); }}
    void checkStateSet() { void* fun = LObjects::overrideFun(unique, 11); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 11, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRadioButton::checkStateSet(); }}
    void nextCheckState() { void* fun = LObjects::overrideFun(unique, 13); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 13, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRadioButton::nextCheckState(); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRadioButton::changeEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRadioButton::focusInEvent(x1); }}
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRadioButton::focusOutEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRadioButton::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRadioButton::keyReleaseEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRadioButton::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRadioButton::mouseReleaseEvent(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRadioButton::timerEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QRadioButton::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QRadioButton::inputMethodQuery(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QRadioButton::minimumSizeHint(); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRadioButton::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRadioButton::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRadioButton::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRadioButton::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRadioButton::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRadioButton::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRadioButton::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRadioButton::enterEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QRadioButton::focusNextPrevChild(x1); } return ret; }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRadioButton::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRadioButton::inputMethodEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRadioButton::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRadioButton::mouseDoubleClickEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRadioButton::moveEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRadioButton::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRadioButton::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRadioButton::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRadioButton::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QRadioButton::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QRadioButton::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRadioButton::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRadioButton::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRadioButton::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRadioButton::disconnectNotify(x1); }}
};

class LRegExpValidator : public QRegExpValidator {
    Q_OBJECT
    friend class Q146;
public:
    LRegExpValidator(uint u, QObject* x1) : QRegExpValidator(x1), unique(u) {}
    LRegExpValidator(uint u, const QRegExp& x1, QObject* x2) : QRegExpValidator(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QValidator::State validate(QString& x1, int& x2) const { void* fun = LObjects::overrideFun(unique, 126); QValidator::State ret = (QValidator::State)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = (QValidator::State)callOverrideFun(fun, 126, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QRegExpValidator::validate(x1, x2); } return ret; }
    void fixup(QString& x1) const { void* fun = LObjects::overrideFun(unique, 124); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 124, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRegExpValidator::fixup(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QRegExpValidator::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRegExpValidator::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRegExpValidator::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRegExpValidator::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRegExpValidator::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRegExpValidator::timerEvent(x1); }}
};

class LRubberBand : public QRubberBand {
    Q_OBJECT
    friend class Q147;
public:
    LRubberBand(uint u, Shape x1, QWidget* x2 = 0) : QRubberBand(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRubberBand::changeEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRubberBand::moveEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRubberBand::paintEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRubberBand::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRubberBand::showEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QRubberBand::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QRubberBand::inputMethodQuery(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QRubberBand::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QRubberBand::sizeHint(); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRubberBand::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRubberBand::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRubberBand::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRubberBand::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRubberBand::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRubberBand::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRubberBand::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRubberBand::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRubberBand::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QRubberBand::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRubberBand::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRubberBand::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRubberBand::inputMethodEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRubberBand::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRubberBand::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRubberBand::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRubberBand::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRubberBand::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRubberBand::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRubberBand::mouseReleaseEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRubberBand::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRubberBand::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QRubberBand::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QRubberBand::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRubberBand::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRubberBand::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRubberBand::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRubberBand::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QRubberBand::timerEvent(x1); }}
};

class LScrollArea : public QScrollArea {
    Q_OBJECT
    friend class Q148;
public:
    LScrollArea(uint u, QWidget* x1 = 0) : QScrollArea(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QScrollArea::focusNextPrevChild(x1); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QScrollArea::sizeHint(); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QScrollArea::eventFilter(x1, x2); } return ret; }
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollArea::resizeEvent(x1); }}
    void scrollContentsBy(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 97); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 97, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollArea::scrollContentsBy(x1, x2); }}
    bool viewportEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 96); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 96, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QScrollArea::viewportEvent(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QScrollArea::minimumSizeHint(); } return ret; }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollArea::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollArea::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollArea::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollArea::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollArea::dropEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollArea::keyPressEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollArea::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollArea::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollArea::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollArea::mouseReleaseEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollArea::paintEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollArea::wheelEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollArea::changeEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QScrollArea::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QScrollArea::inputMethodQuery(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollArea::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollArea::closeEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollArea::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollArea::focusInEvent(x1); }}
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollArea::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollArea::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollArea::inputMethodEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollArea::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollArea::leaveEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollArea::moveEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollArea::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollArea::tabletEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QScrollArea::metric(x1); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollArea::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollArea::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollArea::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollArea::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollArea::timerEvent(x1); }}
};

class LScrollBar : public QScrollBar {
    Q_OBJECT
    friend class Q149;
public:
    LScrollBar(uint u, QWidget* x1 = 0) : QScrollBar(x1), unique(u) {}
    LScrollBar(uint u, Qt::Orientation x1, QWidget* x2 = 0) : QScrollBar(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QScrollBar::sizeHint(); } return ret; }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollBar::contextMenuEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollBar::hideEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollBar::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollBar::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollBar::mouseReleaseEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollBar::paintEvent(x1); }}
    void sliderChange(SliderChange x1) { void* fun = LObjects::overrideFun(unique, 107); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 107, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollBar::sliderChange(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollBar::changeEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollBar::keyPressEvent(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollBar::timerEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollBar::wheelEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QScrollBar::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QScrollBar::inputMethodQuery(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QScrollBar::minimumSizeHint(); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollBar::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollBar::closeEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollBar::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollBar::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollBar::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollBar::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollBar::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollBar::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QScrollBar::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollBar::focusOutEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollBar::inputMethodEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollBar::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollBar::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollBar::mouseDoubleClickEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollBar::moveEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollBar::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollBar::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollBar::tabletEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QScrollBar::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QScrollBar::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollBar::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollBar::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollBar::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QScrollBar::disconnectNotify(x1); }}
};

class LSequentialAnimationGroup : public QSequentialAnimationGroup {
    Q_OBJECT
    friend class Q150;
public:
    LSequentialAnimationGroup(uint u, QObject* x1 = 0) : QSequentialAnimationGroup(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    int duration() const { void* fun = LObjects::overrideFun(unique, 1); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 1, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSequentialAnimationGroup::duration(); } return ret; }
    void updateCurrentTime(int x1) { void* fun = LObjects::overrideFun(unique, 2); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 2, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSequentialAnimationGroup::updateCurrentTime(x1); }}
    void updateDirection(QAbstractAnimation::Direction x1) { void* fun = LObjects::overrideFun(unique, 3); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 3, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSequentialAnimationGroup::updateDirection(x1); }}
    void updateState(QAbstractAnimation::State x1, QAbstractAnimation::State x2) { void* fun = LObjects::overrideFun(unique, 4); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 4, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSequentialAnimationGroup::updateState(x1, x2); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSequentialAnimationGroup::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSequentialAnimationGroup::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSequentialAnimationGroup::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSequentialAnimationGroup::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSequentialAnimationGroup::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSequentialAnimationGroup::timerEvent(x1); }}
};

class LSettings : public QSettings {
    Q_OBJECT
    friend class Q152;
public:
    LSettings(uint u, const QString& x1, const QString& x2 = QString(), QObject* x3 = 0) : QSettings(x1, x2, x3), unique(u) {}
    LSettings(uint u, Scope x1, const QString& x2, const QString& x3 = QString(), QObject* x4 = 0) : QSettings(x1, x2, x3, x4), unique(u) {}
    LSettings(uint u, Format x1, Scope x2, const QString& x3, const QString& x4 = QString(), QObject* x5 = 0) : QSettings(x1, x2, x3, x4, x5), unique(u) {}
    LSettings(uint u, const QString& x1, Format x2, QObject* x3 = 0) : QSettings(x1, x2, x3), unique(u) {}
    LSettings(uint u, QObject* x1 = 0) : QSettings(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSettings::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSettings::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSettings::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSettings::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSettings::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSettings::timerEvent(x1); }}
};

class LShortcut : public QShortcut {
    Q_OBJECT
    friend class Q153;
public:
    LShortcut(uint u, QWidget* x1) : QShortcut(x1), unique(u) {}
    LShortcut(uint u, const QKeySequence& x1, QWidget* x2, const char* x3 = 0, const char* x4 = 0, Qt::ShortcutContext x5 = Qt::WindowShortcut) : QShortcut(x1, x2, x3, x4, x5), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QShortcut::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QShortcut::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QShortcut::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QShortcut::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QShortcut::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QShortcut::timerEvent(x1); }}
};

class LSignalTransition : public QSignalTransition {
    Q_OBJECT
    friend class Q154;
public:
    LSignalTransition(uint u, QState* x1 = 0) : QSignalTransition(x1), unique(u) {}
    LSignalTransition(uint u, QObject* x1, const char* x2, QState* x3 = 0) : QSignalTransition(x1, x2, x3), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool eventTest(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 140); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 140, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSignalTransition::eventTest(x1); } return ret; }
    void onTransition(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 141); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 141, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSignalTransition::onTransition(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSignalTransition::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSignalTransition::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSignalTransition::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSignalTransition::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSignalTransition::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSignalTransition::timerEvent(x1); }}
};

class LSizeGrip : public QSizeGrip {
    Q_OBJECT
    friend class Q155;
public:
    LSizeGrip(uint u, QWidget* x1) : QSizeGrip(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void setVisible(bool x1) { void* fun = LObjects::overrideFun(unique, 99); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 99, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSizeGrip::setVisible(x1); }}
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSizeGrip::sizeHint(); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSizeGrip::eventFilter(x1, x2); } return ret; }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSizeGrip::hideEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSizeGrip::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSizeGrip::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSizeGrip::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSizeGrip::moveEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSizeGrip::paintEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSizeGrip::showEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSizeGrip::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSizeGrip::inputMethodQuery(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSizeGrip::minimumSizeHint(); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSizeGrip::actionEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSizeGrip::changeEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSizeGrip::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSizeGrip::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSizeGrip::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSizeGrip::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSizeGrip::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSizeGrip::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSizeGrip::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSizeGrip::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSizeGrip::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSizeGrip::focusOutEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSizeGrip::inputMethodEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSizeGrip::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSizeGrip::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSizeGrip::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSizeGrip::mouseDoubleClickEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSizeGrip::resizeEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSizeGrip::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSizeGrip::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSizeGrip::metric(x1); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSizeGrip::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSizeGrip::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSizeGrip::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSizeGrip::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSizeGrip::timerEvent(x1); }}
};

class LSlider : public QSlider {
    Q_OBJECT
    friend class Q156;
public:
    LSlider(uint u, QWidget* x1 = 0) : QSlider(x1), unique(u) {}
    LSlider(uint u, Qt::Orientation x1, QWidget* x2 = 0) : QSlider(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSlider::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSlider::sizeHint(); } return ret; }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSlider::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSlider::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSlider::mouseReleaseEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSlider::paintEvent(x1); }}
    void sliderChange(SliderChange x1) { void* fun = LObjects::overrideFun(unique, 107); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 107, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSlider::sliderChange(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSlider::changeEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSlider::keyPressEvent(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSlider::timerEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSlider::wheelEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSlider::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSlider::inputMethodQuery(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSlider::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSlider::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSlider::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSlider::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSlider::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSlider::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSlider::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSlider::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSlider::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSlider::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSlider::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSlider::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSlider::inputMethodEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSlider::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSlider::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSlider::mouseDoubleClickEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSlider::moveEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSlider::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSlider::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSlider::tabletEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSlider::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSlider::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSlider::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSlider::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSlider::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSlider::disconnectNotify(x1); }}
};

class LSortFilterProxyModel : public QSortFilterProxyModel {
    Q_OBJECT
    friend class Q157;
public:
    LSortFilterProxyModel(uint u, QObject* x1 = 0) : QSortFilterProxyModel(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool filterAcceptsColumn(int x1, const QModelIndex& x2) const { void* fun = LObjects::overrideFun(unique, 297); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 297, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSortFilterProxyModel::filterAcceptsColumn(x1, x2); } return ret; }
    bool filterAcceptsRow(int x1, const QModelIndex& x2) const { void* fun = LObjects::overrideFun(unique, 298); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 298, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSortFilterProxyModel::filterAcceptsRow(x1, x2); } return ret; }
    bool lessThan(const QModelIndex& x1, const QModelIndex& x2) const { void* fun = LObjects::overrideFun(unique, 299); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 299, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSortFilterProxyModel::lessThan(x1, x2); } return ret; }
    QModelIndex buddy(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 53); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 53, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSortFilterProxyModel::buddy(x1); } return ret; }
    bool canFetchMore(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 54); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 54, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSortFilterProxyModel::canFetchMore(x1); } return ret; }
    int columnCount(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 55); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 55, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSortFilterProxyModel::columnCount(x1); } return ret; }
    QVariant data(const QModelIndex& x1, int x2 = Qt::DisplayRole) const { void* fun = LObjects::overrideFun(unique, 56); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 56, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSortFilterProxyModel::data(x1, x2); } return ret; }
    bool dropMimeData(const QMimeData* x1, Qt::DropAction x2, int x3, int x4, const QModelIndex& x5) { void* fun = LObjects::overrideFun(unique, 57); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; ret = callOverrideFun(fun, 57, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSortFilterProxyModel::dropMimeData(x1, x2, x3, x4, x5); } return ret; }
    void fetchMore(const QModelIndex& x1) { void* fun = LObjects::overrideFun(unique, 58); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 58, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSortFilterProxyModel::fetchMore(x1); }}
    Qt::ItemFlags flags(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 59); Qt::ItemFlags ret = (Qt::ItemFlags)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (Qt::ItemFlags)callOverrideFun(fun, 59, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSortFilterProxyModel::flags(x1); } return ret; }
    bool hasChildren(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 60); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 60, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSortFilterProxyModel::hasChildren(x1); } return ret; }
    QVariant headerData(int x1, Qt::Orientation x2, int x3 = Qt::DisplayRole) const { void* fun = LObjects::overrideFun(unique, 61); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 61, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSortFilterProxyModel::headerData(x1, x2, x3); } return ret; }
    QModelIndex index(int x1, int x2, const QModelIndex& x3 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 62); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 62, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSortFilterProxyModel::index(x1, x2, x3); } return ret; }
    bool insertColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 63); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 63, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSortFilterProxyModel::insertColumns(x1, x2, x3); } return ret; }
    bool insertRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 64); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 64, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSortFilterProxyModel::insertRows(x1, x2, x3); } return ret; }
    QModelIndex mapFromSource(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 100); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 100, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSortFilterProxyModel::mapFromSource(x1); } return ret; }
    QItemSelection mapSelectionFromSource(const QItemSelection& x1) const { void* fun = LObjects::overrideFun(unique, 101); QItemSelection ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QItemSelection>(callOverrideFun(fun, 101, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSortFilterProxyModel::mapSelectionFromSource(x1); } return ret; }
    QItemSelection mapSelectionToSource(const QItemSelection& x1) const { void* fun = LObjects::overrideFun(unique, 102); QItemSelection ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QItemSelection>(callOverrideFun(fun, 102, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSortFilterProxyModel::mapSelectionToSource(x1); } return ret; }
    QModelIndex mapToSource(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 103); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 103, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSortFilterProxyModel::mapToSource(x1); } return ret; }
    QModelIndexList match(const QModelIndex& x1, int x2, const QVariant& x3, int x4 = 1, Qt::MatchFlags x5 = Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap)) const { void* fun = LObjects::overrideFun(unique, 65); QModelIndexList ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; ret = qVariantValue<QModelIndexList>(callOverrideFun(fun, 65, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSortFilterProxyModel::match(x1, x2, x3, x4, x5); } return ret; }
    QMimeData* mimeData(const QModelIndexList& x1) const { void* fun = LObjects::overrideFun(unique, 66); QMimeData* ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (QMimeData*)qVariantValue<void*>(callOverrideFun(fun, 66, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSortFilterProxyModel::mimeData(x1); } return ret; }
    QStringList mimeTypes() const { void* fun = LObjects::overrideFun(unique, 67); QStringList ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QStringList>(callOverrideFun(fun, 67, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSortFilterProxyModel::mimeTypes(); } return ret; }
    QModelIndex parent(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 68); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 68, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSortFilterProxyModel::parent(x1); } return ret; }
    bool removeColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 69); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 69, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSortFilterProxyModel::removeColumns(x1, x2, x3); } return ret; }
    bool removeRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 70); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 70, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSortFilterProxyModel::removeRows(x1, x2, x3); } return ret; }
    int rowCount(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 71); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 71, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSortFilterProxyModel::rowCount(x1); } return ret; }
    bool setData(const QModelIndex& x1, const QVariant& x2, int x3 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 72); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 72, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSortFilterProxyModel::setData(x1, x2, x3); } return ret; }
    bool setHeaderData(int x1, Qt::Orientation x2, const QVariant& x3, int x4 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 73); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = callOverrideFun(fun, 73, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSortFilterProxyModel::setHeaderData(x1, x2, x3, x4); } return ret; }
    void setSourceModel(QAbstractItemModel* x1) { void* fun = LObjects::overrideFun(unique, 104); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 104, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSortFilterProxyModel::setSourceModel(x1); }}
    void sort(int x1, Qt::SortOrder x2 = Qt::AscendingOrder) { void* fun = LObjects::overrideFun(unique, 74); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 74, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSortFilterProxyModel::sort(x1, x2); }}
    QSize span(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 75); QSize ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QSize>(callOverrideFun(fun, 75, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSortFilterProxyModel::span(x1); } return ret; }
    Qt::DropActions supportedDropActions() const { void* fun = LObjects::overrideFun(unique, 76); Qt::DropActions ret = (Qt::DropActions)0; if(fun && (LObjects::calling != unique)) { ret = (Qt::DropActions)callOverrideFun(fun, 76, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSortFilterProxyModel::supportedDropActions(); } return ret; }
    void revert() { void* fun = LObjects::overrideFun(unique, 105); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 105, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSortFilterProxyModel::revert(); }}
    bool submit() { void* fun = LObjects::overrideFun(unique, 106); bool ret = false; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 106, 0, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSortFilterProxyModel::submit(); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSortFilterProxyModel::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSortFilterProxyModel::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSortFilterProxyModel::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSortFilterProxyModel::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSortFilterProxyModel::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSortFilterProxyModel::timerEvent(x1); }}
};

class LSound : public QSound {
    Q_OBJECT
    friend class Q158;
public:
    LSound(uint u, const QString& x1, QObject* x2 = 0) : QSound(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSound::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSound::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSound::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSound::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSound::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSound::timerEvent(x1); }}
};

class LSpinBox : public QSpinBox {
    Q_OBJECT
    friend class Q159;
public:
    LSpinBox(uint u, QWidget* x1 = 0) : QSpinBox(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QString textFromValue(int x1) const { void* fun = LObjects::overrideFun(unique, 300); QString ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QString>(callOverrideFun(fun, 300, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSpinBox::textFromValue(x1); } return ret; }
    int valueFromText(const QString& x1) const { void* fun = LObjects::overrideFun(unique, 196); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 196, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSpinBox::valueFromText(x1); } return ret; }
    void fixup(QString& x1) const { void* fun = LObjects::overrideFun(unique, 124); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 124, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSpinBox::fixup(x1); }}
    QValidator::State validate(QString& x1, int& x2) const { void* fun = LObjects::overrideFun(unique, 126); QValidator::State ret = (QValidator::State)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = (QValidator::State)callOverrideFun(fun, 126, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSpinBox::validate(x1, x2); } return ret; }
    void stepBy(int x1) { void* fun = LObjects::overrideFun(unique, 125); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 125, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSpinBox::stepBy(x1); }}
    StepEnabled stepEnabled() const { void* fun = LObjects::overrideFun(unique, 127); StepEnabled ret = (StepEnabled)0; if(fun && (LObjects::calling != unique)) { ret = (StepEnabled)callOverrideFun(fun, 127, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSpinBox::stepEnabled(); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSpinBox::inputMethodQuery(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSpinBox::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSpinBox::sizeHint(); } return ret; }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSpinBox::changeEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSpinBox::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSpinBox::contextMenuEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSpinBox::focusInEvent(x1); }}
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSpinBox::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSpinBox::hideEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSpinBox::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSpinBox::keyReleaseEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSpinBox::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSpinBox::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSpinBox::mouseReleaseEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSpinBox::paintEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSpinBox::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSpinBox::showEvent(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSpinBox::timerEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSpinBox::wheelEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSpinBox::heightForWidth(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSpinBox::actionEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSpinBox::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSpinBox::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSpinBox::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSpinBox::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSpinBox::enterEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSpinBox::focusNextPrevChild(x1); } return ret; }
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSpinBox::inputMethodEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSpinBox::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSpinBox::mouseDoubleClickEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSpinBox::moveEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSpinBox::tabletEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSpinBox::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSpinBox::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSpinBox::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSpinBox::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSpinBox::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSpinBox::disconnectNotify(x1); }}
};

class LSplashScreen : public QSplashScreen {
    Q_OBJECT
    friend class Q160;
public:
    LSplashScreen(uint u, const QPixmap& x1 = QPixmap(), Qt::WindowFlags x2 = 0) : QSplashScreen(x1, x2), unique(u) {}
    LSplashScreen(uint u, QWidget* x1, const QPixmap& x2 = QPixmap(), Qt::WindowFlags x3 = 0) : QSplashScreen(x1, x2, x3), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void drawContents(QPainter* x1) { void* fun = LObjects::overrideFun(unique, 301); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 301, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplashScreen::drawContents(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplashScreen::mousePressEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSplashScreen::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSplashScreen::inputMethodQuery(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSplashScreen::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSplashScreen::sizeHint(); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplashScreen::actionEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplashScreen::changeEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplashScreen::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplashScreen::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplashScreen::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplashScreen::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplashScreen::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplashScreen::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplashScreen::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplashScreen::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSplashScreen::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplashScreen::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplashScreen::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplashScreen::inputMethodEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplashScreen::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplashScreen::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplashScreen::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplashScreen::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplashScreen::mouseMoveEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplashScreen::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplashScreen::moveEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplashScreen::paintEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplashScreen::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplashScreen::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplashScreen::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplashScreen::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSplashScreen::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSplashScreen::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplashScreen::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplashScreen::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplashScreen::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplashScreen::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplashScreen::timerEvent(x1); }}
};

class LSplitter : public QSplitter {
    Q_OBJECT
    friend class Q161;
public:
    LSplitter(uint u, QWidget* x1 = 0) : QSplitter(x1), unique(u) {}
    LSplitter(uint u, Qt::Orientation x1, QWidget* x2 = 0) : QSplitter(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSplitter::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSplitter::sizeHint(); } return ret; }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitter::changeEvent(x1); }}
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitter::childEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitter::resizeEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitter::paintEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSplitter::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSplitter::inputMethodQuery(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitter::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitter::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitter::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitter::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitter::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitter::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitter::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitter::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitter::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSplitter::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitter::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitter::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitter::inputMethodEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitter::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitter::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitter::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitter::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitter::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitter::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitter::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitter::moveEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitter::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitter::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitter::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSplitter::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSplitter::eventFilter(x1, x2); } return ret; }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitter::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitter::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitter::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitter::timerEvent(x1); }}
};

class LSplitterHandle : public QSplitterHandle {
    Q_OBJECT
    friend class Q162;
public:

    static NumList overrideIds;
    uint unique;

    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSplitterHandle::sizeHint(); } return ret; }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitterHandle::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitterHandle::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitterHandle::mouseReleaseEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitterHandle::paintEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSplitterHandle::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSplitterHandle::inputMethodQuery(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSplitterHandle::minimumSizeHint(); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitterHandle::actionEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitterHandle::changeEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitterHandle::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitterHandle::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitterHandle::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitterHandle::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitterHandle::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitterHandle::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitterHandle::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitterHandle::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSplitterHandle::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitterHandle::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitterHandle::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitterHandle::inputMethodEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitterHandle::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitterHandle::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitterHandle::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitterHandle::mouseDoubleClickEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitterHandle::moveEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitterHandle::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitterHandle::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitterHandle::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitterHandle::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSplitterHandle::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSplitterHandle::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitterHandle::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitterHandle::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitterHandle::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitterHandle::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSplitterHandle::timerEvent(x1); }}
};

class LStackedLayout : public QStackedLayout {
    Q_OBJECT
    friend class Q168;
public:
    LStackedLayout(uint u) : unique(u) {}
    LStackedLayout(uint u, QWidget* x1) : QStackedLayout(x1), unique(u) {}
    LStackedLayout(uint u, QLayout* x1) : QStackedLayout(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void addItem(QLayoutItem* x1) { void* fun = LObjects::overrideFun(unique, 145); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 145, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedLayout::addItem(x1); }}
    int count() const { void* fun = LObjects::overrideFun(unique, 146); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 146, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStackedLayout::count(); } return ret; }
    QLayoutItem* itemAt(int x1) const { void* fun = LObjects::overrideFun(unique, 150); QLayoutItem* ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (QLayoutItem*)qVariantValue<void*>(callOverrideFun(fun, 150, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStackedLayout::itemAt(x1); } return ret; }
    QSize minimumSize() const { void* fun = LObjects::overrideFun(unique, 153); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 153, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStackedLayout::minimumSize(); } return ret; }
    void setGeometry(const QRect& x1) { void* fun = LObjects::overrideFun(unique, 154); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 154, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedLayout::setGeometry(x1); }}
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStackedLayout::sizeHint(); } return ret; }
    QLayoutItem* takeAt(int x1) { void* fun = LObjects::overrideFun(unique, 155); QLayoutItem* ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (QLayoutItem*)qVariantValue<void*>(callOverrideFun(fun, 155, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStackedLayout::takeAt(x1); } return ret; }
    int indexOf(QWidget* x1) const { void* fun = LObjects::overrideFun(unique, 156); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 156, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStackedLayout::indexOf(x1); } return ret; }
    Qt::Orientations expandingDirections() const { void* fun = LObjects::overrideFun(unique, 147); Qt::Orientations ret = (Qt::Orientations)0; if(fun && (LObjects::calling != unique)) { ret = (Qt::Orientations)callOverrideFun(fun, 147, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStackedLayout::expandingDirections(); } return ret; }
    QRect geometry() const { void* fun = LObjects::overrideFun(unique, 157); QRect ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QRect>(callOverrideFun(fun, 157, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStackedLayout::geometry(); } return ret; }
    void invalidate() { void* fun = LObjects::overrideFun(unique, 149); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 149, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedLayout::invalidate(); }}
    bool isEmpty() const { void* fun = LObjects::overrideFun(unique, 158); bool ret = false; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 158, 0, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStackedLayout::isEmpty(); } return ret; }
    QLayout* layout() { void* fun = LObjects::overrideFun(unique, 159); QLayout* ret = 0; if(fun && (LObjects::calling != unique)) { ret = (QLayout*)qVariantValue<void*>(callOverrideFun(fun, 159, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStackedLayout::layout(); } return ret; }
    QSize maximumSize() const { void* fun = LObjects::overrideFun(unique, 151); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 151, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStackedLayout::maximumSize(); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedLayout::childEvent(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStackedLayout::eventFilter(x1, x2); } return ret; }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedLayout::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedLayout::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedLayout::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedLayout::timerEvent(x1); }}
};

class LStackedWidget : public QStackedWidget {
    Q_OBJECT
    friend class Q169;
public:
    LStackedWidget(uint u, QWidget* x1 = 0) : QStackedWidget(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStackedWidget::sizeHint(); } return ret; }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedWidget::changeEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedWidget::paintEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStackedWidget::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStackedWidget::inputMethodQuery(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStackedWidget::minimumSizeHint(); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedWidget::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedWidget::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedWidget::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedWidget::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedWidget::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedWidget::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedWidget::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedWidget::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedWidget::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStackedWidget::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedWidget::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedWidget::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedWidget::inputMethodEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedWidget::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedWidget::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedWidget::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedWidget::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedWidget::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedWidget::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedWidget::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedWidget::moveEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedWidget::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedWidget::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedWidget::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedWidget::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStackedWidget::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStackedWidget::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedWidget::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedWidget::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedWidget::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedWidget::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStackedWidget::timerEvent(x1); }}
};

class LStandardItemModel : public QStandardItemModel {
    Q_OBJECT
    friend class Q170;
public:
    LStandardItemModel(uint u, QObject* x1 = 0) : QStandardItemModel(x1), unique(u) {}
    LStandardItemModel(uint u, int x1, int x2, QObject* x3 = 0) : QStandardItemModel(x1, x2, x3), unique(u) {}

    static NumList overrideIds;
    uint unique;

    int columnCount(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 55); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 55, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStandardItemModel::columnCount(x1); } return ret; }
    QVariant data(const QModelIndex& x1, int x2 = Qt::DisplayRole) const { void* fun = LObjects::overrideFun(unique, 56); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 56, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStandardItemModel::data(x1, x2); } return ret; }
    bool dropMimeData(const QMimeData* x1, Qt::DropAction x2, int x3, int x4, const QModelIndex& x5) { void* fun = LObjects::overrideFun(unique, 57); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; ret = callOverrideFun(fun, 57, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStandardItemModel::dropMimeData(x1, x2, x3, x4, x5); } return ret; }
    Qt::ItemFlags flags(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 59); Qt::ItemFlags ret = (Qt::ItemFlags)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (Qt::ItemFlags)callOverrideFun(fun, 59, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStandardItemModel::flags(x1); } return ret; }
    bool hasChildren(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 60); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 60, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStandardItemModel::hasChildren(x1); } return ret; }
    QVariant headerData(int x1, Qt::Orientation x2, int x3 = Qt::DisplayRole) const { void* fun = LObjects::overrideFun(unique, 61); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 61, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStandardItemModel::headerData(x1, x2, x3); } return ret; }
    QModelIndex index(int x1, int x2, const QModelIndex& x3 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 62); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 62, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStandardItemModel::index(x1, x2, x3); } return ret; }
    bool insertColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 63); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 63, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStandardItemModel::insertColumns(x1, x2, x3); } return ret; }
    bool insertRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 64); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 64, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStandardItemModel::insertRows(x1, x2, x3); } return ret; }
    QMimeData* mimeData(const QModelIndexList& x1) const { void* fun = LObjects::overrideFun(unique, 66); QMimeData* ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (QMimeData*)qVariantValue<void*>(callOverrideFun(fun, 66, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStandardItemModel::mimeData(x1); } return ret; }
    QStringList mimeTypes() const { void* fun = LObjects::overrideFun(unique, 67); QStringList ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QStringList>(callOverrideFun(fun, 67, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStandardItemModel::mimeTypes(); } return ret; }
    QModelIndex parent(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 68); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 68, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStandardItemModel::parent(x1); } return ret; }
    bool removeColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 69); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 69, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStandardItemModel::removeColumns(x1, x2, x3); } return ret; }
    bool removeRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 70); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 70, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStandardItemModel::removeRows(x1, x2, x3); } return ret; }
    int rowCount(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 71); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 71, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStandardItemModel::rowCount(x1); } return ret; }
    bool setData(const QModelIndex& x1, const QVariant& x2, int x3 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 72); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 72, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStandardItemModel::setData(x1, x2, x3); } return ret; }
    bool setHeaderData(int x1, Qt::Orientation x2, const QVariant& x3, int x4 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 73); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = callOverrideFun(fun, 73, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStandardItemModel::setHeaderData(x1, x2, x3, x4); } return ret; }
    void sort(int x1, Qt::SortOrder x2 = Qt::AscendingOrder) { void* fun = LObjects::overrideFun(unique, 74); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 74, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStandardItemModel::sort(x1, x2); }}
    Qt::DropActions supportedDropActions() const { void* fun = LObjects::overrideFun(unique, 76); Qt::DropActions ret = (Qt::DropActions)0; if(fun && (LObjects::calling != unique)) { ret = (Qt::DropActions)callOverrideFun(fun, 76, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStandardItemModel::supportedDropActions(); } return ret; }
    QModelIndex buddy(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 53); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 53, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStandardItemModel::buddy(x1); } return ret; }
    bool canFetchMore(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 54); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 54, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStandardItemModel::canFetchMore(x1); } return ret; }
    void fetchMore(const QModelIndex& x1) { void* fun = LObjects::overrideFun(unique, 58); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 58, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStandardItemModel::fetchMore(x1); }}
    QModelIndexList match(const QModelIndex& x1, int x2, const QVariant& x3, int x4 = 1, Qt::MatchFlags x5 = Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap)) const { void* fun = LObjects::overrideFun(unique, 65); QModelIndexList ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; ret = qVariantValue<QModelIndexList>(callOverrideFun(fun, 65, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStandardItemModel::match(x1, x2, x3, x4, x5); } return ret; }
    QSize span(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 75); QSize ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QSize>(callOverrideFun(fun, 75, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStandardItemModel::span(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStandardItemModel::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStandardItemModel::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStandardItemModel::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStandardItemModel::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStandardItemModel::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStandardItemModel::timerEvent(x1); }}
};

class LState : public QState {
    Q_OBJECT
    friend class Q171;
public:
    LState(uint u, QState* x1 = 0) : QState(x1), unique(u) {}
    LState(uint u, ChildMode x1, QState* x2 = 0) : QState(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void onEntry(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 128); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 128, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QState::onEntry(x1); }}
    void onExit(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 129); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 129, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QState::onExit(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QState::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QState::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QState::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QState::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QState::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QState::timerEvent(x1); }}
};

class LStateMachine : public QStateMachine {
    Q_OBJECT
    friend class Q172;
public:
    LStateMachine(uint u, QObject* x1 = 0) : QStateMachine(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStateMachine::eventFilter(x1, x2); } return ret; }
    void onEntry(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 128); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 128, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStateMachine::onEntry(x1); }}
    void onExit(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 129); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 129, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStateMachine::onExit(x1); }}
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStateMachine::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStateMachine::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStateMachine::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStateMachine::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStateMachine::timerEvent(x1); }}
};

class LStatusBar : public QStatusBar {
    Q_OBJECT
    friend class Q173;
public:
    LStatusBar(uint u, QWidget* x1 = 0) : QStatusBar(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStatusBar::paintEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStatusBar::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStatusBar::showEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStatusBar::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStatusBar::inputMethodQuery(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStatusBar::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStatusBar::sizeHint(); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStatusBar::actionEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStatusBar::changeEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStatusBar::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStatusBar::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStatusBar::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStatusBar::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStatusBar::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStatusBar::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStatusBar::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStatusBar::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStatusBar::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStatusBar::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStatusBar::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStatusBar::inputMethodEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStatusBar::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStatusBar::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStatusBar::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStatusBar::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStatusBar::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStatusBar::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStatusBar::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStatusBar::moveEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStatusBar::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStatusBar::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStatusBar::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStatusBar::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStatusBar::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStatusBar::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStatusBar::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStatusBar::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStatusBar::timerEvent(x1); }}
};

class LStringListModel : public QStringListModel {
    Q_OBJECT
    friend class Q174;
public:
    LStringListModel(uint u, QObject* x1 = 0) : QStringListModel(x1), unique(u) {}
    LStringListModel(uint u, const QStringList& x1, QObject* x2 = 0) : QStringListModel(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QVariant data(const QModelIndex& x1, int x2) const { void* fun = LObjects::overrideFun(unique, 56); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 56, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStringListModel::data(x1, x2); } return ret; }
    Qt::ItemFlags flags(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 59); Qt::ItemFlags ret = (Qt::ItemFlags)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (Qt::ItemFlags)callOverrideFun(fun, 59, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStringListModel::flags(x1); } return ret; }
    bool insertRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 64); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 64, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStringListModel::insertRows(x1, x2, x3); } return ret; }
    bool removeRows(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 70); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 70, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStringListModel::removeRows(x1, x2, x3); } return ret; }
    int rowCount(const QModelIndex& x1 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 71); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 71, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStringListModel::rowCount(x1); } return ret; }
    bool setData(const QModelIndex& x1, const QVariant& x2, int x3 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 72); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 72, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStringListModel::setData(x1, x2, x3); } return ret; }
    void sort(int x1, Qt::SortOrder x2 = Qt::AscendingOrder) { void* fun = LObjects::overrideFun(unique, 74); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 74, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStringListModel::sort(x1, x2); }}
    Qt::DropActions supportedDropActions() const { void* fun = LObjects::overrideFun(unique, 76); Qt::DropActions ret = (Qt::DropActions)0; if(fun && (LObjects::calling != unique)) { ret = (Qt::DropActions)callOverrideFun(fun, 76, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStringListModel::supportedDropActions(); } return ret; }
    bool dropMimeData(const QMimeData* x1, Qt::DropAction x2, int x3, int x4, const QModelIndex& x5) { void* fun = LObjects::overrideFun(unique, 57); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; ret = callOverrideFun(fun, 57, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStringListModel::dropMimeData(x1, x2, x3, x4, x5); } return ret; }
    QModelIndex index(int x1, int x2 = 0, const QModelIndex& x3 = QModelIndex()) const { void* fun = LObjects::overrideFun(unique, 62); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 62, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStringListModel::index(x1, x2, x3); } return ret; }
    QModelIndex buddy(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 53); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 53, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStringListModel::buddy(x1); } return ret; }
    bool canFetchMore(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 54); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 54, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStringListModel::canFetchMore(x1); } return ret; }
    void fetchMore(const QModelIndex& x1) { void* fun = LObjects::overrideFun(unique, 58); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 58, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStringListModel::fetchMore(x1); }}
    QVariant headerData(int x1, Qt::Orientation x2, int x3 = Qt::DisplayRole) const { void* fun = LObjects::overrideFun(unique, 61); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 61, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStringListModel::headerData(x1, x2, x3); } return ret; }
    bool insertColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 63); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 63, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStringListModel::insertColumns(x1, x2, x3); } return ret; }
    QModelIndexList match(const QModelIndex& x1, int x2, const QVariant& x3, int x4 = 1, Qt::MatchFlags x5 = Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap)) const { void* fun = LObjects::overrideFun(unique, 65); QModelIndexList ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; ret = qVariantValue<QModelIndexList>(callOverrideFun(fun, 65, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStringListModel::match(x1, x2, x3, x4, x5); } return ret; }
    QMimeData* mimeData(const QModelIndexList& x1) const { void* fun = LObjects::overrideFun(unique, 66); QMimeData* ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (QMimeData*)qVariantValue<void*>(callOverrideFun(fun, 66, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStringListModel::mimeData(x1); } return ret; }
    QStringList mimeTypes() const { void* fun = LObjects::overrideFun(unique, 67); QStringList ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QStringList>(callOverrideFun(fun, 67, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStringListModel::mimeTypes(); } return ret; }
    bool removeColumns(int x1, int x2, const QModelIndex& x3 = QModelIndex()) { void* fun = LObjects::overrideFun(unique, 69); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 69, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStringListModel::removeColumns(x1, x2, x3); } return ret; }
    bool setHeaderData(int x1, Qt::Orientation x2, const QVariant& x3, int x4 = Qt::EditRole) { void* fun = LObjects::overrideFun(unique, 73); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = callOverrideFun(fun, 73, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStringListModel::setHeaderData(x1, x2, x3, x4); } return ret; }
    QSize span(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 75); QSize ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QSize>(callOverrideFun(fun, 75, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStringListModel::span(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStringListModel::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStringListModel::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStringListModel::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStringListModel::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStringListModel::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStringListModel::timerEvent(x1); }}
};

class LStyledItemDelegate : public QStyledItemDelegate {
    Q_OBJECT
    friend class Q176;
public:
    LStyledItemDelegate(uint u, QObject* x1 = 0) : QStyledItemDelegate(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QString displayText(const QVariant& x1, const QLocale& x2) const { void* fun = LObjects::overrideFun(unique, 333); QString ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QString>(callOverrideFun(fun, 333, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStyledItemDelegate::displayText(x1, x2); } return ret; }
    void initStyleOption(QStyleOptionViewItem* x1, const QModelIndex& x2) const { void* fun = LObjects::overrideFun(unique, 334); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 334, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStyledItemDelegate::initStyleOption(x1, x2); }}
    QWidget* createEditor(QWidget* x1, const QStyleOptionViewItem& x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 46); QWidget* ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = (QWidget*)qVariantValue<void*>(callOverrideFun(fun, 46, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStyledItemDelegate::createEditor(x1, x2, x3); } return ret; }
    void paint(QPainter* x1, const QStyleOptionViewItem& x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 48); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 48, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStyledItemDelegate::paint(x1, x2, x3); }}
    void setEditorData(QWidget* x1, const QModelIndex& x2) const { void* fun = LObjects::overrideFun(unique, 49); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 49, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStyledItemDelegate::setEditorData(x1, x2); }}
    void setModelData(QWidget* x1, QAbstractItemModel* x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 50); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 50, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStyledItemDelegate::setModelData(x1, x2, x3); }}
    QSize sizeHint(const QStyleOptionViewItem& x1, const QModelIndex& x2) const { void* fun = LObjects::overrideFun(unique, 51); QSize ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QSize>(callOverrideFun(fun, 51, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStyledItemDelegate::sizeHint(x1, x2); } return ret; }
    void updateEditorGeometry(QWidget* x1, const QStyleOptionViewItem& x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 52); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 52, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStyledItemDelegate::updateEditorGeometry(x1, x2, x3); }}
    bool editorEvent(QEvent* x1, QAbstractItemModel* x2, const QStyleOptionViewItem& x3, const QModelIndex& x4) { void* fun = LObjects::overrideFun(unique, 47); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = callOverrideFun(fun, 47, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStyledItemDelegate::editorEvent(x1, x2, x3, x4); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QStyledItemDelegate::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStyledItemDelegate::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStyledItemDelegate::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStyledItemDelegate::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStyledItemDelegate::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QStyledItemDelegate::timerEvent(x1); }}
};

class LSwipeGesture : public QSwipeGesture {
    Q_OBJECT
    friend class Q179;
public:

    static NumList overrideIds;
    uint unique;

    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSwipeGesture::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSwipeGesture::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSwipeGesture::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSwipeGesture::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSwipeGesture::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSwipeGesture::timerEvent(x1); }}
};

class LSyntaxHighlighter : public QSyntaxHighlighter {
    Q_OBJECT
    friend class Q180;
public:
    LSyntaxHighlighter(uint u, QObject* x1) : QSyntaxHighlighter(x1), unique(u) {}
    LSyntaxHighlighter(uint u, QTextDocument* x1) : QSyntaxHighlighter(x1), unique(u) {}
    LSyntaxHighlighter(uint u, QTextEdit* x1) : QSyntaxHighlighter(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void highlightBlock(const QString& x1) { void* fun = LObjects::overrideFun(unique, 335); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 335, args, unique); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSyntaxHighlighter::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSyntaxHighlighter::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSyntaxHighlighter::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSyntaxHighlighter::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSyntaxHighlighter::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSyntaxHighlighter::timerEvent(x1); }}
};

class LSystemTrayIcon : public QSystemTrayIcon {
    Q_OBJECT
    friend class Q181;
public:
    LSystemTrayIcon(uint u, QObject* x1 = 0) : QSystemTrayIcon(x1), unique(u) {}
    LSystemTrayIcon(uint u, const QIcon& x1, QObject* x2 = 0) : QSystemTrayIcon(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QSystemTrayIcon::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSystemTrayIcon::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSystemTrayIcon::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSystemTrayIcon::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSystemTrayIcon::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QSystemTrayIcon::timerEvent(x1); }}
};

class LTabBar : public QTabBar {
    Q_OBJECT
    friend class Q182;
public:
    LTabBar(uint u, QWidget* x1 = 0) : QTabBar(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void tabInserted(int x1) { void* fun = LObjects::overrideFun(unique, 336); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 336, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabBar::tabInserted(x1); }}
    void tabLayoutChange() { void* fun = LObjects::overrideFun(unique, 337); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 337, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabBar::tabLayoutChange(); }}
    void tabRemoved(int x1) { void* fun = LObjects::overrideFun(unique, 338); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 338, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabBar::tabRemoved(x1); }}
    QSize tabSizeHint(int x1) const { void* fun = LObjects::overrideFun(unique, 339); QSize ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QSize>(callOverrideFun(fun, 339, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTabBar::tabSizeHint(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTabBar::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTabBar::sizeHint(); } return ret; }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabBar::changeEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabBar::hideEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabBar::keyPressEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabBar::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabBar::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabBar::mouseReleaseEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabBar::paintEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabBar::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabBar::showEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabBar::wheelEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTabBar::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTabBar::inputMethodQuery(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabBar::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabBar::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabBar::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabBar::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabBar::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabBar::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabBar::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabBar::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabBar::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTabBar::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabBar::focusOutEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabBar::inputMethodEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabBar::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabBar::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabBar::mouseDoubleClickEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabBar::moveEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabBar::tabletEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTabBar::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTabBar::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabBar::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabBar::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabBar::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabBar::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabBar::timerEvent(x1); }}
};

class LTabWidget : public QTabWidget {
    Q_OBJECT
    friend class Q183;
public:
    LTabWidget(uint u, QWidget* x1 = 0) : QTabWidget(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void tabInserted(int x1) { void* fun = LObjects::overrideFun(unique, 336); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 336, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabWidget::tabInserted(x1); }}
    void tabRemoved(int x1) { void* fun = LObjects::overrideFun(unique, 338); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 338, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabWidget::tabRemoved(x1); }}
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTabWidget::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTabWidget::sizeHint(); } return ret; }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabWidget::changeEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabWidget::keyPressEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabWidget::paintEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabWidget::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabWidget::showEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTabWidget::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTabWidget::inputMethodQuery(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabWidget::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabWidget::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabWidget::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabWidget::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabWidget::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabWidget::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabWidget::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabWidget::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabWidget::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTabWidget::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabWidget::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabWidget::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabWidget::inputMethodEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabWidget::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabWidget::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabWidget::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabWidget::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabWidget::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabWidget::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabWidget::moveEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabWidget::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabWidget::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTabWidget::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTabWidget::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabWidget::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabWidget::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabWidget::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabWidget::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTabWidget::timerEvent(x1); }}
};

class LTableView : public QTableView {
    Q_OBJECT
    friend class Q184;
public:
    LTableView(uint u, QWidget* x1 = 0) : QTableView(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QModelIndex indexAt(const QPoint& x1) const { void* fun = LObjects::overrideFun(unique, 77); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 77, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableView::indexAt(x1); } return ret; }
    void setModel(QAbstractItemModel* x1) { void* fun = LObjects::overrideFun(unique, 80); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 80, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::setModel(x1); }}
    void setRootIndex(const QModelIndex& x1) { void* fun = LObjects::overrideFun(unique, 185); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 185, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::setRootIndex(x1); }}
    void setSelectionModel(QItemSelectionModel* x1) { void* fun = LObjects::overrideFun(unique, 81); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 81, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::setSelectionModel(x1); }}
    void currentChanged(const QModelIndex& x1, const QModelIndex& x2) { void* fun = LObjects::overrideFun(unique, 186); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 186, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::currentChanged(x1, x2); }}
    int horizontalOffset() const { void* fun = LObjects::overrideFun(unique, 86); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 86, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableView::horizontalOffset(); } return ret; }
    bool isIndexHidden(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 87); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 87, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableView::isIndexHidden(x1); } return ret; }
    QModelIndex moveCursor(CursorAction x1, Qt::KeyboardModifiers x2) { void* fun = LObjects::overrideFun(unique, 88); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 88, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableView::moveCursor(x1, x2); } return ret; }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::paintEvent(x1); }}
    QModelIndexList selectedIndexes() const { void* fun = LObjects::overrideFun(unique, 89); QModelIndexList ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QModelIndexList>(callOverrideFun(fun, 89, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableView::selectedIndexes(); } return ret; }
    void selectionChanged(const QItemSelection& x1, const QItemSelection& x2) { void* fun = LObjects::overrideFun(unique, 257); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 257, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::selectionChanged(x1, x2); }}
    void setSelection(const QRect& x1, QItemSelectionModel::SelectionFlags x2) { void* fun = LObjects::overrideFun(unique, 91); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 91, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::setSelection(x1, x2); }}
    int sizeHintForColumn(int x1) const { void* fun = LObjects::overrideFun(unique, 82); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 82, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableView::sizeHintForColumn(x1); } return ret; }
    int sizeHintForRow(int x1) const { void* fun = LObjects::overrideFun(unique, 83); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 83, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableView::sizeHintForRow(x1); } return ret; }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::timerEvent(x1); }}
    void updateGeometries() { void* fun = LObjects::overrideFun(unique, 258); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 258, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::updateGeometries(); }}
    int verticalOffset() const { void* fun = LObjects::overrideFun(unique, 93); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 93, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableView::verticalOffset(); } return ret; }
    QStyleOptionViewItem viewOptions() const { void* fun = LObjects::overrideFun(unique, 94); QStyleOptionViewItem ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QStyleOptionViewItem>(callOverrideFun(fun, 94, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableView::viewOptions(); } return ret; }
    void keyboardSearch(const QString& x1) { void* fun = LObjects::overrideFun(unique, 78); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 78, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::keyboardSearch(x1); }}
    void scrollTo(const QModelIndex& x1, ScrollHint x2 = EnsureVisible) { void* fun = LObjects::overrideFun(unique, 79); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 79, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::scrollTo(x1, x2); }}
    QRect visualRect(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 84); QRect ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QRect>(callOverrideFun(fun, 84, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableView::visualRect(x1); } return ret; }
    bool edit(const QModelIndex& x1, EditTrigger x2, QEvent* x3) { void* fun = LObjects::overrideFun(unique, 85); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 85, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableView::edit(x1, x2, x3); } return ret; }
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex& x1, const QEvent* x2 = 0) const { void* fun = LObjects::overrideFun(unique, 90); QItemSelectionModel::SelectionFlags ret = (QItemSelectionModel::SelectionFlags)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = (QItemSelectionModel::SelectionFlags)callOverrideFun(fun, 90, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableView::selectionCommand(x1, x2); } return ret; }
    void startDrag(Qt::DropActions x1) { void* fun = LObjects::overrideFun(unique, 92); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 92, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::startDrag(x1); }}
    QRegion visualRegionForSelection(const QItemSelection& x1) const { void* fun = LObjects::overrideFun(unique, 95); QRegion ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QRegion>(callOverrideFun(fun, 95, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableView::visualRegionForSelection(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableView::inputMethodQuery(x1); } return ret; }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::dropEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableView::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::focusOutEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::inputMethodEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::keyPressEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::mouseReleaseEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::resizeEvent(x1); }}
    bool viewportEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 96); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 96, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableView::viewportEvent(x1); } return ret; }
    void scrollContentsBy(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 97); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 97, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::scrollContentsBy(x1, x2); }}
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableView::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableView::sizeHint(); } return ret; }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::contextMenuEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::wheelEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::changeEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableView::heightForWidth(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::closeEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::enterEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::hideEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::leaveEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::moveEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::tabletEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableView::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableView::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableView::disconnectNotify(x1); }}
};

class LTableWidget : public QTableWidget {
    Q_OBJECT
    friend class Q185;
public:
    LTableWidget(uint u, QWidget* x1 = 0) : QTableWidget(x1), unique(u) {}
    LTableWidget(uint u, int x1, int x2, QWidget* x3 = 0) : QTableWidget(x1, x2, x3), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool dropMimeData(int x1, int x2, const QMimeData* x3, Qt::DropAction x4) { void* fun = LObjects::overrideFun(unique, 340); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = callOverrideFun(fun, 340, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableWidget::dropMimeData(x1, x2, x3, x4); } return ret; }
    QMimeData* mimeData(const QList<QTableWidgetItem*> x1) const { void* fun = LObjects::overrideFun(unique, 341); QMimeData* ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (QMimeData*)qVariantValue<void*>(callOverrideFun(fun, 341, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableWidget::mimeData(x1); } return ret; }
    QStringList mimeTypes() const { void* fun = LObjects::overrideFun(unique, 67); QStringList ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QStringList>(callOverrideFun(fun, 67, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableWidget::mimeTypes(); } return ret; }
    Qt::DropActions supportedDropActions() const { void* fun = LObjects::overrideFun(unique, 76); Qt::DropActions ret = (Qt::DropActions)0; if(fun && (LObjects::calling != unique)) { ret = (Qt::DropActions)callOverrideFun(fun, 76, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableWidget::supportedDropActions(); } return ret; }
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::dropEvent(x1); }}
    QModelIndex indexAt(const QPoint& x1) const { void* fun = LObjects::overrideFun(unique, 77); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 77, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableWidget::indexAt(x1); } return ret; }
    void setRootIndex(const QModelIndex& x1) { void* fun = LObjects::overrideFun(unique, 185); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 185, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::setRootIndex(x1); }}
    void setSelectionModel(QItemSelectionModel* x1) { void* fun = LObjects::overrideFun(unique, 81); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 81, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::setSelectionModel(x1); }}
    void currentChanged(const QModelIndex& x1, const QModelIndex& x2) { void* fun = LObjects::overrideFun(unique, 186); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 186, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::currentChanged(x1, x2); }}
    int horizontalOffset() const { void* fun = LObjects::overrideFun(unique, 86); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 86, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableWidget::horizontalOffset(); } return ret; }
    bool isIndexHidden(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 87); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 87, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableWidget::isIndexHidden(x1); } return ret; }
    QModelIndex moveCursor(CursorAction x1, Qt::KeyboardModifiers x2) { void* fun = LObjects::overrideFun(unique, 88); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 88, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableWidget::moveCursor(x1, x2); } return ret; }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::paintEvent(x1); }}
    QModelIndexList selectedIndexes() const { void* fun = LObjects::overrideFun(unique, 89); QModelIndexList ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QModelIndexList>(callOverrideFun(fun, 89, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableWidget::selectedIndexes(); } return ret; }
    void selectionChanged(const QItemSelection& x1, const QItemSelection& x2) { void* fun = LObjects::overrideFun(unique, 257); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 257, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::selectionChanged(x1, x2); }}
    void setSelection(const QRect& x1, QItemSelectionModel::SelectionFlags x2) { void* fun = LObjects::overrideFun(unique, 91); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 91, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::setSelection(x1, x2); }}
    int sizeHintForColumn(int x1) const { void* fun = LObjects::overrideFun(unique, 82); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 82, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableWidget::sizeHintForColumn(x1); } return ret; }
    int sizeHintForRow(int x1) const { void* fun = LObjects::overrideFun(unique, 83); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 83, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableWidget::sizeHintForRow(x1); } return ret; }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::timerEvent(x1); }}
    void updateGeometries() { void* fun = LObjects::overrideFun(unique, 258); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 258, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::updateGeometries(); }}
    int verticalOffset() const { void* fun = LObjects::overrideFun(unique, 93); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 93, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableWidget::verticalOffset(); } return ret; }
    QStyleOptionViewItem viewOptions() const { void* fun = LObjects::overrideFun(unique, 94); QStyleOptionViewItem ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QStyleOptionViewItem>(callOverrideFun(fun, 94, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableWidget::viewOptions(); } return ret; }
    void keyboardSearch(const QString& x1) { void* fun = LObjects::overrideFun(unique, 78); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 78, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::keyboardSearch(x1); }}
    void scrollTo(const QModelIndex& x1, ScrollHint x2 = EnsureVisible) { void* fun = LObjects::overrideFun(unique, 79); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 79, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::scrollTo(x1, x2); }}
    QRect visualRect(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 84); QRect ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QRect>(callOverrideFun(fun, 84, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableWidget::visualRect(x1); } return ret; }
    bool edit(const QModelIndex& x1, EditTrigger x2, QEvent* x3) { void* fun = LObjects::overrideFun(unique, 85); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 85, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableWidget::edit(x1, x2, x3); } return ret; }
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex& x1, const QEvent* x2 = 0) const { void* fun = LObjects::overrideFun(unique, 90); QItemSelectionModel::SelectionFlags ret = (QItemSelectionModel::SelectionFlags)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = (QItemSelectionModel::SelectionFlags)callOverrideFun(fun, 90, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableWidget::selectionCommand(x1, x2); } return ret; }
    void startDrag(Qt::DropActions x1) { void* fun = LObjects::overrideFun(unique, 92); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 92, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::startDrag(x1); }}
    QRegion visualRegionForSelection(const QItemSelection& x1) const { void* fun = LObjects::overrideFun(unique, 95); QRegion ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QRegion>(callOverrideFun(fun, 95, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableWidget::visualRegionForSelection(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableWidget::inputMethodQuery(x1); } return ret; }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::dragMoveEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableWidget::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::focusOutEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::inputMethodEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::keyPressEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::mouseReleaseEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::resizeEvent(x1); }}
    bool viewportEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 96); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 96, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableWidget::viewportEvent(x1); } return ret; }
    void scrollContentsBy(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 97); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 97, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::scrollContentsBy(x1, x2); }}
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableWidget::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableWidget::sizeHint(); } return ret; }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::contextMenuEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::wheelEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::changeEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableWidget::heightForWidth(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::closeEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::enterEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::hideEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::leaveEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::moveEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::tabletEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableWidget::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTableWidget::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTableWidget::disconnectNotify(x1); }}
};

class LTapAndHoldGesture : public QTapAndHoldGesture {
    Q_OBJECT
    friend class Q186;
public:

    static NumList overrideIds;
    uint unique;

    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTapAndHoldGesture::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTapAndHoldGesture::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTapAndHoldGesture::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTapAndHoldGesture::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTapAndHoldGesture::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTapAndHoldGesture::timerEvent(x1); }}
};

class LTapGesture : public QTapGesture {
    Q_OBJECT
    friend class Q187;
public:

    static NumList overrideIds;
    uint unique;

    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTapGesture::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTapGesture::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTapGesture::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTapGesture::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTapGesture::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTapGesture::timerEvent(x1); }}
};

class LTextBlockGroup : public QTextBlockGroup {
    Q_OBJECT
    friend class Q190;
public:

    static NumList overrideIds;
    uint unique;

    void blockFormatChanged(const QTextBlock& x1) { void* fun = LObjects::overrideFun(unique, 343); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 343, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBlockGroup::blockFormatChanged(x1); }}
    void blockInserted(const QTextBlock& x1) { void* fun = LObjects::overrideFun(unique, 344); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 344, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBlockGroup::blockInserted(x1); }}
    void blockRemoved(const QTextBlock& x1) { void* fun = LObjects::overrideFun(unique, 345); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 345, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBlockGroup::blockRemoved(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTextBlockGroup::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBlockGroup::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBlockGroup::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBlockGroup::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBlockGroup::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBlockGroup::timerEvent(x1); }}
};

class LTextBrowser : public QTextBrowser {
    Q_OBJECT
    friend class Q191;
public:
    LTextBrowser(uint u, QWidget* x1 = 0) : QTextBrowser(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QVariant loadResource(int x1, const QUrl& x2) { void* fun = LObjects::overrideFun(unique, 289); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 289, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTextBrowser::loadResource(x1, x2); } return ret; }
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTextBrowser::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBrowser::focusOutEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBrowser::keyPressEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBrowser::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBrowser::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBrowser::mouseReleaseEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBrowser::paintEvent(x1); }}
    bool canInsertFromMimeData(const QMimeData* x1) const { void* fun = LObjects::overrideFun(unique, 290); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 290, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTextBrowser::canInsertFromMimeData(x1); } return ret; }
    QMimeData* createMimeDataFromSelection() const { void* fun = LObjects::overrideFun(unique, 291); QMimeData* ret = 0; if(fun && (LObjects::calling != unique)) { ret = (QMimeData*)qVariantValue<void*>(callOverrideFun(fun, 291, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTextBrowser::createMimeDataFromSelection(); } return ret; }
    void insertFromMimeData(const QMimeData* x1) { void* fun = LObjects::overrideFun(unique, 292); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 292, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBrowser::insertFromMimeData(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBrowser::changeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBrowser::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBrowser::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBrowser::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBrowser::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBrowser::dropEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBrowser::focusInEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBrowser::inputMethodEvent(x1); }}
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTextBrowser::inputMethodQuery(x1); } return ret; }
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBrowser::keyReleaseEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBrowser::mouseDoubleClickEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBrowser::resizeEvent(x1); }}
    void scrollContentsBy(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 97); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 97, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBrowser::scrollContentsBy(x1, x2); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBrowser::showEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBrowser::wheelEvent(x1); }}
    bool viewportEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 96); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 96, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTextBrowser::viewportEvent(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTextBrowser::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTextBrowser::sizeHint(); } return ret; }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTextBrowser::heightForWidth(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBrowser::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBrowser::closeEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBrowser::enterEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBrowser::hideEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBrowser::leaveEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBrowser::moveEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBrowser::tabletEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTextBrowser::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTextBrowser::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBrowser::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBrowser::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBrowser::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBrowser::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextBrowser::timerEvent(x1); }}
};

class LTextDocument : public QTextDocument {
    Q_OBJECT
    friend class Q192;
public:
    LTextDocument(uint u, QObject* x1 = 0) : QTextDocument(x1), unique(u) {}
    LTextDocument(uint u, const QString& x1, QObject* x2 = 0) : QTextDocument(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void clear() { void* fun = LObjects::overrideFun(unique, 194); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 194, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextDocument::clear(); }}
    QTextObject* createObject(const QTextFormat& x1) { void* fun = LObjects::overrideFun(unique, 346); QTextObject* ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (QTextObject*)qVariantValue<void*>(callOverrideFun(fun, 346, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTextDocument::createObject(x1); } return ret; }
    QVariant loadResource(int x1, const QUrl& x2) { void* fun = LObjects::overrideFun(unique, 289); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 289, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTextDocument::loadResource(x1, x2); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTextDocument::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextDocument::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextDocument::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextDocument::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextDocument::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextDocument::timerEvent(x1); }}
};

class LTextEdit : public QTextEdit {
    Q_OBJECT
    friend class Q193;
public:
    LTextEdit(uint u, QWidget* x1 = 0) : QTextEdit(x1), unique(u) {}
    LTextEdit(uint u, const QString& x1, QWidget* x2 = 0) : QTextEdit(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QVariant loadResource(int x1, const QUrl& x2) { void* fun = LObjects::overrideFun(unique, 289); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 289, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTextEdit::loadResource(x1, x2); } return ret; }
    bool canInsertFromMimeData(const QMimeData* x1) const { void* fun = LObjects::overrideFun(unique, 290); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 290, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTextEdit::canInsertFromMimeData(x1); } return ret; }
    QMimeData* createMimeDataFromSelection() const { void* fun = LObjects::overrideFun(unique, 291); QMimeData* ret = 0; if(fun && (LObjects::calling != unique)) { ret = (QMimeData*)qVariantValue<void*>(callOverrideFun(fun, 291, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTextEdit::createMimeDataFromSelection(); } return ret; }
    void insertFromMimeData(const QMimeData* x1) { void* fun = LObjects::overrideFun(unique, 292); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 292, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextEdit::insertFromMimeData(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextEdit::changeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextEdit::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextEdit::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextEdit::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextEdit::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextEdit::dropEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextEdit::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTextEdit::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextEdit::focusOutEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextEdit::inputMethodEvent(x1); }}
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTextEdit::inputMethodQuery(x1); } return ret; }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextEdit::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextEdit::keyReleaseEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextEdit::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextEdit::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextEdit::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextEdit::mouseReleaseEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextEdit::paintEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextEdit::resizeEvent(x1); }}
    void scrollContentsBy(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 97); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 97, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextEdit::scrollContentsBy(x1, x2); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextEdit::showEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextEdit::wheelEvent(x1); }}
    bool viewportEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 96); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 96, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTextEdit::viewportEvent(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTextEdit::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTextEdit::sizeHint(); } return ret; }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTextEdit::heightForWidth(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextEdit::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextEdit::closeEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextEdit::enterEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextEdit::hideEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextEdit::leaveEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextEdit::moveEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextEdit::tabletEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTextEdit::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTextEdit::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextEdit::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextEdit::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextEdit::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextEdit::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextEdit::timerEvent(x1); }}
};

class LTextFrame : public QTextFrame {
    Q_OBJECT
    friend class Q194;
public:
    LTextFrame(uint u, QTextDocument* x1) : QTextFrame(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTextFrame::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextFrame::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextFrame::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextFrame::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextFrame::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextFrame::timerEvent(x1); }}
};

class LTextList : public QTextList {
    Q_OBJECT
    friend class Q195;
public:

    static NumList overrideIds;
    uint unique;

    void blockFormatChanged(const QTextBlock& x1) { void* fun = LObjects::overrideFun(unique, 343); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 343, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextList::blockFormatChanged(x1); }}
    void blockInserted(const QTextBlock& x1) { void* fun = LObjects::overrideFun(unique, 344); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 344, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextList::blockInserted(x1); }}
    void blockRemoved(const QTextBlock& x1) { void* fun = LObjects::overrideFun(unique, 345); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 345, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextList::blockRemoved(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTextList::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextList::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextList::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextList::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextList::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextList::timerEvent(x1); }}
};

class LTextObject : public QTextObject {
    Q_OBJECT
    friend class Q196;
public:

    static NumList overrideIds;
    uint unique;

    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTextObject::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextObject::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextObject::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextObject::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextObject::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextObject::timerEvent(x1); }}
};

class LTextTable : public QTextTable {
    Q_OBJECT
    friend class Q197;
public:

    static NumList overrideIds;
    uint unique;

    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTextTable::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextTable::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextTable::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextTable::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextTable::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTextTable::timerEvent(x1); }}
};

class LTimeEdit : public QTimeEdit {
    Q_OBJECT
    friend class Q198;
public:
    LTimeEdit(uint u, QWidget* x1 = 0) : QTimeEdit(x1), unique(u) {}
    LTimeEdit(uint u, const QTime& x1, QWidget* x2 = 0) : QTimeEdit(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QDateTime dateTimeFromText(const QString& x1) const { void* fun = LObjects::overrideFun(unique, 192); QDateTime ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QDateTime>(callOverrideFun(fun, 192, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTimeEdit::dateTimeFromText(x1); } return ret; }
    QString textFromDateTime(const QDateTime& x1) const { void* fun = LObjects::overrideFun(unique, 193); QString ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QString>(callOverrideFun(fun, 193, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTimeEdit::textFromDateTime(x1); } return ret; }
    void clear() { void* fun = LObjects::overrideFun(unique, 194); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 194, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeEdit::clear(); }}
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTimeEdit::sizeHint(); } return ret; }
    void stepBy(int x1) { void* fun = LObjects::overrideFun(unique, 125); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 125, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeEdit::stepBy(x1); }}
    void fixup(QString& x1) const { void* fun = LObjects::overrideFun(unique, 124); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 124, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeEdit::fixup(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeEdit::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTimeEdit::focusNextPrevChild(x1); } return ret; }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeEdit::keyPressEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeEdit::mousePressEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeEdit::paintEvent(x1); }}
    StepEnabled stepEnabled() const { void* fun = LObjects::overrideFun(unique, 127); StepEnabled ret = (StepEnabled)0; if(fun && (LObjects::calling != unique)) { ret = (StepEnabled)callOverrideFun(fun, 127, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTimeEdit::stepEnabled(); } return ret; }
    QValidator::State validate(QString& x1, int& x2) const { void* fun = LObjects::overrideFun(unique, 126); QValidator::State ret = (QValidator::State)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = (QValidator::State)callOverrideFun(fun, 126, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTimeEdit::validate(x1, x2); } return ret; }
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeEdit::wheelEvent(x1); }}
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTimeEdit::inputMethodQuery(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTimeEdit::minimumSizeHint(); } return ret; }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeEdit::changeEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeEdit::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeEdit::contextMenuEvent(x1); }}
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeEdit::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeEdit::hideEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeEdit::keyReleaseEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeEdit::mouseMoveEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeEdit::mouseReleaseEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeEdit::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeEdit::showEvent(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeEdit::timerEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTimeEdit::heightForWidth(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeEdit::actionEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeEdit::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeEdit::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeEdit::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeEdit::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeEdit::enterEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeEdit::inputMethodEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeEdit::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeEdit::mouseDoubleClickEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeEdit::moveEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeEdit::tabletEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTimeEdit::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTimeEdit::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeEdit::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeEdit::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeEdit::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeEdit::disconnectNotify(x1); }}
};

class LTimeLine : public QTimeLine {
    Q_OBJECT
    friend class Q199;
public:
    LTimeLine(uint u, int x1 = 1000, QObject* x2 = 0) : QTimeLine(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    qreal valueForTime(int x1) const { void* fun = LObjects::overrideFun(unique, 347); qreal ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 347, args, unique).toReal(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTimeLine::valueForTime(x1); } return ret; }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeLine::timerEvent(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTimeLine::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeLine::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeLine::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeLine::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimeLine::disconnectNotify(x1); }}
};

class LTimer : public QTimer {
    Q_OBJECT
    friend class Q200;
public:
    LTimer(uint u, QObject* x1 = 0) : QTimer(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimer::timerEvent(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTimer::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimer::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimer::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimer::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTimer::disconnectNotify(x1); }}
};

class LToolBar : public QToolBar {
    Q_OBJECT
    friend class Q201;
public:
    LToolBar(uint u, const QString& x1, QWidget* x2 = 0) : QToolBar(x1, x2), unique(u) {}
    LToolBar(uint u, QWidget* x1 = 0) : QToolBar(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBar::actionEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBar::changeEvent(x1); }}
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBar::childEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBar::paintEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBar::resizeEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QToolBar::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QToolBar::inputMethodQuery(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QToolBar::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QToolBar::sizeHint(); } return ret; }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBar::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBar::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBar::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBar::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBar::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBar::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBar::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBar::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QToolBar::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBar::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBar::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBar::inputMethodEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBar::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBar::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBar::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBar::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBar::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBar::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBar::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBar::moveEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBar::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBar::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBar::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QToolBar::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QToolBar::eventFilter(x1, x2); } return ret; }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBar::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBar::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBar::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBar::timerEvent(x1); }}
};

class LToolBox : public QToolBox {
    Q_OBJECT
    friend class Q202;
public:
    LToolBox(uint u, QWidget* x1 = 0, Qt::WindowFlags x2 = 0) : QToolBox(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void itemInserted(int x1) { void* fun = LObjects::overrideFun(unique, 348); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 348, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBox::itemInserted(x1); }}
    void itemRemoved(int x1) { void* fun = LObjects::overrideFun(unique, 349); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 349, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBox::itemRemoved(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBox::changeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBox::showEvent(x1); }}
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QToolBox::sizeHint(); } return ret; }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBox::paintEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QToolBox::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QToolBox::inputMethodQuery(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QToolBox::minimumSizeHint(); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBox::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBox::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBox::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBox::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBox::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBox::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBox::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBox::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBox::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QToolBox::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBox::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBox::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBox::inputMethodEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBox::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBox::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBox::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBox::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBox::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBox::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBox::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBox::moveEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBox::resizeEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBox::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBox::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QToolBox::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QToolBox::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBox::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBox::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBox::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBox::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolBox::timerEvent(x1); }}
};

class LToolButton : public QToolButton {
    Q_OBJECT
    friend class Q203;
public:
    LToolButton(uint u, QWidget* x1 = 0) : QToolButton(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QToolButton::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QToolButton::sizeHint(); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolButton::actionEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolButton::changeEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolButton::enterEvent(x1); }}
    bool hitButton(const QPoint& x1) const { void* fun = LObjects::overrideFun(unique, 12); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 12, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QToolButton::hitButton(x1); } return ret; }
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolButton::leaveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolButton::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolButton::mouseReleaseEvent(x1); }}
    void nextCheckState() { void* fun = LObjects::overrideFun(unique, 13); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 13, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolButton::nextCheckState(); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolButton::paintEvent(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolButton::timerEvent(x1); }}
    void checkStateSet() { void* fun = LObjects::overrideFun(unique, 11); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 11, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolButton::checkStateSet(); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolButton::focusInEvent(x1); }}
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolButton::focusOutEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolButton::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolButton::keyReleaseEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolButton::mouseMoveEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QToolButton::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QToolButton::inputMethodQuery(x1); } return ret; }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolButton::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolButton::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolButton::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolButton::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolButton::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolButton::dropEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QToolButton::focusNextPrevChild(x1); } return ret; }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolButton::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolButton::inputMethodEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolButton::mouseDoubleClickEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolButton::moveEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolButton::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolButton::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolButton::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolButton::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QToolButton::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QToolButton::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolButton::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolButton::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolButton::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QToolButton::disconnectNotify(x1); }}
};

class LTranslator : public QTranslator {
    Q_OBJECT
    friend class Q204;
public:
    LTranslator(uint u, QObject* x1 = 0) : QTranslator(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool isEmpty() const { void* fun = LObjects::overrideFun(unique, 158); bool ret = false; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 158, 0, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTranslator::isEmpty(); } return ret; }
    QString translate(const char* x1, const char* x2, const char* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 350); QString ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QString>(callOverrideFun(fun, 350, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTranslator::translate(x1, x2, x3); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTranslator::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTranslator::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTranslator::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTranslator::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTranslator::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTranslator::timerEvent(x1); }}
};

class LTreeView : public QTreeView {
    Q_OBJECT
    friend class Q205;
public:
    LTreeView(uint u, QWidget* x1 = 0) : QTreeView(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void drawBranches(QPainter* x1, const QRect& x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 253); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 253, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::drawBranches(x1, x2, x3); }}
    void drawRow(QPainter* x1, const QStyleOptionViewItem& x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 254); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 254, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::drawRow(x1, x2, x3); }}
    void dataChanged(const QModelIndex& x1, const QModelIndex& x2) { void* fun = LObjects::overrideFun(unique, 255); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 255, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::dataChanged(x1, x2); }}
    QModelIndex indexAt(const QPoint& x1) const { void* fun = LObjects::overrideFun(unique, 77); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 77, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeView::indexAt(x1); } return ret; }
    void keyboardSearch(const QString& x1) { void* fun = LObjects::overrideFun(unique, 78); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 78, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::keyboardSearch(x1); }}
    void reset() { void* fun = LObjects::overrideFun(unique, 121); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 121, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::reset(); }}
    void scrollTo(const QModelIndex& x1, ScrollHint x2 = EnsureVisible) { void* fun = LObjects::overrideFun(unique, 79); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 79, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::scrollTo(x1, x2); }}
    void selectAll() { void* fun = LObjects::overrideFun(unique, 184); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 184, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::selectAll(); }}
    void setModel(QAbstractItemModel* x1) { void* fun = LObjects::overrideFun(unique, 80); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 80, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::setModel(x1); }}
    void setRootIndex(const QModelIndex& x1) { void* fun = LObjects::overrideFun(unique, 185); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 185, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::setRootIndex(x1); }}
    void setSelectionModel(QItemSelectionModel* x1) { void* fun = LObjects::overrideFun(unique, 81); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 81, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::setSelectionModel(x1); }}
    QRect visualRect(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 84); QRect ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QRect>(callOverrideFun(fun, 84, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeView::visualRect(x1); } return ret; }
    void currentChanged(const QModelIndex& x1, const QModelIndex& x2) { void* fun = LObjects::overrideFun(unique, 186); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 186, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::currentChanged(x1, x2); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::dragMoveEvent(x1); }}
    int horizontalOffset() const { void* fun = LObjects::overrideFun(unique, 86); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 86, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeView::horizontalOffset(); } return ret; }
    bool isIndexHidden(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 87); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 87, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeView::isIndexHidden(x1); } return ret; }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::keyPressEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::mouseReleaseEvent(x1); }}
    QModelIndex moveCursor(CursorAction x1, Qt::KeyboardModifiers x2) { void* fun = LObjects::overrideFun(unique, 88); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 88, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeView::moveCursor(x1, x2); } return ret; }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::paintEvent(x1); }}
    void rowsAboutToBeRemoved(const QModelIndex& x1, int x2, int x3) { void* fun = LObjects::overrideFun(unique, 256); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 256, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::rowsAboutToBeRemoved(x1, x2, x3); }}
    void rowsInserted(const QModelIndex& x1, int x2, int x3) { void* fun = LObjects::overrideFun(unique, 187); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 187, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::rowsInserted(x1, x2, x3); }}
    void scrollContentsBy(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 97); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 97, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::scrollContentsBy(x1, x2); }}
    QModelIndexList selectedIndexes() const { void* fun = LObjects::overrideFun(unique, 89); QModelIndexList ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QModelIndexList>(callOverrideFun(fun, 89, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeView::selectedIndexes(); } return ret; }
    void selectionChanged(const QItemSelection& x1, const QItemSelection& x2) { void* fun = LObjects::overrideFun(unique, 257); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 257, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::selectionChanged(x1, x2); }}
    void setSelection(const QRect& x1, QItemSelectionModel::SelectionFlags x2) { void* fun = LObjects::overrideFun(unique, 91); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 91, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::setSelection(x1, x2); }}
    int sizeHintForColumn(int x1) const { void* fun = LObjects::overrideFun(unique, 82); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 82, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeView::sizeHintForColumn(x1); } return ret; }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::timerEvent(x1); }}
    void updateGeometries() { void* fun = LObjects::overrideFun(unique, 258); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 258, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::updateGeometries(); }}
    int verticalOffset() const { void* fun = LObjects::overrideFun(unique, 93); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 93, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeView::verticalOffset(); } return ret; }
    bool viewportEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 96); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 96, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeView::viewportEvent(x1); } return ret; }
    QRegion visualRegionForSelection(const QItemSelection& x1) const { void* fun = LObjects::overrideFun(unique, 95); QRegion ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QRegion>(callOverrideFun(fun, 95, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeView::visualRegionForSelection(x1); } return ret; }
    int sizeHintForRow(int x1) const { void* fun = LObjects::overrideFun(unique, 83); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 83, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeView::sizeHintForRow(x1); } return ret; }
    bool edit(const QModelIndex& x1, EditTrigger x2, QEvent* x3) { void* fun = LObjects::overrideFun(unique, 85); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 85, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeView::edit(x1, x2, x3); } return ret; }
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex& x1, const QEvent* x2 = 0) const { void* fun = LObjects::overrideFun(unique, 90); QItemSelectionModel::SelectionFlags ret = (QItemSelectionModel::SelectionFlags)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = (QItemSelectionModel::SelectionFlags)callOverrideFun(fun, 90, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeView::selectionCommand(x1, x2); } return ret; }
    void startDrag(Qt::DropActions x1) { void* fun = LObjects::overrideFun(unique, 92); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 92, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::startDrag(x1); }}
    QStyleOptionViewItem viewOptions() const { void* fun = LObjects::overrideFun(unique, 94); QStyleOptionViewItem ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QStyleOptionViewItem>(callOverrideFun(fun, 94, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeView::viewOptions(); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeView::inputMethodQuery(x1); } return ret; }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::dragLeaveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::dropEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeView::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::focusOutEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::inputMethodEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::resizeEvent(x1); }}
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeView::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeView::sizeHint(); } return ret; }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::contextMenuEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::wheelEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::changeEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeView::heightForWidth(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::closeEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::enterEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::hideEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::leaveEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::moveEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::tabletEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeView::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeView::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeView::disconnectNotify(x1); }}
};

class LTreeWidget : public QTreeWidget {
    Q_OBJECT
    friend class Q206;
public:
    LTreeWidget(uint u, QWidget* x1 = 0) : QTreeWidget(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool dropMimeData(QTreeWidgetItem* x1, int x2, const QMimeData* x3, Qt::DropAction x4) { void* fun = LObjects::overrideFun(unique, 351); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = callOverrideFun(fun, 351, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeWidget::dropMimeData(x1, x2, x3, x4); } return ret; }
    QMimeData* mimeData(const QList<QTreeWidgetItem*> x1) const { void* fun = LObjects::overrideFun(unique, 352); QMimeData* ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (QMimeData*)qVariantValue<void*>(callOverrideFun(fun, 352, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeWidget::mimeData(x1); } return ret; }
    QStringList mimeTypes() const { void* fun = LObjects::overrideFun(unique, 67); QStringList ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QStringList>(callOverrideFun(fun, 67, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeWidget::mimeTypes(); } return ret; }
    Qt::DropActions supportedDropActions() const { void* fun = LObjects::overrideFun(unique, 76); Qt::DropActions ret = (Qt::DropActions)0; if(fun && (LObjects::calling != unique)) { ret = (Qt::DropActions)callOverrideFun(fun, 76, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeWidget::supportedDropActions(); } return ret; }
    void setSelectionModel(QItemSelectionModel* x1) { void* fun = LObjects::overrideFun(unique, 81); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 81, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::setSelectionModel(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::dropEvent(x1); }}
    void drawBranches(QPainter* x1, const QRect& x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 253); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 253, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::drawBranches(x1, x2, x3); }}
    void drawRow(QPainter* x1, const QStyleOptionViewItem& x2, const QModelIndex& x3) const { void* fun = LObjects::overrideFun(unique, 254); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 254, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::drawRow(x1, x2, x3); }}
    void dataChanged(const QModelIndex& x1, const QModelIndex& x2) { void* fun = LObjects::overrideFun(unique, 255); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 255, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::dataChanged(x1, x2); }}
    QModelIndex indexAt(const QPoint& x1) const { void* fun = LObjects::overrideFun(unique, 77); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 77, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeWidget::indexAt(x1); } return ret; }
    void keyboardSearch(const QString& x1) { void* fun = LObjects::overrideFun(unique, 78); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 78, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::keyboardSearch(x1); }}
    void reset() { void* fun = LObjects::overrideFun(unique, 121); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 121, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::reset(); }}
    void scrollTo(const QModelIndex& x1, ScrollHint x2 = EnsureVisible) { void* fun = LObjects::overrideFun(unique, 79); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 79, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::scrollTo(x1, x2); }}
    void selectAll() { void* fun = LObjects::overrideFun(unique, 184); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 184, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::selectAll(); }}
    void setRootIndex(const QModelIndex& x1) { void* fun = LObjects::overrideFun(unique, 185); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 185, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::setRootIndex(x1); }}
    QRect visualRect(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 84); QRect ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QRect>(callOverrideFun(fun, 84, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeWidget::visualRect(x1); } return ret; }
    void currentChanged(const QModelIndex& x1, const QModelIndex& x2) { void* fun = LObjects::overrideFun(unique, 186); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 186, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::currentChanged(x1, x2); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::dragMoveEvent(x1); }}
    int horizontalOffset() const { void* fun = LObjects::overrideFun(unique, 86); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 86, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeWidget::horizontalOffset(); } return ret; }
    bool isIndexHidden(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 87); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 87, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeWidget::isIndexHidden(x1); } return ret; }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::keyPressEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::mouseReleaseEvent(x1); }}
    QModelIndex moveCursor(CursorAction x1, Qt::KeyboardModifiers x2) { void* fun = LObjects::overrideFun(unique, 88); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 88, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeWidget::moveCursor(x1, x2); } return ret; }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::paintEvent(x1); }}
    void rowsAboutToBeRemoved(const QModelIndex& x1, int x2, int x3) { void* fun = LObjects::overrideFun(unique, 256); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 256, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::rowsAboutToBeRemoved(x1, x2, x3); }}
    void rowsInserted(const QModelIndex& x1, int x2, int x3) { void* fun = LObjects::overrideFun(unique, 187); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 187, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::rowsInserted(x1, x2, x3); }}
    void scrollContentsBy(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 97); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 97, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::scrollContentsBy(x1, x2); }}
    QModelIndexList selectedIndexes() const { void* fun = LObjects::overrideFun(unique, 89); QModelIndexList ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QModelIndexList>(callOverrideFun(fun, 89, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeWidget::selectedIndexes(); } return ret; }
    void selectionChanged(const QItemSelection& x1, const QItemSelection& x2) { void* fun = LObjects::overrideFun(unique, 257); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 257, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::selectionChanged(x1, x2); }}
    void setSelection(const QRect& x1, QItemSelectionModel::SelectionFlags x2) { void* fun = LObjects::overrideFun(unique, 91); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 91, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::setSelection(x1, x2); }}
    int sizeHintForColumn(int x1) const { void* fun = LObjects::overrideFun(unique, 82); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 82, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeWidget::sizeHintForColumn(x1); } return ret; }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::timerEvent(x1); }}
    void updateGeometries() { void* fun = LObjects::overrideFun(unique, 258); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 258, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::updateGeometries(); }}
    int verticalOffset() const { void* fun = LObjects::overrideFun(unique, 93); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 93, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeWidget::verticalOffset(); } return ret; }
    bool viewportEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 96); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 96, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeWidget::viewportEvent(x1); } return ret; }
    QRegion visualRegionForSelection(const QItemSelection& x1) const { void* fun = LObjects::overrideFun(unique, 95); QRegion ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QRegion>(callOverrideFun(fun, 95, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeWidget::visualRegionForSelection(x1); } return ret; }
    int sizeHintForRow(int x1) const { void* fun = LObjects::overrideFun(unique, 83); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 83, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeWidget::sizeHintForRow(x1); } return ret; }
    bool edit(const QModelIndex& x1, EditTrigger x2, QEvent* x3) { void* fun = LObjects::overrideFun(unique, 85); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 85, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeWidget::edit(x1, x2, x3); } return ret; }
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex& x1, const QEvent* x2 = 0) const { void* fun = LObjects::overrideFun(unique, 90); QItemSelectionModel::SelectionFlags ret = (QItemSelectionModel::SelectionFlags)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = (QItemSelectionModel::SelectionFlags)callOverrideFun(fun, 90, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeWidget::selectionCommand(x1, x2); } return ret; }
    void startDrag(Qt::DropActions x1) { void* fun = LObjects::overrideFun(unique, 92); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 92, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::startDrag(x1); }}
    QStyleOptionViewItem viewOptions() const { void* fun = LObjects::overrideFun(unique, 94); QStyleOptionViewItem ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QStyleOptionViewItem>(callOverrideFun(fun, 94, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeWidget::viewOptions(); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeWidget::inputMethodQuery(x1); } return ret; }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::dragLeaveEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeWidget::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::focusOutEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::inputMethodEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::resizeEvent(x1); }}
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeWidget::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeWidget::sizeHint(); } return ret; }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::contextMenuEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::wheelEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::changeEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeWidget::heightForWidth(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::closeEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::enterEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::hideEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::leaveEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::moveEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::tabletEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeWidget::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QTreeWidget::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QTreeWidget::disconnectNotify(x1); }}
};

class LUndoGroup : public QUndoGroup {
    Q_OBJECT
    friend class Q208;
public:
    LUndoGroup(uint u, QObject* x1 = 0) : QUndoGroup(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QUndoGroup::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoGroup::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoGroup::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoGroup::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoGroup::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoGroup::timerEvent(x1); }}
};

class LUndoStack : public QUndoStack {
    Q_OBJECT
    friend class Q209;
public:
    LUndoStack(uint u, QObject* x1 = 0) : QUndoStack(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QUndoStack::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoStack::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoStack::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoStack::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoStack::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoStack::timerEvent(x1); }}
};

class LUndoView : public QUndoView {
    Q_OBJECT
    friend class Q210;
public:
    LUndoView(uint u, QWidget* x1 = 0) : QUndoView(x1), unique(u) {}
    LUndoView(uint u, QUndoStack* x1, QWidget* x2 = 0) : QUndoView(x1, x2), unique(u) {}
    LUndoView(uint u, QUndoGroup* x1, QWidget* x2 = 0) : QUndoView(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QModelIndex indexAt(const QPoint& x1) const { void* fun = LObjects::overrideFun(unique, 77); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 77, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QUndoView::indexAt(x1); } return ret; }
    void scrollTo(const QModelIndex& x1, ScrollHint x2 = EnsureVisible) { void* fun = LObjects::overrideFun(unique, 79); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 79, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::scrollTo(x1, x2); }}
    QRect visualRect(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 84); QRect ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QRect>(callOverrideFun(fun, 84, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QUndoView::visualRect(x1); } return ret; }
    void currentChanged(const QModelIndex& x1, const QModelIndex& x2) { void* fun = LObjects::overrideFun(unique, 186); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 186, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::currentChanged(x1, x2); }}
    void dataChanged(const QModelIndex& x1, const QModelIndex& x2) { void* fun = LObjects::overrideFun(unique, 255); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 255, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::dataChanged(x1, x2); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::dropEvent(x1); }}
    int horizontalOffset() const { void* fun = LObjects::overrideFun(unique, 86); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 86, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QUndoView::horizontalOffset(); } return ret; }
    bool isIndexHidden(const QModelIndex& x1) const { void* fun = LObjects::overrideFun(unique, 87); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 87, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QUndoView::isIndexHidden(x1); } return ret; }
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::mouseMoveEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::mouseReleaseEvent(x1); }}
    QModelIndex moveCursor(CursorAction x1, Qt::KeyboardModifiers x2) { void* fun = LObjects::overrideFun(unique, 88); QModelIndex ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = qVariantValue<QModelIndex>(callOverrideFun(fun, 88, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QUndoView::moveCursor(x1, x2); } return ret; }
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::paintEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::resizeEvent(x1); }}
    void rowsAboutToBeRemoved(const QModelIndex& x1, int x2, int x3) { void* fun = LObjects::overrideFun(unique, 256); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 256, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::rowsAboutToBeRemoved(x1, x2, x3); }}
    void rowsInserted(const QModelIndex& x1, int x2, int x3) { void* fun = LObjects::overrideFun(unique, 187); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; callOverrideFun(fun, 187, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::rowsInserted(x1, x2, x3); }}
    QModelIndexList selectedIndexes() const { void* fun = LObjects::overrideFun(unique, 89); QModelIndexList ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QModelIndexList>(callOverrideFun(fun, 89, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QUndoView::selectedIndexes(); } return ret; }
    void selectionChanged(const QItemSelection& x1, const QItemSelection& x2) { void* fun = LObjects::overrideFun(unique, 257); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 257, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::selectionChanged(x1, x2); }}
    void setSelection(const QRect& x1, QItemSelectionModel::SelectionFlags x2) { void* fun = LObjects::overrideFun(unique, 91); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 91, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::setSelection(x1, x2); }}
    void startDrag(Qt::DropActions x1) { void* fun = LObjects::overrideFun(unique, 92); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 92, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::startDrag(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::timerEvent(x1); }}
    void updateGeometries() { void* fun = LObjects::overrideFun(unique, 258); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 258, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::updateGeometries(); }}
    int verticalOffset() const { void* fun = LObjects::overrideFun(unique, 93); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 93, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QUndoView::verticalOffset(); } return ret; }
    QStyleOptionViewItem viewOptions() const { void* fun = LObjects::overrideFun(unique, 94); QStyleOptionViewItem ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QStyleOptionViewItem>(callOverrideFun(fun, 94, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QUndoView::viewOptions(); } return ret; }
    QRegion visualRegionForSelection(const QItemSelection& x1) const { void* fun = LObjects::overrideFun(unique, 95); QRegion ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QRegion>(callOverrideFun(fun, 95, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QUndoView::visualRegionForSelection(x1); } return ret; }
    void keyboardSearch(const QString& x1) { void* fun = LObjects::overrideFun(unique, 78); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 78, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::keyboardSearch(x1); }}
    void setModel(QAbstractItemModel* x1) { void* fun = LObjects::overrideFun(unique, 80); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 80, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::setModel(x1); }}
    void setSelectionModel(QItemSelectionModel* x1) { void* fun = LObjects::overrideFun(unique, 81); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 81, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::setSelectionModel(x1); }}
    int sizeHintForColumn(int x1) const { void* fun = LObjects::overrideFun(unique, 82); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 82, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QUndoView::sizeHintForColumn(x1); } return ret; }
    int sizeHintForRow(int x1) const { void* fun = LObjects::overrideFun(unique, 83); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 83, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QUndoView::sizeHintForRow(x1); } return ret; }
    bool edit(const QModelIndex& x1, EditTrigger x2, QEvent* x3) { void* fun = LObjects::overrideFun(unique, 85); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 85, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QUndoView::edit(x1, x2, x3); } return ret; }
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex& x1, const QEvent* x2 = 0) const { void* fun = LObjects::overrideFun(unique, 90); QItemSelectionModel::SelectionFlags ret = (QItemSelectionModel::SelectionFlags)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = (QItemSelectionModel::SelectionFlags)callOverrideFun(fun, 90, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QUndoView::selectionCommand(x1, x2); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QUndoView::inputMethodQuery(x1); } return ret; }
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::dragEnterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QUndoView::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::focusOutEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::inputMethodEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::keyPressEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::mouseDoubleClickEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::mousePressEvent(x1); }}
    bool viewportEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 96); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 96, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QUndoView::viewportEvent(x1); } return ret; }
    void scrollContentsBy(int x1, int x2) { void* fun = LObjects::overrideFun(unique, 97); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 97, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::scrollContentsBy(x1, x2); }}
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QUndoView::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QUndoView::sizeHint(); } return ret; }
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::contextMenuEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::wheelEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::changeEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QUndoView::heightForWidth(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::closeEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::enterEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::hideEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::leaveEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::moveEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::tabletEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QUndoView::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QUndoView::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QUndoView::disconnectNotify(x1); }}
};

class LVBoxLayout : public QVBoxLayout {
    Q_OBJECT
    friend class Q211;
public:
    LVBoxLayout(uint u) : unique(u) {}
    LVBoxLayout(uint u, QWidget* x1) : QVBoxLayout(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void addItem(QLayoutItem* x1) { void* fun = LObjects::overrideFun(unique, 145); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 145, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QVBoxLayout::addItem(x1); }}
    int count() const { void* fun = LObjects::overrideFun(unique, 146); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 146, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QVBoxLayout::count(); } return ret; }
    Qt::Orientations expandingDirections() const { void* fun = LObjects::overrideFun(unique, 147); Qt::Orientations ret = (Qt::Orientations)0; if(fun && (LObjects::calling != unique)) { ret = (Qt::Orientations)callOverrideFun(fun, 147, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QVBoxLayout::expandingDirections(); } return ret; }
    bool hasHeightForWidth() const { void* fun = LObjects::overrideFun(unique, 148); bool ret = false; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 148, 0, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QVBoxLayout::hasHeightForWidth(); } return ret; }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QVBoxLayout::heightForWidth(x1); } return ret; }
    void invalidate() { void* fun = LObjects::overrideFun(unique, 149); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 149, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QVBoxLayout::invalidate(); }}
    QLayoutItem* itemAt(int x1) const { void* fun = LObjects::overrideFun(unique, 150); QLayoutItem* ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (QLayoutItem*)qVariantValue<void*>(callOverrideFun(fun, 150, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QVBoxLayout::itemAt(x1); } return ret; }
    QSize maximumSize() const { void* fun = LObjects::overrideFun(unique, 151); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 151, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QVBoxLayout::maximumSize(); } return ret; }
    int minimumHeightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 152); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 152, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QVBoxLayout::minimumHeightForWidth(x1); } return ret; }
    QSize minimumSize() const { void* fun = LObjects::overrideFun(unique, 153); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 153, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QVBoxLayout::minimumSize(); } return ret; }
    void setGeometry(const QRect& x1) { void* fun = LObjects::overrideFun(unique, 154); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 154, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QVBoxLayout::setGeometry(x1); }}
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QVBoxLayout::sizeHint(); } return ret; }
    QLayoutItem* takeAt(int x1) { void* fun = LObjects::overrideFun(unique, 155); QLayoutItem* ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (QLayoutItem*)qVariantValue<void*>(callOverrideFun(fun, 155, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QVBoxLayout::takeAt(x1); } return ret; }
    int indexOf(QWidget* x1) const { void* fun = LObjects::overrideFun(unique, 156); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 156, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QVBoxLayout::indexOf(x1); } return ret; }
    QRect geometry() const { void* fun = LObjects::overrideFun(unique, 157); QRect ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QRect>(callOverrideFun(fun, 157, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QVBoxLayout::geometry(); } return ret; }
    bool isEmpty() const { void* fun = LObjects::overrideFun(unique, 158); bool ret = false; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 158, 0, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QVBoxLayout::isEmpty(); } return ret; }
    QLayout* layout() { void* fun = LObjects::overrideFun(unique, 159); QLayout* ret = 0; if(fun && (LObjects::calling != unique)) { ret = (QLayout*)qVariantValue<void*>(callOverrideFun(fun, 159, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QVBoxLayout::layout(); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QVBoxLayout::childEvent(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QVBoxLayout::eventFilter(x1, x2); } return ret; }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QVBoxLayout::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QVBoxLayout::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QVBoxLayout::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QVBoxLayout::timerEvent(x1); }}
};

class LValidator : public QValidator {
    Q_OBJECT
    friend class Q212;
public:
    LValidator(uint u, QObject* x1 = 0) : QValidator(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void fixup(QString& x1) const { void* fun = LObjects::overrideFun(unique, 124); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 124, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QValidator::fixup(x1); }}
    State validate(QString& x1, int& x2) const { void* fun = LObjects::overrideFun(unique, 126); State ret = (State)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = (State)callOverrideFun(fun, 126, args, unique).toInt(); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QValidator::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QValidator::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QValidator::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QValidator::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QValidator::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QValidator::timerEvent(x1); }}
};

class LVariantAnimation : public QVariantAnimation {
    Q_OBJECT
    friend class Q213;
public:
    LVariantAnimation(uint u, QObject* x1 = 0) : QVariantAnimation(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QVariant interpolated(const QVariant& x1, const QVariant& x2, qreal x3) const { void* fun = LObjects::overrideFun(unique, 296); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 296, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QVariantAnimation::interpolated(x1, x2, x3); } return ret; }
    void updateCurrentValue(const QVariant& x1) { void* fun = LObjects::overrideFun(unique, 295); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 295, args, unique); }}
    int duration() const { void* fun = LObjects::overrideFun(unique, 1); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 1, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QVariantAnimation::duration(); } return ret; }
    void updateCurrentTime(int x1) { void* fun = LObjects::overrideFun(unique, 2); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 2, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QVariantAnimation::updateCurrentTime(x1); }}
    void updateState(QAbstractAnimation::State x1, QAbstractAnimation::State x2) { void* fun = LObjects::overrideFun(unique, 4); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 4, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QVariantAnimation::updateState(x1, x2); }}
    void updateDirection(QAbstractAnimation::Direction x1) { void* fun = LObjects::overrideFun(unique, 3); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 3, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QVariantAnimation::updateDirection(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QVariantAnimation::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QVariantAnimation::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QVariantAnimation::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QVariantAnimation::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QVariantAnimation::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QVariantAnimation::timerEvent(x1); }}
};

class LWidget : public QWidget {
    Q_OBJECT
    friend class Q219;
public:
    LWidget(uint u, QWidget* x1 = 0, Qt::WindowFlags x2 = 0) : QWidget(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWidget::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWidget::inputMethodQuery(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWidget::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWidget::sizeHint(); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidget::actionEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidget::changeEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidget::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidget::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidget::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidget::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidget::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidget::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidget::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidget::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWidget::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidget::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidget::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidget::inputMethodEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidget::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidget::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidget::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidget::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidget::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidget::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidget::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidget::moveEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidget::paintEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidget::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidget::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidget::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidget::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWidget::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWidget::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidget::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidget::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidget::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidget::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidget::timerEvent(x1); }}
};

class LWidgetAction : public QWidgetAction {
    Q_OBJECT
    friend class Q220;
public:
    LWidgetAction(uint u, QObject* x1) : QWidgetAction(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QWidget* createWidget(QWidget* x1) { void* fun = LObjects::overrideFun(unique, 368); QWidget* ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = (QWidget*)qVariantValue<void*>(callOverrideFun(fun, 368, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWidgetAction::createWidget(x1); } return ret; }
    void deleteWidget(QWidget* x1) { void* fun = LObjects::overrideFun(unique, 369); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 369, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidgetAction::deleteWidget(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWidgetAction::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidgetAction::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidgetAction::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidgetAction::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidgetAction::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWidgetAction::timerEvent(x1); }}
};

class LWindowsStyle : public QWindowsStyle {
    Q_OBJECT
    friend class Q221;
public:
    LWindowsStyle(uint u) : unique(u) {}

    static NumList overrideIds;
    uint unique;

    void drawComplexControl(ComplexControl x1, const QStyleOptionComplex* x2, QPainter* x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 164); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; callOverrideFun(fun, 164, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWindowsStyle::drawComplexControl(x1, x2, x3, x4); }}
    void drawControl(ControlElement x1, const QStyleOption* x2, QPainter* x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 160); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; callOverrideFun(fun, 160, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWindowsStyle::drawControl(x1, x2, x3, x4); }}
    void drawPrimitive(PrimitiveElement x1, const QStyleOption* x2, QPainter* x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 161); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; callOverrideFun(fun, 161, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWindowsStyle::drawPrimitive(x1, x2, x3, x4); }}
    int pixelMetric(PixelMetric x1, const QStyleOption* x2 = 0, const QWidget* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 162); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = callOverrideFun(fun, 162, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWindowsStyle::pixelMetric(x1, x2, x3); } return ret; }
    void polish(QApplication* x1) { void* fun = LObjects::overrideFun(unique, 173); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 173, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWindowsStyle::polish(x1); }}
    QSize sizeFromContents(ContentsType x1, const QStyleOption* x2, const QSize& x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 166); QSize ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = qVariantValue<QSize>(callOverrideFun(fun, 166, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWindowsStyle::sizeFromContents(x1, x2, x3, x4); } return ret; }
    QPixmap standardPixmap(StandardPixmap x1, const QStyleOption* x2, const QWidget* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 167); QPixmap ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QPixmap>(callOverrideFun(fun, 167, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWindowsStyle::standardPixmap(x1, x2, x3); } return ret; }
    int styleHint(StyleHint x1, const QStyleOption* x2 = 0, const QWidget* x3 = 0, QStyleHintReturn* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 168); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = callOverrideFun(fun, 168, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWindowsStyle::styleHint(x1, x2, x3, x4); } return ret; }
    QRect subElementRect(SubElement x1, const QStyleOption* x2, const QWidget* x3 = 0) const { void* fun = LObjects::overrideFun(unique, 170); QRect ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QRect>(callOverrideFun(fun, 170, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWindowsStyle::subElementRect(x1, x2, x3); } return ret; }
    void unpolish(QApplication* x1) { void* fun = LObjects::overrideFun(unique, 176); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 176, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWindowsStyle::unpolish(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWindowsStyle::eventFilter(x1, x2); } return ret; }
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWindowsStyle::timerEvent(x1); }}
    QPixmap generatedIconPixmap(QIcon::Mode x1, const QPixmap& x2, const QStyleOption* x3) const { void* fun = LObjects::overrideFun(unique, 171); QPixmap ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QPixmap>(callOverrideFun(fun, 171, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWindowsStyle::generatedIconPixmap(x1, x2, x3); } return ret; }
    SubControl hitTestComplexControl(ComplexControl x1, const QStyleOptionComplex* x2, const QPoint& x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 172); SubControl ret = (SubControl)0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = (SubControl)callOverrideFun(fun, 172, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWindowsStyle::hitTestComplexControl(x1, x2, x3, x4); } return ret; }
    QRect subControlRect(ComplexControl x1, const QStyleOptionComplex* x2, SubControl x3, const QWidget* x4 = 0) const { void* fun = LObjects::overrideFun(unique, 169); QRect ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; ret = qVariantValue<QRect>(callOverrideFun(fun, 169, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWindowsStyle::subControlRect(x1, x2, x3, x4); } return ret; }
    void drawItemPixmap(QPainter* x1, const QRect& x2, int x3, const QPixmap& x4) const { void* fun = LObjects::overrideFun(unique, 177); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4 }; callOverrideFun(fun, 177, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWindowsStyle::drawItemPixmap(x1, x2, x3, x4); }}
    void drawItemText(QPainter* x1, const QRect& x2, int x3, const QPalette& x4, bool x5, const QString& x6, QPalette::ColorRole x7 = QPalette::NoRole) const { void* fun = LObjects::overrideFun(unique, 178); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4, &x5, &x6, &x7 }; callOverrideFun(fun, 178, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWindowsStyle::drawItemText(x1, x2, x3, x4, x5, x6, x7); }}
    QRect itemPixmapRect(const QRect& x1, int x2, const QPixmap& x3) const { void* fun = LObjects::overrideFun(unique, 179); QRect ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3 }; ret = qVariantValue<QRect>(callOverrideFun(fun, 179, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWindowsStyle::itemPixmapRect(x1, x2, x3); } return ret; }
    QRect itemTextRect(const QFontMetrics& x1, const QRect& x2, int x3, bool x4, const QString& x5) const { void* fun = LObjects::overrideFun(unique, 180); QRect ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2, &x3, &x4, &x5 }; ret = qVariantValue<QRect>(callOverrideFun(fun, 180, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWindowsStyle::itemTextRect(x1, x2, x3, x4, x5); } return ret; }
    QPalette standardPalette() const { void* fun = LObjects::overrideFun(unique, 163); QPalette ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QPalette>(callOverrideFun(fun, 163, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWindowsStyle::standardPalette(); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWindowsStyle::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWindowsStyle::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWindowsStyle::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWindowsStyle::disconnectNotify(x1); }}
};

class LWizard : public QWizard {
    Q_OBJECT
    friend class Q222;
public:
    LWizard(uint u, QWidget* x1 = 0, Qt::WindowFlags x2 = 0) : QWizard(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    int nextId() const { void* fun = LObjects::overrideFun(unique, 370); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 370, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWizard::nextId(); } return ret; }
    bool validateCurrentPage() { void* fun = LObjects::overrideFun(unique, 371); bool ret = false; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 371, 0, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWizard::validateCurrentPage(); } return ret; }
    void cleanupPage(int x1) { void* fun = LObjects::overrideFun(unique, 372); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 372, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::cleanupPage(x1); }}
    void initializePage(int x1) { void* fun = LObjects::overrideFun(unique, 373); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 373, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::initializePage(x1); }}
    void setVisible(bool x1) { void* fun = LObjects::overrideFun(unique, 99); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 99, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::setVisible(x1); }}
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWizard::sizeHint(); } return ret; }
    void done(int x1) { void* fun = LObjects::overrideFun(unique, 182); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 182, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::done(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::paintEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::resizeEvent(x1); }}
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWizard::minimumSizeHint(); } return ret; }
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::contextMenuEvent(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWizard::eventFilter(x1, x2); } return ret; }
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::keyPressEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::showEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWizard::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWizard::inputMethodQuery(x1); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::actionEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::changeEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWizard::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::inputMethodEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::moveEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWizard::metric(x1); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizard::timerEvent(x1); }}
};

class LWizardPage : public QWizardPage {
    Q_OBJECT
    friend class Q223;
public:
    LWizardPage(uint u, QWidget* x1 = 0) : QWizardPage(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void cleanupPage() { void* fun = LObjects::overrideFun(unique, 374); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 374, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizardPage::cleanupPage(); }}
    void initializePage() { void* fun = LObjects::overrideFun(unique, 375); if(fun && (LObjects::calling != unique)) { callOverrideFun(fun, 375, 0, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizardPage::initializePage(); }}
    bool isComplete() const { void* fun = LObjects::overrideFun(unique, 376); bool ret = false; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 376, 0, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWizardPage::isComplete(); } return ret; }
    int nextId() const { void* fun = LObjects::overrideFun(unique, 370); int ret = 0; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 370, 0, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWizardPage::nextId(); } return ret; }
    bool validatePage() { void* fun = LObjects::overrideFun(unique, 377); bool ret = false; if(fun && (LObjects::calling != unique)) { ret = callOverrideFun(fun, 377, 0, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWizardPage::validatePage(); } return ret; }
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWizardPage::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWizardPage::inputMethodQuery(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWizardPage::minimumSizeHint(); } return ret; }
    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWizardPage::sizeHint(); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizardPage::actionEvent(x1); }}
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizardPage::changeEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizardPage::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizardPage::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizardPage::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizardPage::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizardPage::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizardPage::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizardPage::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizardPage::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWizardPage::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizardPage::focusOutEvent(x1); }}
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizardPage::hideEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizardPage::inputMethodEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizardPage::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizardPage::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizardPage::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizardPage::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizardPage::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizardPage::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizardPage::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizardPage::moveEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizardPage::paintEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizardPage::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizardPage::showEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizardPage::tabletEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizardPage::wheelEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWizardPage::metric(x1); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWizardPage::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizardPage::childEvent(x1); }}
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizardPage::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizardPage::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizardPage::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWizardPage::timerEvent(x1); }}
};

class LWorkspace : public QWorkspace {
    Q_OBJECT
    friend class Q224;
public:
    LWorkspace(uint u, QWidget* x1 = 0) : QWorkspace(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QSize sizeHint() const { void* fun = LObjects::overrideFun(unique, 26); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 26, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWorkspace::sizeHint(); } return ret; }
    void changeEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 14); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 14, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWorkspace::changeEvent(x1); }}
    void childEvent(QChildEvent* x1) { void* fun = LObjects::overrideFun(unique, 6); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWorkspace::childEvent(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { void* fun = LObjects::overrideFun(unique, 5); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWorkspace::eventFilter(x1, x2); } return ret; }
    void hideEvent(QHideEvent* x1) { void* fun = LObjects::overrideFun(unique, 36); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 36, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWorkspace::hideEvent(x1); }}
    void paintEvent(QPaintEvent* x1) { void* fun = LObjects::overrideFun(unique, 22); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 22, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWorkspace::paintEvent(x1); }}
    void resizeEvent(QResizeEvent* x1) { void* fun = LObjects::overrideFun(unique, 41); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 41, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWorkspace::resizeEvent(x1); }}
    void showEvent(QShowEvent* x1) { void* fun = LObjects::overrideFun(unique, 42); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 42, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWorkspace::showEvent(x1); }}
    void wheelEvent(QWheelEvent* x1) { void* fun = LObjects::overrideFun(unique, 44); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 44, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWorkspace::wheelEvent(x1); }}
    int heightForWidth(int x1) const { void* fun = LObjects::overrideFun(unique, 23); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 23, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWorkspace::heightForWidth(x1); } return ret; }
    QVariant inputMethodQuery(Qt::InputMethodQuery x1) const { void* fun = LObjects::overrideFun(unique, 24); QVariant ret; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = qVariantValue<QVariant>(callOverrideFun(fun, 24, args, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWorkspace::inputMethodQuery(x1); } return ret; }
    QSize minimumSizeHint() const { void* fun = LObjects::overrideFun(unique, 25); QSize ret; if(fun && (LObjects::calling != unique)) { ret = qVariantValue<QSize>(callOverrideFun(fun, 25, 0, unique)); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWorkspace::minimumSizeHint(); } return ret; }
    void actionEvent(QActionEvent* x1) { void* fun = LObjects::overrideFun(unique, 27); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 27, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWorkspace::actionEvent(x1); }}
    void closeEvent(QCloseEvent* x1) { void* fun = LObjects::overrideFun(unique, 28); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 28, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWorkspace::closeEvent(x1); }}
    void contextMenuEvent(QContextMenuEvent* x1) { void* fun = LObjects::overrideFun(unique, 29); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 29, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWorkspace::contextMenuEvent(x1); }}
    void dragEnterEvent(QDragEnterEvent* x1) { void* fun = LObjects::overrideFun(unique, 30); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 30, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWorkspace::dragEnterEvent(x1); }}
    void dragLeaveEvent(QDragLeaveEvent* x1) { void* fun = LObjects::overrideFun(unique, 31); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 31, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWorkspace::dragLeaveEvent(x1); }}
    void dragMoveEvent(QDragMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 32); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 32, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWorkspace::dragMoveEvent(x1); }}
    void dropEvent(QDropEvent* x1) { void* fun = LObjects::overrideFun(unique, 33); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 33, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWorkspace::dropEvent(x1); }}
    void enterEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 34); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 34, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWorkspace::enterEvent(x1); }}
    void focusInEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 15); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 15, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWorkspace::focusInEvent(x1); }}
    bool focusNextPrevChild(bool x1) { void* fun = LObjects::overrideFun(unique, 35); bool ret = false; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 35, args, unique).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWorkspace::focusNextPrevChild(x1); } return ret; }
    void focusOutEvent(QFocusEvent* x1) { void* fun = LObjects::overrideFun(unique, 16); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 16, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWorkspace::focusOutEvent(x1); }}
    void inputMethodEvent(QInputMethodEvent* x1) { void* fun = LObjects::overrideFun(unique, 37); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 37, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWorkspace::inputMethodEvent(x1); }}
    void keyPressEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 17); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 17, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWorkspace::keyPressEvent(x1); }}
    void keyReleaseEvent(QKeyEvent* x1) { void* fun = LObjects::overrideFun(unique, 18); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 18, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWorkspace::keyReleaseEvent(x1); }}
    void leaveEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 38); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 38, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWorkspace::leaveEvent(x1); }}
    void mouseDoubleClickEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 39); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 39, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWorkspace::mouseDoubleClickEvent(x1); }}
    void mouseMoveEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 19); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 19, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWorkspace::mouseMoveEvent(x1); }}
    void mousePressEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 20); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 20, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWorkspace::mousePressEvent(x1); }}
    void mouseReleaseEvent(QMouseEvent* x1) { void* fun = LObjects::overrideFun(unique, 21); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 21, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWorkspace::mouseReleaseEvent(x1); }}
    void moveEvent(QMoveEvent* x1) { void* fun = LObjects::overrideFun(unique, 40); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 40, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWorkspace::moveEvent(x1); }}
    void tabletEvent(QTabletEvent* x1) { void* fun = LObjects::overrideFun(unique, 43); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 43, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWorkspace::tabletEvent(x1); }}
    int metric(PaintDeviceMetric x1) const { void* fun = LObjects::overrideFun(unique, 45); int ret = 0; if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 45, args, unique).toInt(); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { ret = QWorkspace::metric(x1); } return ret; }
    void connectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 7); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWorkspace::connectNotify(x1); }}
    void customEvent(QEvent* x1) { void* fun = LObjects::overrideFun(unique, 8); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWorkspace::customEvent(x1); }}
    void disconnectNotify(const char* x1) { void* fun = LObjects::overrideFun(unique, 9); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 9, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWorkspace::disconnectNotify(x1); }}
    void timerEvent(QTimerEvent* x1) { void* fun = LObjects::overrideFun(unique, 10); if(fun && (LObjects::calling != unique)) { const void* args[] = { &x1 }; callOverrideFun(fun, 10, args, unique); } if(!fun || LObjects::call_default || (LObjects::calling == unique)) { QWorkspace::timerEvent(x1); }}
};

QT_END_NAMESPACE

#endif
